        -:    0:Source:grep.c
        -:    0:Graph:grep.gcno
        -:    0:Data:grep.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:/* grep.c - main driver file for grep.
        -:    2:   Copyright (C) 1992 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software; you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation; either version 2, or (at your option)
        -:    7:   any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program; if not, write to the Free Software
        -:   16:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
        -:   17:
        -:   18:   Written July 1992 by Mike Haertel.  */
        -:   19:
        -:   20:/* I added a series define from makefile here in order to run cfe */
        -:   21:#define GREP 1
        -:   22:#define STDC_HEADERS 1
        -:   23:#define HAVE_STRING_H 1
        -:   24:#define HAVE_SYS_PARAM_H 1
        -:   25:#define HAVE_UNISTD_H 1
        -:   26:#define HAVE_ALLOCA_H 1
        -:   27:#define HAVE_GETPAGESIZE 1
        -:   28:#define HAVE_MEMCHR 1
        -:   29:#define HAVE_STRERROR 1
        -:   30:#define HAVE_VALLOC 1
        -:   31:#define HAVE_WORKING_MMAP 1
        -:   32:#define LINUX 1
        -:   33:/*** end of cfe purpose **/
        -:   34:
        -:   35:#include <errno.h>
        -:   36:#include <stdio.h>
        -:   37:
        -:   38:/*******IMPORTANT CHANGE for let stderr redirect to a file *******/
        -:   39:#undef stderr
        -:   40:#define stderr stdout
        -:   41:/******* FINISH IMPORTANT CHANGE *********/
        -:   42:
        -:   43:#ifndef errno
        -:   44:extern int errno;
        -:   45:#endif
        -:   46:
        -:   47:#ifdef STDC_HEADERS
        -:   48:#include <stdlib.h>
        -:   49:#define flag_stdlib 1
        -:   50:#else
        -:   51:#include <sys/types.h>
        -:   52:#define flag_systypes 1
        -:   53:extern char *malloc(), *realloc();
        -:   54:extern void free();
        -:   55:#endif
        -:   56:
        -:   57:#if defined(STDC_HEADERS) || defined(HAVE_STRING_H)
        -:   58:#include <string.h>
        -:   59:#define flag_string 1
        -:   60:#ifdef NEED_MEMORY_H
        -:   61:#include <memory.h>
        -:   62:#define flag_memory 1
        -:   63:#endif
        -:   64:#else
        -:   65:#include <strings.h>
        -:   66:#define flag_strings 1
        -:   67:#ifdef __STDC__
        -:   68:extern void *memchr();
        -:   69:#else
        -:   70:extern char *memchr();
        -:   71:#endif
        -:   72:#define strrchr rindex
        -:   73:#endif
        -:   74:
        -:   75:#ifdef HAVE_UNISTD_H
        -:   76:#if flag_systypes==0
        -:   77:#include <sys/types.h>
        -:   78:#define flag_systypes 1
        -:   79:#endif
        -:   80:#include <fcntl.h>
        -:   81:#include <unistd.h>
        -:   82:#else
        -:   83:#define O_RDONLY 0
        -:   84:extern int open(), read(), close();
        -:   85:#endif
        -:   86:
        -:   87:#include "getpagesize.h"
        -:   88:#include "grep.h"
        -:   89:
        -:   90:#undef MAX
        -:   91:#define MAX(A,B) ((A) > (B) ? (A) : (B))
        -:   92:
        -:   93:/* Provide missing ANSI features if necessary. */
        -:   94:
        -:   95:#ifndef HAVE_STRERROR
        -:   96:extern int sys_nerr;
        -:   97:extern char *sys_errlist[];
        -:   98:#define strerror(E) ((E) < sys_nerr ? sys_errlist[(E)] : "bogus error number")
        -:   99:#endif
        -:  100:
        -:  101:#ifndef HAVE_MEMCHR
        -:  102:#ifdef __STDC__
        -:  103:#define VOID void
        -:  104:#else
        -:  105:#define VOID char
        -:  106:#endif
        -:  107:VOID *
        -:  108:memchr(vp, c, n)
        -:  109:     VOID *vp;
        -:  110:     int c;
        -:  111:     size_t n;
        -:  112:{
        -:  113:  unsigned char *p;
        -:  114:
        -:  115:  for (p = (unsigned char *) vp; n--; ++p)
        -:  116:    if (*p == c)
        -:  117:      return (VOID *) p;
        -:  118:  return 0;
        -:  119:}
        -:  120:#endif
        -:  121:    
        -:  122:/* Define flags declared in grep.h. */
        -:  123:char *matcher;
        -:  124:int match_icase;
        -:  125:int match_words;
        -:  126:int match_lines;
        -:  127:
        -:  128:/* Functions we'll use to search. */
        -:  129:static void (*compile)();
        -:  130:static char *(*execute)();
        -:  131:
        -:  132:/* For error messages. */
        -:  133:static char *prog;
        -:  134:static char *filename;
        -:  135:static int errseen;
        -:  136:
        -:  137:/* Print a message and possibly an error string.  Remember
        -:  138:   that something awful happened. */
        -:  139:static void
function error called 1 returned 100% blocks executed 75%
        1:  140:error(mesg, errnum)
        -:  141:#ifdef __STDC__
        -:  142:     const
        -:  143:#endif
        -:  144:     char *mesg;
        -:  145:     int errnum;
        -:  146:{
        1:  147:  if (errnum)
        1:  147-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:  148:    fprintf(stderr, "%s: %s: %s\n", prog, mesg, strerror(errnum));
        1:  148-block  0
        -:  149:  else
    #####:  150:    fprintf(stderr, "%s: %s\n", prog, mesg);
    $$$$$:  150-block  0
        1:  151:  errseen = 1;
        1:  152:}
        1:  152-block  0
        -:  153:
        -:  154:/* Like error(), but die horribly after printing. */
        -:  155:void
function fatal called 0 returned 0% blocks executed 0%
    #####:  156:fatal(mesg, errnum)
        -:  157:#ifdef __STDC__
        -:  158:     const
        -:  159:#endif
        -:  160:     char *mesg;
        -:  161:     int errnum;
        -:  162:{
    #####:  163:  error(mesg, errnum);
    #####:  164:  exit(2);
    $$$$$:  164-block  0
        -:  165:}
        -:  166:
        -:  167:/* Interface to handle errors and fix library lossage. */
        -:  168:char *
function xmalloc called 11 returned 100% blocks executed 75%
       11:  169:xmalloc(size)
        -:  170:     size_t size;
        -:  171:{
        -:  172:  char *result;
        -:  173:
       11:  174:  result = malloc(size);
       11:  175:  if (size && !result)
       11:  175-block  0
branch  0 taken 100%
branch  1 taken 0%
       11:  175-block  1
branch  2 taken 0%
branch  3 taken 100%
    #####:  176:    fatal("memory exhausted", 0);
    $$$$$:  176-block  0
       11:  177:  return result;
       11:  177-block  0
        -:  178:}
        -:  179:
        -:  180:/* Interface to handle errors and fix some library lossage. */
        -:  181:char *
function xrealloc called 1 returned 100% blocks executed 71%
        1:  182:xrealloc(ptr, size)
        -:  183:     char *ptr;
        -:  184:     size_t size;
        -:  185:{
        -:  186:  char *result;
        -:  187:
        1:  188:  if (ptr)
        1:  188-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  189:    result = realloc(ptr, size);
    $$$$$:  189-block  0
        -:  190:  else
        1:  191:    result = malloc(size);
        1:  191-block  0
        1:  192:  if (size && !result)
        1:  192-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:  192-block  1
branch  2 taken 0%
branch  3 taken 100%
    #####:  193:    fatal("memory exhausted", 0);
    $$$$$:  193-block  0
        1:  194:  return result;
        1:  194-block  0
        -:  195:}
        -:  196:
        -:  197:#if !defined(HAVE_VALLOC)
        -:  198:#define valloc malloc
        -:  199:#else
        -:  200:#ifdef __STDC__
        -:  201:extern void *valloc(size_t);
        -:  202:#else
        -:  203:extern char *valloc();
        -:  204:#endif
        -:  205:#endif
        -:  206:
        -:  207:/* Hairy buffering mechanism for grep.  The intent is to keep
        -:  208:   all reads aligned on a page boundary and multiples of the
        -:  209:   page size. */
        -:  210:
        -:  211:static char *buffer;		/* Base of buffer. */
        -:  212:static size_t bufsalloc;	/* Allocated size of buffer save region. */
        -:  213:static size_t bufalloc;		/* Total buffer size. */
        -:  214:static int bufdesc;		/* File descriptor. */
        -:  215:static char *bufbeg;		/* Beginning of user-visible stuff. */
        -:  216:static char *buflim;		/* Limit of user-visible stuff. */
        -:  217:
        -:  218:#if defined(HAVE_WORKING_MMAP)
        -:  219:#if flag_systypes==0
        -:  220:#include <sys/types.h>
        -:  221:#define flag_systypes 1
        -:  222:#endif
        -:  223:#include <sys/stat.h>
        -:  224:#include <sys/mman.h>
        -:  225:
        -:  226:static int bufmapped;		/* True for ordinary files. */
        -:  227:static struct stat bufstat;	/* From fstat(). */
        -:  228:static off_t bufoffset;		/* What read() normally remembers. */
        -:  229:#endif
        -:  230:
        -:  231:/* Reset the buffer for a new file.  Initialize
        -:  232:   on the first time through. */
        -:  233:void
function reset called 5 returned 100% blocks executed 75%
        5:  234:reset(fd)
        -:  235:     int fd;
        -:  236:{
        -:  237:  static int initialized;
        -:  238:
        5:  239:  if (!initialized)
        5:  239-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  240:    {
        5:  241:      initialized = 1;
        -:  242:#ifndef BUFSALLOC
        5:  243:      bufsalloc = MAX(8192, getpagesize());
        5:  243-block  0
branch  0 taken 100%
branch  1 taken 0%
        5:  243-block  1
    $$$$$:  243-block  2
        -:  244:#else
        -:  245:      bufsalloc = BUFSALLOC;
        -:  246:#endif
        5:  247:      bufalloc = 5 * bufsalloc;
        -:  248:      /* The 1 byte of overflow is a kludge for dfaexec(), which
        -:  249:	 inserts a sentinel newline at the end of the buffer
        -:  250:	 being searched.  There's gotta be a better way... */
        5:  251:      buffer = valloc(bufalloc + 1);
        5:  252:      if (!buffer)
        5:  252-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  253:	fatal("memory exhausted", 0);
    $$$$$:  253-block  0
        5:  254:      bufbeg = buffer;
        5:  255:      buflim = buffer;
        5:  256:    }
        5:  256-block  0
        5:  257:  bufdesc = fd;
        -:  258:#if defined(HAVE_WORKING_MMAP)
        5:  259:  if (fstat(fd, &bufstat) < 0 || !S_ISREG(bufstat.st_mode))
        5:  259-block  0
branch  0 taken 100%
branch  1 taken 0%
        5:  259-block  1
branch  2 taken 0%
branch  3 taken 100%
    #####:  260:    bufmapped = 0;
    $$$$$:  260-block  0
        -:  261:  else
        -:  262:    {
        5:  263:      bufmapped = 1;
        5:  264:      bufoffset = lseek(fd, 0, 1);
        5:  264-block  0
        -:  265:    }
        -:  266:#endif
        5:  267:}
        5:  267-block  0
        -:  268:
        -:  269:/* Read new stuff into the buffer, saving the specified
        -:  270:   amount of old stuff.  When we're done, 'bufbeg' points
        -:  271:   to the beginning of the buffer contents, and 'buflim'
        -:  272:   points just after the end.  Return count of new stuff. */
        -:  273:static int
function fillbuf called 10 returned 100% blocks executed 64%
       10:  274:fillbuf(save)
        -:  275:     size_t save;
        -:  276:{
        -:  277:  char *nbuffer, *dp, *sp;
        -:  278:  int cc;
        -:  279:#if defined(HAVE_WORKING_MMAP)
        -:  280:  caddr_t maddr;
        -:  281:#endif
        -:  282:  static int pagesize;
        -:  283:
       10:  284:  if (pagesize == 0 && (pagesize = getpagesize()) == 0)
       10:  284-block  0
branch  0 taken 50%
branch  1 taken 50%
        5:  284-block  1
branch  2 taken 0%
branch  3 taken 100%
    #####:  285:    abort();
    $$$$$:  285-block  0
        -:  286:
       10:  287:  if (save > bufsalloc)
       10:  287-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  288:    {
    #####:  289:      while (save > bufsalloc)
    $$$$$:  289-block  0
    $$$$$:  289-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  289-block  2
    #####:  290:	bufsalloc *= 2;
    #####:  291:      bufalloc = 5 * bufsalloc;
    #####:  292:      nbuffer = valloc(bufalloc + 1);
    #####:  293:      if (!nbuffer)
    $$$$$:  293-block  0
branch  0 never executed
branch  1 never executed
    #####:  294:	fatal("memory exhausted", 0);
    $$$$$:  294-block  0
    #####:  295:    }
    $$$$$:  295-block  0
        -:  296:  else
       10:  297:    nbuffer = buffer;
       10:  297-block  0
        -:  298:
       10:  299:  sp = buflim - save;
       10:  300:  dp = nbuffer + bufsalloc - save;
       10:  301:  bufbeg = dp;
     3230:  302:  while (save--)
       10:  302-block  0
     3230:  302-block  1
branch  0 taken 99%
branch  1 taken 1%
     3220:  302-block  2
     3220:  303:    *dp++ = *sp++;
        -:  304:
        -:  305:  /* We may have allocated a new, larger buffer.  Since
        -:  306:     there is no portable vfree(), we just have to forget
        -:  307:     about the old one.  Sorry. */
       10:  308:  buffer = nbuffer;
        -:  309:
        -:  310:#if defined(HAVE_WORKING_MMAP)
       10:  311:  if (bufmapped && bufoffset % pagesize == 0
       10:  311-block  0
branch  0 taken 50%
branch  1 taken 50%
        5:  311-block  1
branch  2 taken 100%
branch  3 taken 0%
        5:  312:      && bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
        5:  312-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:  313:    {
    #####:  314:      maddr = buffer + bufsalloc;
    #####:  315:      maddr = mmap(maddr, bufalloc - bufsalloc, PROT_READ | PROT_WRITE,
    #####:  316:		   MAP_PRIVATE | MAP_FIXED, bufdesc, bufoffset);
    #####:  317:      if (maddr == (caddr_t) -1)
    $$$$$:  317-block  0
branch  0 never executed
branch  1 never executed
        -:  318:	{
    #####:  319:	  fprintf(stderr, "%s: warning: %s: %s\n", filename,
    #####:  320:		  strerror(errno));
    #####:  321:	  goto tryread;
    $$$$$:  321-block  0
        -:  322:	}
        -:  323:#if 0
        -:  324:      /* You might thing this (or MADV_WILLNEED) would help,
        -:  325:	 but it doesn't, at least not on a Sun running 4.1.
        -:  326:	 In fact, it actually slows us down about 30%! */
        -:  327:      madvise(maddr, bufalloc - bufsalloc, MADV_SEQUENTIAL);
        -:  328:#endif
    #####:  329:      cc = bufalloc - bufsalloc;
    #####:  330:      bufoffset += cc;
    #####:  331:    }
    $$$$$:  331-block  0
        -:  332:  else
       10:  333:    {
       10:  333-block  0
        -:  334:    tryread:
        -:  335:      /* We come here when we're not going to use mmap() any more.
        -:  336:	 Note that we need to synchronize the file offset the
        -:  337:	 first time through. */
       10:  338:      if (bufmapped)
       10:  338-block  0
branch  0 taken 50%
branch  1 taken 50%
        -:  339:	{
        5:  340:	  bufmapped = 0;
        5:  341:	  lseek(bufdesc, bufoffset, 0);
        5:  342:	}
        5:  342-block  0
       10:  343:      cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
       10:  343-block  0
        -:  344:    }
        -:  345:#else
        -:  346:  cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
        -:  347:#endif
       10:  348:  if (cc > 0)
       10:  348-block  0
branch  0 taken 50%
branch  1 taken 50%
        5:  349:    buflim = buffer + bufsalloc + cc;
        5:  349-block  0
        -:  350:  else
        5:  351:    buflim = buffer + bufsalloc;
        5:  351-block  0
       10:  352:  return cc;
       10:  352-block  0
        -:  353:}
        -:  354:
        -:  355:/* Flags controlling the style of output. */
        -:  356:static int out_quiet;		/* Suppress all normal output. */
        -:  357:static int out_invert;		/* Print nonmatching stuff. */
        -:  358:static int out_file;		/* Print filenames. */
        -:  359:static int out_line;		/* Print line numbers. */
        -:  360:static int out_byte;		/* Print byte offsets. */
        -:  361:static int out_before;		/* Lines of leading context. */
        -:  362:static int out_after;		/* Lines of trailing context. */
        -:  363:
        -:  364:/* Internal variables to keep track of byte count, context, etc. */
        -:  365:static size_t totalcc;		/* Total character count before bufbeg. */
        -:  366:static char *lastnl;		/* Pointer after last newline counted. */
        -:  367:static char *lastout;		/* Pointer after last character output;
        -:  368:				   NULL if no character has been output
        -:  369:				   or if it's conceptually before bufbeg. */
        -:  370:static size_t totalnl;		/* Total newline count before lastnl. */
        -:  371:static int pending;		/* Pending lines of output. */
        -:  372:
        -:  373:static void
function nlscan called 22 returned 100% blocks executed 100%
       22:  374:nlscan(lim)
        -:  375:     char *lim;
        -:  376:{
        -:  377:  char *beg;
        -:  378:
    52044:  379:  for (beg = lastnl; beg < lim; ++beg)
       22:  379-block  0
    52044:  379-block  1
branch  0 taken 99%
branch  1 taken 1%
    52022:  379-block  2
    53012:  380:    if (*beg == '\n')
    52022:  380-block  0
branch  0 taken 98%
branch  1 taken 2%
    52022:  380-block  1
      990:  381:      ++totalnl;
      990:  381-block  0
       22:  382:  lastnl = beg;
       22:  383:}
       22:  383-block  0
        -:  384:
        -:  385:static void
function prline called 20 returned 100% blocks executed 77%
       20:  386:prline(beg, lim, sep)
        -:  387:     char *beg;
        -:  388:     char *lim;
        -:  389:     char sep;
        -:  390:{
       20:  391:  if (out_file)
       20:  391-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  392:    printf("%s%c", filename, sep);
    $$$$$:  392-block  0
       20:  393:  if (out_line)
       20:  393-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:  394:    {
       20:  395:      nlscan(beg);
       20:  396:      printf("%d%c", ++totalnl, sep);
       20:  397:      lastnl = lim;
       20:  398:    }
       20:  398-block  0
       20:  399:  if (out_byte)
       20:  399-block  0
branch  0 taken 100%
branch  1 taken 0%
       20:  400:    printf("%lu%c", totalcc + (beg - bufbeg), sep);
       20:  400-block  0
       20:  401:  fwrite(beg, 1, lim - beg, stdout);
       20:  402:  if (ferror(stdout))
       20:  402-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  403:    error("writing output", errno);
    $$$$$:  403-block  0
       20:  404:  lastout = lim;
       20:  405:}
       20:  405-block  0
        -:  406:
        -:  407:/* Print pending lines of trailing context prior to LIM. */
        -:  408:static void
function prpending called 2 returned 100% blocks executed 90%
        2:  409:prpending(lim)
        -:  410:     char *lim;
        -:  411:{
        -:  412:  char *nl;
        -:  413:
        2:  414:  if (!lastout)
        2:  414-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:  415:    lastout = bufbeg;
        2:  415-block  0
       22:  416:  while (pending > 0 && lastout < lim)
        2:  416-block  0
       22:  416-block  1
branch  0 taken 9%
branch  1 taken 91%
       20:  416-block  2
       22:  416-block  3
branch  2 taken 9%
branch  3 taken 91%
       20:  416-block  4
        -:  417:    {
       20:  418:      --pending;
       20:  419:      if ((nl = memchr(lastout, '\n', lim - lastout)) != 0)
       20:  419-block  0
branch  0 taken 0%
branch  1 taken 100%
       20:  420:	++nl;
       20:  420-block  0
        -:  421:      else
    #####:  422:	nl = lim;
    $$$$$:  422-block  0
       20:  423:      prline(lastout, nl, '-');
        -:  424:    }
        2:  425:}
        2:  425-block  0
        -:  426:
        -:  427:/* Print the lines between BEG and LIM.  Deal with context crap.
        -:  428:   If NLINESP is non-null, store a count of lines between BEG and LIM. */
        -:  429:static void
function prtext called 2 returned 100% blocks executed 27%
        2:  430:prtext(beg, lim, nlinesp)
        -:  431:     char *beg;
        -:  432:     char *lim;
        -:  433:     int *nlinesp;
        -:  434:{
        -:  435:  static int used;		/* avoid printing "--" before any output */
        -:  436:  char *bp, *p, *nl;
        -:  437:  int i, n;
        -:  438:
        2:  439:  if (!out_quiet && pending > 0)
        2:  439-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:  439-block  1
branch  2 never executed
branch  3 never executed
    #####:  440:    prpending(beg);
    $$$$$:  440-block  0
        -:  441:
        2:  442:  p = beg;
        -:  443:
        2:  444:  if (!out_quiet)
        2:  444-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:  445:    {
        -:  446:      /* Deal with leading context crap. */
        -:  447:
    #####:  448:      bp = lastout ? lastout : bufbeg;
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    $$$$$:  448-block  2
    #####:  449:      for (i = 0; i < out_before; ++i)
    $$$$$:  449-block  0
    $$$$$:  449-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  2
    #####:  450:	if (p > bp)
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
    #####:  451:	  do
    $$$$$:  451-block  0
    #####:  452:	    --p;
    $$$$$:  452-block  0
    $$$$$:  452-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  2
    #####:  453:	  while (p > bp && p[-1] != '\n');
    $$$$$:  453-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  453-block  1
        -:  454:
        -:  455:      /* We only print the "--" separator if our output is
        -:  456:	 discontiguous from the last output in the file. */
    #####:  457:      if ((out_before || out_after) && used && p != lastout)
    $$$$$:  457-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  457-block  1
    $$$$$:  457-block  2
    $$$$$:  457-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:  457-block  4
branch  4 never executed
branch  5 never executed
    #####:  458:	puts("--");
    $$$$$:  458-block  0
        -:  459:
    #####:  460:      while (p < beg)
    $$$$$:  460-block  0
    $$$$$:  460-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  460-block  2
        -:  461:	{
    #####:  462:	  nl = memchr(p, '\n', beg - p);
    #####:  463:	  prline(p, nl + 1, '-');
    #####:  464:	  p = nl + 1;
        -:  465:	}
    #####:  466:    }
    $$$$$:  466-block  0
        -:  467:
        2:  468:  if (nlinesp)
        2:  468-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:  469:    {
        -:  470:      /* Caller wants a line count. */
     1032:  471:      for (n = 0; p < lim; ++n)
        2:  471-block  0
     1032:  471-block  1
branch  0 taken 99%
branch  1 taken 1%
     1030:  471-block  2
        -:  472:	{
     1030:  473:	  if ((nl = memchr(p, '\n', lim - p)) != 0)
     1030:  473-block  0
branch  0 taken 100%
branch  1 taken 0%
     1030:  474:	    ++nl;
     1030:  474-block  0
        -:  475:	  else
    #####:  476:	    nl = lim;
    $$$$$:  476-block  0
     1030:  477:	  if (!out_quiet)
     1030:  477-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:  478:	    prline(p, nl, ':');
    $$$$$:  478-block  0
     1030:  479:	  p = nl;
     1030:  480:	}
     1030:  480-block  0
        2:  481:      *nlinesp = n;
        2:  482:    }
        2:  482-block  0
        -:  483:  else
    #####:  484:    if (!out_quiet)
    $$$$$:  484-block  0
branch  0 never executed
branch  1 never executed
    #####:  485:      prline(beg, lim, ':');
    $$$$$:  485-block  0
        -:  486:
        2:  487:  pending = out_after;
        2:  488:  used = 1;
        2:  489:}
        2:  489-block  0
        -:  490:
        -:  491:/* Scan the specified portion of the buffer, matching lines (or
        -:  492:   between matching lines if OUT_INVERT is true).  Return a count of
        -:  493:   lines printed. */
        -:  494:static int
function grepbuf called 5 returned 100% blocks executed 61%
        5:  495:grepbuf(beg, lim)
        -:  496:     char *beg;
        -:  497:     char *lim;
        -:  498:{
        -:  499:  int nlines, n;
        -:  500:  register char *p, *b;
        -:  501:  char *endp;
        -:  502:
        5:  503:  nlines = 0;
        5:  504:  p = beg;
        5:  505:  while ((b = (*execute)(p, lim - p, &endp)) != 0)
        5:  505-block  0
        5:  505-block  1
branch  0 taken 80%
branch  1 taken 20%
    $$$$$:  505-block  2
        -:  506:    {
        -:  507:      /* Avoid matching the empty line at the end of the buffer. */
        1:  508:      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
        1:  508-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:  508-block  1
branch  2 taken 100%
branch  3 taken 0%
        1:  508-block  2
    $$$$$:  508-block  3
        1:  508-block  4
branch  4 taken 0%
branch  5 taken 100%
        1:  509:	break;
        1:  509-block  0
    #####:  510:      if (!out_invert)
    $$$$$:  510-block  0
branch  0 never executed
branch  1 never executed
        -:  511:	{
    #####:  512:	  prtext(b, endp, (int *) 0);
    #####:  513:	  nlines += 1;
    #####:  514:	}
    $$$$$:  514-block  0
    #####:  515:      else if (p < b)
    $$$$$:  515-block  0
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  prtext(p, b, &n);
    #####:  518:	  nlines += n;
    #####:  519:	}
    $$$$$:  519-block  0
    #####:  520:      p = endp;
        -:  521:    }
        5:  522:  if (out_invert && p < lim)
        5:  522-block  0
branch  0 taken 40%
branch  1 taken 60%
        2:  522-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:  523:    {
        2:  524:      prtext(p, lim, &n);
        2:  525:      nlines += n;
        2:  526:    }
        2:  526-block  0
        5:  527:  return nlines;
        5:  527-block  0
        -:  528:}
        -:  529:
        -:  530:/* Search a given file.  Return a count of lines printed. */
        -:  531:static int
function grep called 5 returned 100% blocks executed 82%
        5:  532:grep(fd)
        -:  533:     int fd;
        -:  534:{
        -:  535:  int nlines, i;
        -:  536:  size_t residue, save;
        -:  537:  char *beg, *lim;
        -:  538:
        5:  539:  reset(fd);
        -:  540:
        5:  541:  totalcc = 0;
        5:  542:  lastout = 0;
        5:  543:  totalnl = 0;
        5:  544:  pending = 0;
        -:  545:
        5:  546:  nlines = 0;
        5:  547:  residue = 0;
        5:  548:  save = 0;
        -:  549:
       10:  550:  for (;;)
        5:  550-block  0
        5:  550-block  1
        -:  551:    {
       10:  552:      if (fillbuf(save) < 0)
       10:  552-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:  553:	{
    #####:  554:	  error(filename, errno);
    #####:  555:	  return nlines;
    $$$$$:  555-block  0
        -:  556:	}
       10:  557:      lastnl = bufbeg;
       10:  558:      if (lastout)
       10:  558-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:  559:	lastout = bufbeg;
    $$$$$:  559-block  0
       10:  560:      if (buflim - bufbeg == save)
       10:  560-block  0
branch  0 taken 50%
branch  1 taken 50%
        5:  561:	break;
        5:  561-block  0
        5:  562:      beg = bufbeg + save - residue;
        5:  563:      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
        5:  563-block  0
        5:  563-block  1
branch  0 taken 0%
branch  1 taken 100%
        5:  563-block  2
        5:  563-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$:  563-block  4
    $$$$$:  563-block  5
        -:  564:	;
        5:  565:      residue = buflim - lim;
        5:  566:      if (beg < lim)
        5:  566-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:  567:	{
        5:  568:	  nlines += grepbuf(beg, lim);
        5:  569:	  if (pending)
        5:  569-block  0
branch  0 taken 60%
branch  1 taken 40%
        2:  570:	    prpending(lim);
        2:  570-block  0
        5:  571:	}
        5:  571-block  0
        5:  572:      i = 0;
        5:  573:      beg = lim;
       55:  574:      while (i < out_before && beg > bufbeg && beg != lastout)
        5:  574-block  0
       55:  574-block  1
branch  0 taken 91%
branch  1 taken 9%
       50:  574-block  2
branch  2 taken 0%
branch  3 taken 100%
       50:  574-block  3
       55:  574-block  4
branch  4 taken 91%
branch  5 taken 9%
       50:  574-block  5
        -:  575:	{
       50:  576:	  ++i;
       50:  577:	  do
       50:  577-block  0
     3270:  578:	    --beg;
     3220:  578-block  0
     3220:  578-block  1
branch  0 taken 98%
branch  1 taken 2%
     3220:  579:	  while (beg > bufbeg && beg[-1] != '\n');
     3220:  579-block  0
branch  0 taken 0%
branch  1 taken 100%
     3220:  579-block  1
        -:  580:	}
        5:  581:      if (beg != lastout)
        5:  581-block  0
branch  0 taken 0%
branch  1 taken 100%
        5:  582:	lastout = 0;
        5:  582-block  0
        5:  583:      save = residue + lim - beg;
        5:  584:      totalcc += buflim - bufbeg - save;
        5:  585:      if (out_line)
        5:  585-block  0
branch  0 taken 60%
branch  1 taken 40%
        2:  586:	nlscan(beg);
        2:  586-block  0
        -:  587:    }
        5:  588:  if (residue)
        5:  588-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:  589:    {
    #####:  590:      nlines += grepbuf(bufbeg + save - residue, buflim);
    #####:  591:      if (pending)
    $$$$$:  591-block  0
branch  0 never executed
branch  1 never executed
    #####:  592:	prpending(buflim);
    $$$$$:  592-block  0
    #####:  593:    }
    $$$$$:  593-block  0
        5:  594:  return nlines;
        5:  594-block  0
        5:  595:}
        5:  595-block  0
        -:  596:
        -:  597:static char version[] = "GNU grep version 2.0";
        -:  598:
        -:  599:#define USAGE \
        -:  600:  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
        -:  601:
        -:  602:static void
function usage called 1 returned 100% blocks executed 100%
        1:  603:usage()
        -:  604:{
        1:  605:  fprintf(stderr, USAGE, prog);
        1:  606:  exit(2);
        1:  606-block  0
        -:  607:}
        -:  608:
        -:  609:/* Go through the matchers vector and look for the specified matcher.
        -:  610:   If we find it, install it in compile and execute, and return 1.  */
        -:  611:int
function setmatcher called 6 returned 100% blocks executed 100%
        6:  612:setmatcher(name)
        -:  613:     char *name;
        -:  614:{
        -:  615:  int i;
        -:  616:
       31:  617:  for (i = 0; matchers[i].name; ++i)
        6:  617-block  0
       31:  617-block  1
branch  0 taken 97%
branch  1 taken 3%
       25:  617-block  2
       30:  618:    if (strcmp(name, matchers[i].name) == 0)
       30:  618-block  0
branch  0 taken 17%
branch  1 taken 83%
       25:  618-block  1
        -:  619:      {
        5:  620:	compile = matchers[i].compile;
        5:  621:	execute = matchers[i].execute;
        5:  622:	return 1;
        5:  622-block  0
        -:  623:      }
        1:  624:  return 0;
        1:  624-block  0
        6:  625:}  
        6:  625-block  0
        -:  626:
        -:  627:int
function main called 7 returned 71% blocks executed 48%
        7:  628:main(argc, argv)
        -:  629:     int argc;
        -:  630:     char *argv[];
        -:  631:{
        -:  632:  char *keys;
        -:  633:  size_t keycc, oldcc, keyalloc;
        -:  634:  int keyfound, count_matches, no_filenames, list_files, suppress_errors;
        -:  635:  int opt, cc, desc, count, status;
        -:  636:  FILE *fp;
        -:  637:  extern char *optarg;
        -:  638:  extern int optind;
        -:  639:  /* add this line for diff between *.c and *.int.c */
        7:  640:  argv[0] = "target";
        -:  641:
        7:  642:  prog = argv[0];
        7:  643:  if (prog && strrchr(prog, '/'))
        7:  643-block  0
branch  0 taken 86%
branch  1 taken 14%
        6:  643-block  1
branch  2 taken 100%
branch  3 taken 0%
    #####:  644:    prog = strrchr(prog, '/') + 1;
    $$$$$:  644-block  0
        -:  645:
        7:  646:  keys = NULL;
        7:  647:  keycc = 0;
        7:  648:  keyfound = 0;
        7:  649:  count_matches = 0;
        7:  650:  no_filenames = 0;
        7:  651:  list_files = 0;
        7:  652:  suppress_errors = 0;
        7:  653:  matcher = NULL;
        -:  654:
       45:  655:  while ((opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy"))
        5:  655-block  0
       43:  655-block  1
branch  0 taken 88%
branch  1 taken 12%
       43:  655-block  2
branch  2 taken 88%
branch  3 taken 12%
       38:  655-block  3
       43:  656:	 != EOF)
       38:  657:    switch (opt)
       38:  657-block  0
branch  0 taken 0%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 16%
branch  4 taken 16%
branch  5 taken 0%
branch  6 taken 3%
branch  7 taken 5%
branch  8 taken 3%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 11%
branch 12 taken 11%
branch 13 taken 3%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 11%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 5%
branch 22 taken 3%
branch 23 taken 5%
    $$$$$:  657-block  1
    $$$$$:  657-block  2
    $$$$$:  657-block  3
    $$$$$:  657-block  4
    $$$$$:  657-block  5
    $$$$$:  657-block  6
    $$$$$:  657-block  7
    $$$$$:  657-block  8
    $$$$$:  657-block  9
    $$$$$:  657-block 10
        -:  658:      {
        -:  659:      case '0':
        -:  660:      case '1':
        -:  661:      case '2':
        -:  662:      case '3':
        -:  663:      case '4':
        -:  664:      case '5':
        -:  665:      case '6':
        -:  666:      case '7':
        -:  667:      case '8':
        -:  668:      case '9':
    #####:  669:	out_before = 10 * out_before + opt - '0';
    #####:  670:	out_after = 10 * out_after + opt - '0';
    #####:  671:	break;
    $$$$$:  671-block  0
        -:  672:      case 'A':
        6:  673:	out_after = atoi(optarg);
        6:  674:	if (out_after < 0)
        6:  674-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  675:	  usage();
    $$$$$:  675-block  0
        6:  676:	break;
        6:  676-block  0
        -:  677:      case 'B':
        6:  678:	out_before = atoi(optarg);
        6:  679:	if (out_before < 0)
        6:  679-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  680:	  usage();
    $$$$$:  680-block  0
        6:  681:	break;
        6:  681-block  0
        -:  682:      case 'C':
    #####:  683:	out_before = out_after = 2;
    #####:  684:	break;
    $$$$$:  684-block  0
        -:  685:      case 'E':
        1:  686:	if (matcher && strcmp(matcher, "egrep") != 0)
        1:  686-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:  686-block  1
branch  2 never executed
branch  3 never executed
    #####:  687:	  fatal("you may specify only one of -E, -F, or -G", 0);
    $$$$$:  687-block  0
        1:  688:	matcher = "posix-egrep";
        1:  689:	break;
        1:  689-block  0
        -:  690:      case 'F':
        2:  691:	if (matcher && strcmp(matcher, "fgrep") != 0)
        2:  691-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:  691-block  1
branch  2 never executed
branch  3 never executed
    #####:  692:	  fatal("you may specify only one of -E, -F, or -G", 0);;
    $$$$$:  692-block  0
        2:  693:	matcher = "fgrep";
        2:  694:	break;
        2:  694-block  0
        -:  695:      case 'G':
        1:  696:	if (matcher && strcmp(matcher, "grep") != 0)
        1:  696-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:  696-block  1
branch  2 never executed
branch  3 never executed
    #####:  697:	  fatal("you may specify only one of -E, -F, or -G", 0);
    $$$$$:  697-block  0
        1:  698:	matcher = "grep";
        1:  699:	break;
        1:  699-block  0
        -:  700:      case 'V':
    #####:  701:	fprintf(stderr, "%s\n", version);
    #####:  702:	break;
    $$$$$:  702-block  0
        -:  703:      case 'X':
    #####:  704:	if (matcher)
    $$$$$:  704-block  0
branch  0 never executed
branch  1 never executed
    #####:  705:	  fatal("matcher already specified", 0);
    $$$$$:  705-block  0
    #####:  706:	matcher = optarg;
    #####:  707:	break;
    $$$$$:  707-block  0
        -:  708:      case 'b':
        4:  709:	out_byte = 1;
        4:  710:	break;
        4:  710-block  0
        -:  711:      case 'c':
        4:  712:	out_quiet = 1;
        4:  713:	count_matches = 1;
        4:  714:	break;
        4:  714-block  0
        -:  715:      case 'e':
        1:  716:	cc = strlen(optarg);
        1:  717:	keys = xrealloc(keys, keycc + cc + 1);
        1:  718:	if (keyfound)
        1:  718-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:  719:	  keys[keycc++] = '\n';
    $$$$$:  719-block  0
        1:  720:	strcpy(&keys[keycc], optarg);
        1:  721:	keycc += cc;
        1:  722:	keyfound = 1;
        1:  723:	break;
        1:  723-block  0
        -:  724:      case 'f':
    #####:  725:	fp = strcmp(optarg, "-") != 0 ? fopen(optarg, "r") : stdin;
    $$$$$:  725-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  725-block  1
    $$$$$:  725-block  2
    #####:  726:	if (!fp)
    $$$$$:  726-block  0
branch  0 never executed
branch  1 never executed
    #####:  727:	  fatal(optarg, errno);
    $$$$$:  727-block  0
    #####:  728:	for (keyalloc = 1; keyalloc <= keycc; keyalloc *= 2)
    $$$$$:  728-block  0
    $$$$$:  728-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  728-block  2
    $$$$$:  728-block  3
        -:  729:	  ;
    #####:  730:	keys = xrealloc(keys, keyalloc);
    #####:  731:	oldcc = keycc;
    #####:  732:	if (keyfound)
    $$$$$:  732-block  0
branch  0 never executed
branch  1 never executed
    #####:  733:	  keys[keycc++] = '\n';
    $$$$$:  733-block  0
    #####:  734:	while (!feof(fp)
    $$$$$:  734-block  0
    $$$$$:  734-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  734-block  2
    #####:  735:	       && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0)
    $$$$$:  735-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  735-block  1
        -:  736:	  {
    #####:  737:	    keycc += cc;
    #####:  738:	    if (keycc == keyalloc)
    $$$$$:  738-block  0
branch  0 never executed
branch  1 never executed
    #####:  739:	      keys = xrealloc(keys, keyalloc *= 2);
    $$$$$:  739-block  0
        -:  740:	  }
    #####:  741:	if (fp != stdin)
    $$$$$:  741-block  0
branch  0 never executed
branch  1 never executed
    #####:  742:	  fclose(fp);
    $$$$$:  742-block  0
        -:  743:	/* Nuke the final newline to avoid matching a null string. */
    #####:  744:	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
    $$$$$:  744-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  744-block  1
branch  2 never executed
branch  3 never executed
    #####:  745:	  --keycc;
    $$$$$:  745-block  0
    #####:  746:	keyfound = 1;
    #####:  747:	break;
    $$$$$:  747-block  0
        -:  748:      case 'h':
    #####:  749:	no_filenames = 1;
    #####:  750:	break;
    $$$$$:  750-block  0
        -:  751:      case 'i':
        -:  752:      case 'y':			/* For old-timers . . . */
        1:  753:	match_icase = 1;
        1:  754:	break;
        1:  754-block  0
        -:  755:      case 'L':
        -:  756:	/* Like -l, except list files that don't contain matches.
        -:  757:	   Inspired by the same option in Hume's gre. */
    #####:  758:	out_quiet = 1;
    #####:  759:	list_files = -1;
    #####:  760:	break;
    $$$$$:  760-block  0
        -:  761:      case 'l':
    #####:  762:	out_quiet = 1;
    #####:  763:	list_files = 1;
    #####:  764:	break;
    $$$$$:  764-block  0
        -:  765:      case 'n':
        4:  766:	out_line = 1;
        4:  767:	break;
        4:  767-block  0
        -:  768:      case 'q':
        1:  769:	out_quiet = 1;
        1:  770:	break;
        1:  770-block  0
        -:  771:      case 's':
        1:  772:	suppress_errors = 1;
        1:  773:	break;
        1:  773-block  0
        -:  774:      case 'v':
        2:  775:	out_invert = 1;
        2:  776:	break;
        2:  776-block  0
        -:  777:      case 'w':
        1:  778:	match_words = 1;
        1:  779:	break;
        1:  779-block  0
        -:  780:      case 'x':
        2:  781:	match_lines = 1;
        2:  782:	break;
        2:  782-block  0
        -:  783:      default:
        1:  784:	usage();
        1:  785:	break;
        1:  785-block  0
        -:  786:      }
        -:  787:
        5:  788:  if (!keyfound)
        5:  788-block  0
branch  0 taken 20%
branch  1 taken 80%
        8:  789:    if (optind < argc)
        4:  789-block  0
branch  0 taken 100%
branch  1 taken 0%
        4:  789-block  1
        -:  790:      {
        4:  791:	keys = argv[optind++];
        4:  792:	keycc = strlen(keys);
        4:  793:      }
        4:  793-block  0
        -:  794:    else
    #####:  795:      usage();
    $$$$$:  795-block  0
        -:  796:
        5:  797:  if (!matcher)
        5:  797-block  0
branch  0 taken 80%
branch  1 taken 20%
        1:  798:    matcher = prog;
        1:  798-block  0
        -:  799:
        5:  800:  if (!setmatcher(matcher) && !setmatcher("default"))
        5:  800-block  0
branch  0 taken 20%
branch  1 taken 80%
        1:  800-block  1
branch  2 taken 100%
branch  3 taken 0%
    #####:  801:    abort();
    $$$$$:  801-block  0
        -:  802:
        5:  803:  (*compile)(keys, keycc);
        -:  804:
        5:  805:  if (argc - optind > 1 && !no_filenames)
        5:  805-block  0
branch  0 taken 20%
branch  1 taken 80%
        1:  805-block  1
branch  2 taken 0%
branch  3 taken 100%
        1:  806:    out_file = 1;
        1:  806-block  0
        -:  807:
        5:  808:  status = 1;
        -:  809:
        5:  810:  if (optind < argc)
        5:  810-block  0
branch  0 taken 100%
branch  1 taken 0%
       11:  811:    while (optind < argc)
        5:  811-block  0
       11:  811-block  1
branch  0 taken 55%
branch  1 taken 45%
        6:  811-block  2
        5:  811-block  3
        -:  812:      {
        6:  813:	desc = strcmp(argv[optind], "-") ? open(argv[optind], O_RDONLY) : 0;
        6:  813-block  0
branch  0 taken 100%
branch  1 taken 0%
        6:  813-block  1
    $$$$$:  813-block  2
        6:  814:	if (desc < 0)
        6:  814-block  0
branch  0 taken 83%
branch  1 taken 17%
        -:  815:	  {
        1:  816:	    if (!suppress_errors)
        1:  816-block  0
branch  0 taken 0%
branch  1 taken 100%
        1:  817:	      error(argv[optind], errno);
        1:  817-block  0
        1:  818:	  }
        1:  818-block  0
        -:  819:	else
        -:  820:	  {
        5:  821:	    filename = desc == 0 ? "(standard input)" : argv[optind];
        5:  821-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$:  821-block  1
        5:  821-block  2
        5:  822:	    count = grep(desc);
        5:  823:	    if (count_matches)
        5:  823-block  0
branch  0 taken 40%
branch  1 taken 60%
        -:  824:	      {
        2:  825:		if (out_file)
        2:  825-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:  826:		  printf("%s:", filename);
    $$$$$:  826-block  0
        2:  827:		printf("%d\n", count);
        2:  828:	      }
        2:  828-block  0
        5:  829:	    if (count)
        5:  829-block  0
branch  0 taken 40%
branch  1 taken 60%
        -:  830:	      {
        2:  831:		status = 0;
        2:  832:		if (list_files == 1)
        2:  832-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:  833:		  printf("%s\n", filename);
    $$$$$:  833-block  0
        2:  834:	      }
        2:  834-block  0
        3:  835:	    else if (list_files == -1)
        3:  835-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:  836:	      printf("%s\n", filename);
    $$$$$:  836-block  0
        -:  837:	  }
        6:  838:	if (desc != 0)
        6:  838-block  0
branch  0 taken 0%
branch  1 taken 100%
        6:  839:	  close(desc);
        6:  839-block  0
        6:  840:	++optind;
        -:  841:      }
        -:  842:  else
        -:  843:    {
    #####:  844:      filename = "(standard input)";
    #####:  845:      count = grep(0);
    #####:  846:      if (count_matches)
    $$$$$:  846-block  0
branch  0 never executed
branch  1 never executed
    #####:  847:	printf("%d\n", count);
    $$$$$:  847-block  0
    #####:  848:      if (count)
    $$$$$:  848-block  0
branch  0 never executed
branch  1 never executed
        -:  849:	{
    #####:  850:	  status = 0;
    #####:  851:	  if (list_files == 1)
    $$$$$:  851-block  0
branch  0 never executed
branch  1 never executed
    #####:  852:	    printf("(standard input)\n");
    $$$$$:  852-block  0
    #####:  853:	}
    $$$$$:  853-block  0
    #####:  854:      else if (list_files == -1)
    $$$$$:  854-block  0
branch  0 never executed
branch  1 never executed
    #####:  855:	printf("(standard input)\n");
    $$$$$:  855-block  0
        -:  856:    }
        -:  857:
        5:  858:  exit(errseen ? 2 : status);
        5:  858-block  0
branch  0 taken 20%
branch  1 taken 80%
        1:  858-block  1
        4:  858-block  2
        5:  858-block  3
        -:  859:}
        -:  860:/* Getopt for GNU.
        -:  861:   NOTE: getopt is now part of the C library, so if you don't know what
        -:  862:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
        -:  863:   before changing it!
        -:  864:
        -:  865:   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
        -:  866:   	Free Software Foundation, Inc.
        -:  867:
        -:  868:   This program is free software; you can redistribute it and/or modify it
        -:  869:   under the terms of the GNU General Public License as published by the
        -:  870:   Free Software Foundation; either version 2, or (at your option) any
        -:  871:   later version.
        -:  872:
        -:  873:   This program is distributed in the hope that it will be useful,
        -:  874:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:  875:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:  876:   GNU General Public License for more details.
        -:  877:
        -:  878:   You should have received a copy of the GNU General Public License
        -:  879:   along with this program; if not, write to the Free Software
        -:  880:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -:  881:
        -:  882:/* NOTE!!!  AIX requires this to be the first thing in the file.
        -:  883:   Do not put ANYTHING before it!  */
        -:  884:#if !defined (__GNUC__) && defined (_AIX)
        -:  885: #pragma alloca
        -:  886:#endif
        -:  887:
        -:  888:#ifdef HAVE_CONFIG_H
        -:  889:#include "config.h"
        -:  890:#define flag_config 1
        -:  891:#endif
        -:  892:
        -:  893:#if (defined( __GNUC__) && (!defined(LINUX)))
        -:  894:#define alloca __builtin_alloca
        -:  895:#else /* not __GNUC__ */
        -:  896:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
        -:  897:#include <alloca.h>
        -:  898:#define flag_alloca 1
        -:  899:#else
        -:  900:#ifndef _AIX
        -:  901:char *alloca ();
        -:  902:#endif
        -:  903:#endif /* alloca.h */
        -:  904:#endif /* not __GNUC__ */
        -:  905:
        -:  906:#if !__STDC__ && !defined(const) && IN_GCC
        -:  907:#define const
        -:  908:#endif
        -:  909:
        -:  910:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
        -:  911:#ifndef _NO_PROTO
        -:  912:#define _NO_PROTO
        -:  913:#endif
        -:  914:
        -:  915:/*#include <stdio.h> */
        -:  916:
        -:  917:/* Comment out all this code if we are using the GNU C Library, and are not
        -:  918:   actually compiling the library itself.  This code is part of the GNU C
        -:  919:   Library, but also included in many other GNU distributions.  Compiling
        -:  920:   and linking in this code is a waste when using the GNU C library
        -:  921:   (especially if it is a shared library).  Rather than having every GNU
        -:  922:   program understand `configure --with-gnu-libc' and omit the object files,
        -:  923:   it is simpler to just do this in the source for each such file.  */
        -:  924:
        -:  925:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
        -:  926:
        -:  927:
        -:  928:/* This needs to come after some library #include
        -:  929:   to get __GNU_LIBRARY__ defined.  */
        -:  930:#ifdef	__GNU_LIBRARY__
        -:  931:#undef	alloca
        -:  932:/* Don't include stdlib.h for non-GNU C libraries because some of them
        -:  933:   contain conflicting prototypes for getopt.  */
        -:  934:#if flag_stdlib==0   
        -:  935:#include <stdlib.h>
        -:  936:#define flag_stdlib 1
        -:  937:#endif
        -:  938:#else	/* Not GNU C library.  */
        -:  939:#define	__alloca	alloca
        -:  940:#endif	/* GNU C library.  */
        -:  941:
        -:  942:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
        -:  943:   long-named option.  Because this is not POSIX.2 compliant, it is
        -:  944:   being phased out.  */
        -:  945:/* #define GETOPT_COMPAT */
        -:  946:
        -:  947:/* This version of `getopt' appears to the caller like standard Unix `getopt'
        -:  948:   but it behaves differently for the user, since it allows the user
        -:  949:   to intersperse the options with the other arguments.
        -:  950:
        -:  951:   As `getopt' works, it permutes the elements of ARGV so that,
        -:  952:   when it is done, all the options precede everything else.  Thus
        -:  953:   all application programs are extended to handle flexible argument order.
        -:  954:
        -:  955:   Setting the environment variable POSIXLY_CORRECT disables permutation.
        -:  956:   Then the behavior is completely standard.
        -:  957:
        -:  958:   GNU application programs can use a third alternative mode in which
        -:  959:   they can distinguish the relative order of options and other arguments.  */
        -:  960:
        -:  961:#include "getopt.h"
        -:  962:
        -:  963:/* For communication from `getopt' to the caller.
        -:  964:   When `getopt' finds an option that takes an argument,
        -:  965:   the argument value is returned here.
        -:  966:   Also, when `ordering' is RETURN_IN_ORDER,
        -:  967:   each non-option ARGV-element is returned here.  */
        -:  968:
        -:  969:char *optarg = 0;
        -:  970:
        -:  971:/* Index in ARGV of the next element to be scanned.
        -:  972:   This is used for communication to and from the caller
        -:  973:   and for communication between successive calls to `getopt'.
        -:  974:
        -:  975:   On entry to `getopt', zero means this is the first call; initialize.
        -:  976:
        -:  977:   When `getopt' returns EOF, this is the index of the first of the
        -:  978:   non-option elements that the caller should itself scan.
        -:  979:
        -:  980:   Otherwise, `optind' communicates from one call to the next
        -:  981:   how much of ARGV has been scanned so far.  */
        -:  982:
        -:  983:/* XXX 1003.2 says this must be 1 before any call.  */
        -:  984:int optind = 0;
        -:  985:
        -:  986:/* The next char to be scanned in the option-element
        -:  987:   in which the last option character we returned was found.
        -:  988:   This allows us to pick up the scan where we left off.
        -:  989:
        -:  990:   If this is zero, or a null string, it means resume the scan
        -:  991:   by advancing to the next ARGV-element.  */
        -:  992:
        -:  993:static char *nextchar;
        -:  994:
        -:  995:/* Callers store zero here to inhibit the error message
        -:  996:   for unrecognized options.  */
        -:  997:
        -:  998:int opterr = 1;
        -:  999:
        -: 1000:/* Set to an option character which was unrecognized.
        -: 1001:   This must be initialized on some systems to avoid linking in the
        -: 1002:   system's own getopt implementation.  */
        -: 1003:
        -: 1004:int optopt = '?';
        -: 1005:
        -: 1006:/* Describe how to deal with options that follow non-option ARGV-elements.
        -: 1007:
        -: 1008:   If the caller did not specify anything,
        -: 1009:   the default is REQUIRE_ORDER if the environment variable
        -: 1010:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
        -: 1011:
        -: 1012:   REQUIRE_ORDER means don't recognize them as options;
        -: 1013:   stop option processing when the first non-option is seen.
        -: 1014:   This is what Unix does.
        -: 1015:   This mode of operation is selected by either setting the environment
        -: 1016:   variable POSIXLY_CORRECT, or using `+' as the first character
        -: 1017:   of the list of option characters.
        -: 1018:
        -: 1019:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
        -: 1020:   so that eventually all the non-options are at the end.  This allows options
        -: 1021:   to be given in any order, even with programs that were not written to
        -: 1022:   expect this.
        -: 1023:
        -: 1024:   RETURN_IN_ORDER is an option available to programs that were written
        -: 1025:   to expect options and other ARGV-elements in any order and that care about
        -: 1026:   the ordering of the two.  We describe each non-option ARGV-element
        -: 1027:   as if it were the argument of an option with character code 1.
        -: 1028:   Using `-' as the first character of the list of option characters
        -: 1029:   selects this mode of operation.
        -: 1030:
        -: 1031:   The special argument `--' forces an end of option-scanning regardless
        -: 1032:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
        -: 1033:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
        -: 1034:
        -: 1035:static enum
        -: 1036:{
        -: 1037:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
        -: 1038:} ordering;
        -: 1039:
        -: 1040:#ifdef	__GNU_LIBRARY__
        -: 1041:/* We want to avoid inclusion of string.h with non-GNU libraries
        -: 1042:   because there are many ways it can cause trouble.
        -: 1043:   On some systems, it contains special magic macros that don't work
        -: 1044:   in GCC.  */
        -: 1045:#if flag_string==0   
        -: 1046:#include <string.h>
        -: 1047:#define flag_string 1
        -: 1048:#endif
        -: 1049:#define	my_index	strchr
        -: 1050:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
        -: 1051:#else
        -: 1052:
        -: 1053:/* Avoid depending on library functions or files
        -: 1054:   whose names are inconsistent.  */
        -: 1055:
        -: 1056:char *getenv ();
        -: 1057:
        -: 1058:static char *
function my_index called 38 returned 100% blocks executed 100%
       38: 1059:my_index (str, chr)
        -: 1060:     const char *str;
        -: 1061:     int chr;
        -: 1062:{
      859: 1063:  while (*str)
       38: 1063-block  0
      859: 1063-block  1
branch  0 taken 99%
branch  1 taken 1%
      821: 1063-block  2
        -: 1064:    {
      858: 1065:      if (*str == chr)
      858: 1065-block  0
branch  0 taken 4%
branch  1 taken 96%
       37: 1066:	return (char *) str;
       37: 1066-block  0
      821: 1067:      str++;
        -: 1068:    }
        1: 1069:  return 0;
        1: 1069-block  0
       38: 1070:}
       38: 1070-block  0
        -: 1071:
        -: 1072:static void
function my_bcopy called 0 returned 0% blocks executed 0%
    #####: 1073:my_bcopy (from, to, size)
        -: 1074:     const char *from;
        -: 1075:     char *to;
        -: 1076:     int size;
        -: 1077:{
        -: 1078:  int i;
    #####: 1079:  for (i = 0; i < size; i++)
    $$$$$: 1079-block  0
    $$$$$: 1079-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1079-block  2
    #####: 1080:    to[i] = from[i];
    $$$$$: 1080-block  0
    #####: 1081:}
    $$$$$: 1081-block  0
        -: 1082:#endif				/* GNU C library.  */
        -: 1083:
        -: 1084:/* Handle permutation of arguments.  */
        -: 1085:
        -: 1086:/* Describe the part of ARGV that contains non-options that have
        -: 1087:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
        -: 1088:   `last_nonopt' is the index after the last of them.  */
        -: 1089:
        -: 1090:static int first_nonopt;
        -: 1091:static int last_nonopt;
        -: 1092:
        -: 1093:/* Exchange two adjacent subsequences of ARGV.
        -: 1094:   One subsequence is elements [first_nonopt,last_nonopt)
        -: 1095:   which contains all the non-options that have been skipped so far.
        -: 1096:   The other is elements [last_nonopt,optind), which contains all
        -: 1097:   the options processed since those non-options were skipped.
        -: 1098:
        -: 1099:   `first_nonopt' and `last_nonopt' are relocated so that they describe
        -: 1100:   the new indices of the non-options in ARGV after they are moved.  */
        -: 1101:
        -: 1102:static void
function exchange called 0 returned 0% blocks executed 0%
    #####: 1103:exchange (argv)
        -: 1104:     char **argv;
        -: 1105:{
    #####: 1106:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
    #####: 1107:  char **temp = (char **) __alloca (nonopts_size);
        -: 1108:
        -: 1109:  /* Interchange the two blocks of data in ARGV.  */
        -: 1110:
    #####: 1111:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
    #####: 1112:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
    #####: 1113:	    (optind - last_nonopt) * sizeof (char *));
    #####: 1114:  my_bcopy ((char *) temp,
    #####: 1115:	    (char *) &argv[first_nonopt + optind - last_nonopt],
    #####: 1116:	    nonopts_size);
        -: 1117:
        -: 1118:  /* Update records for the slots the non-options now occupy.  */
        -: 1119:
    #####: 1120:  first_nonopt += (optind - last_nonopt);
    #####: 1121:  last_nonopt = optind;
    #####: 1122:}
    $$$$$: 1122-block  0
        -: 1123:
        -: 1124:/* Scan elements of ARGV (whose length is ARGC) for option characters
        -: 1125:   given in OPTSTRING.
        -: 1126:
        -: 1127:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
        -: 1128:   then it is an option element.  The characters of this element
        -: 1129:   (aside from the initial '-') are option characters.  If `getopt'
        -: 1130:   is called repeatedly, it returns successively each of the option characters
        -: 1131:   from each of the option elements.
        -: 1132:
        -: 1133:   If `getopt' finds another option character, it returns that character,
        -: 1134:   updating `optind' and `nextchar' so that the next call to `getopt' can
        -: 1135:   resume the scan with the following option character or ARGV-element.
        -: 1136:
        -: 1137:   If there are no more option characters, `getopt' returns `EOF'.
        -: 1138:   Then `optind' is the index in ARGV of the first ARGV-element
        -: 1139:   that is not an option.  (The ARGV-elements have been permuted
        -: 1140:   so that those that are not options now come last.)
        -: 1141:
        -: 1142:   OPTSTRING is a string containing the legitimate option characters.
        -: 1143:   If an option character is seen that is not listed in OPTSTRING,
        -: 1144:   return '?' after printing an error message.  If you set `opterr' to
        -: 1145:   zero, the error message is suppressed but we still return '?'.
        -: 1146:
        -: 1147:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
        -: 1148:   so the following text in the same ARGV-element, or the text of the following
        -: 1149:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
        -: 1150:   wants an optional arg; if there is text in the current ARGV-element,
        -: 1151:   it is returned in `optarg', otherwise `optarg' is set to zero.
        -: 1152:
        -: 1153:   If OPTSTRING starts with `-' or `+', it requests different methods of
        -: 1154:   handling the non-option ARGV-elements.
        -: 1155:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
        -: 1156:
        -: 1157:   Long-named options begin with `--' instead of `-'.
        -: 1158:   Their names may be abbreviated as long as the abbreviation is unique
        -: 1159:   or is an exact match for some defined option.  If they have an
        -: 1160:   argument, it follows the option name in the same ARGV-element, separated
        -: 1161:   from the option name by a `=', or else the in next ARGV-element.
        -: 1162:   When `getopt' finds a long-named option, it returns 0 if that option's
        -: 1163:   `flag' field is nonzero, the value of the option's `val' field
        -: 1164:   if the `flag' field is zero.
        -: 1165:
        -: 1166:   The elements of ARGV aren't really const, because we permute them.
        -: 1167:   But we pretend they're const in the prototype to be compatible
        -: 1168:   with other systems.
        -: 1169:
        -: 1170:   LONGOPTS is a vector of `struct option' terminated by an
        -: 1171:   element containing a name which is zero.
        -: 1172:
        -: 1173:   LONGIND returns the index in LONGOPT of the long-named option found.
        -: 1174:   It is only valid when a long-named option has been found by the most
        -: 1175:   recent call.
        -: 1176:
        -: 1177:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
        -: 1178:   long-named options.  */
        -: 1179:
        -: 1180:int
function _getopt_internal called 43 returned 100% blocks executed 37%
       43: 1181:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
        -: 1182:     int argc;
        -: 1183:     char *const *argv;
        -: 1184:     const char *optstring;
        -: 1185:     const struct option *longopts;
        -: 1186:     int *longind;
        -: 1187:     int long_only;
        -: 1188:{
        -: 1189:  int option_index;
        -: 1190:
       43: 1191:  optarg = 0;
        -: 1192:
        -: 1193:  /* Initialize the internal data when the first call is made.
        -: 1194:     Start processing options with ARGV-element 1 (since ARGV-element 0
        -: 1195:     is the program name); the sequence of previously skipped
        -: 1196:     non-option ARGV-elements is empty.  */
        -: 1197:
       43: 1198:  if (optind == 0)
       43: 1198-block  0
branch  0 taken 86%
branch  1 taken 14%
        -: 1199:    {
        6: 1200:      first_nonopt = last_nonopt = optind = 1;
        -: 1201:
        6: 1202:      nextchar = NULL;
        -: 1203:
        -: 1204:      /* Determine how to handle the ordering of options and nonoptions.  */
        -: 1205:
        6: 1206:      if (optstring[0] == '-')
        6: 1206-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1207:	{
    #####: 1208:	  ordering = RETURN_IN_ORDER;
    #####: 1209:	  ++optstring;
    #####: 1210:	}
    $$$$$: 1210-block  0
        6: 1211:      else if (optstring[0] == '+')
        6: 1211-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1212:	{
    #####: 1213:	  ordering = REQUIRE_ORDER;
    #####: 1214:	  ++optstring;
    #####: 1215:	}
    $$$$$: 1215-block  0
        6: 1216:      else if (getenv ("POSIXLY_CORRECT") != NULL)
        6: 1216-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 1217:	ordering = REQUIRE_ORDER;
    $$$$$: 1217-block  0
        -: 1218:      else
        6: 1219:	ordering = PERMUTE;
        6: 1219-block  0
        6: 1220:    }
        6: 1220-block  0
        -: 1221:
       43: 1222:  if (nextchar == NULL || *nextchar == '\0')
       43: 1222-block  0
branch  0 taken 56%
branch  1 taken 44%
       24: 1222-block  1
branch  2 taken 50%
branch  3 taken 50%
        -: 1223:    {
       31: 1224:      if (ordering == PERMUTE)
       31: 1224-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1225:	{
        -: 1226:	  /* If we have just processed some options following some non-options,
        -: 1227:	     exchange them so that the options come first.  */
        -: 1228:
       31: 1229:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
       31: 1229-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 1229-block  1
branch  2 never executed
branch  3 never executed
    #####: 1230:	    exchange ((char **) argv);
    $$$$$: 1230-block  0
       31: 1231:	  else if (last_nonopt != optind)
       31: 1231-block  0
branch  0 taken 19%
branch  1 taken 81%
       25: 1232:	    first_nonopt = optind;
       25: 1232-block  0
        -: 1233:
        -: 1234:	  /* Now skip any additional non-options
        -: 1235:	     and extend the range of non-options previously skipped.  */
        -: 1236:
       72: 1237:	  while (optind < argc
       31: 1237-block  0
       41: 1237-block  1
branch  0 taken 24%
branch  1 taken 76%
       10: 1237-block  2
       41: 1238:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
       41: 1238-block  0
branch  0 taken 12%
branch  1 taken 88%
       36: 1238-block  1
branch  2 taken 28%
branch  3 taken 72%
       26: 1238-block  2
        -: 1239:#ifdef GETOPT_COMPAT
        -: 1240:		 && (longopts == NULL
        -: 1241:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
        -: 1242:#endif				/* GETOPT_COMPAT */
        -: 1243:		 )
       10: 1244:	    optind++;
       31: 1245:	  last_nonopt = optind;
       31: 1246:	}
       31: 1246-block  0
        -: 1247:
        -: 1248:      /* Special ARGV-element `--' means premature end of options.
        -: 1249:	 Skip it like a null option,
        -: 1250:	 then exchange with previous non-options as if it were an option,
        -: 1251:	 then skip everything else like a non-option.  */
        -: 1252:
       31: 1253:      if (optind != argc && !strcmp (argv[optind], "--"))
       31: 1253-block  0
branch  0 taken 84%
branch  1 taken 16%
       26: 1253-block  1
branch  2 taken 100%
branch  3 taken 0%
        -: 1254:	{
    #####: 1255:	  optind++;
        -: 1256:
    #####: 1257:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
    $$$$$: 1257-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1257-block  1
branch  2 never executed
branch  3 never executed
    #####: 1258:	    exchange ((char **) argv);
    $$$$$: 1258-block  0
    #####: 1259:	  else if (first_nonopt == last_nonopt)
    $$$$$: 1259-block  0
branch  0 never executed
branch  1 never executed
    #####: 1260:	    first_nonopt = optind;
    $$$$$: 1260-block  0
    #####: 1261:	  last_nonopt = argc;
        -: 1262:
    #####: 1263:	  optind = argc;
    #####: 1264:	}
    $$$$$: 1264-block  0
        -: 1265:
        -: 1266:      /* If we have done all the ARGV-elements, stop the scan
        -: 1267:	 and back over any non-options that we skipped and permuted.  */
        -: 1268:
       31: 1269:      if (optind == argc)
       31: 1269-block  0
branch  0 taken 16%
branch  1 taken 84%
        -: 1270:	{
        -: 1271:	  /* Set the next-arg-index to point at the non-options
        -: 1272:	     that we previously skipped, so the caller will digest them.  */
        5: 1273:	  if (first_nonopt != last_nonopt)
        5: 1273-block  0
branch  0 taken 0%
branch  1 taken 100%
        5: 1274:	    optind = first_nonopt;
        5: 1274-block  0
        5: 1275:	  return EOF;
        5: 1275-block  0
        -: 1276:	}
        -: 1277:
        -: 1278:      /* If we have come to a non-option and did not permute it,
        -: 1279:	 either stop the scan or describe it to the caller and pass it by.  */
        -: 1280:
       26: 1281:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
       26: 1281-block  0
branch  0 taken 100%
branch  1 taken 0%
       26: 1281-block  1
branch  2 taken 0%
branch  3 taken 100%
        -: 1282:#ifdef GETOPT_COMPAT
        -: 1283:	  && (longopts == NULL
        -: 1284:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
        -: 1285:#endif				/* GETOPT_COMPAT */
        -: 1286:	  )
        -: 1287:	{
    #####: 1288:	  if (ordering == REQUIRE_ORDER)
    $$$$$: 1288-block  0
branch  0 never executed
branch  1 never executed
    #####: 1289:	    return EOF;
    $$$$$: 1289-block  0
    #####: 1290:	  optarg = argv[optind++];
    #####: 1291:	  return 1;
    $$$$$: 1291-block  0
        -: 1292:	}
        -: 1293:
        -: 1294:      /* We have found another option-ARGV-element.
        -: 1295:	 Start decoding its characters.  */
        -: 1296:
       26: 1297:      nextchar = (argv[optind] + 1
       26: 1298:		  + (longopts != NULL && argv[optind][1] == '-'));
       26: 1298-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 1298-block  1
       26: 1299:    }
       26: 1299-block  0
        -: 1300:
       38: 1301:  if (longopts != NULL
    $$$$$: 1301-block  0
branch  0 never executed
branch  1 never executed
       38: 1302:      && ((argv[optind][0] == '-'
       38: 1302-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 1303:	   && (argv[optind][1] == '-' || long_only))
    $$$$$: 1303-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1303-block  1
branch  2 never executed
branch  3 never executed
        -: 1304:#ifdef GETOPT_COMPAT
        -: 1305:	  || argv[optind][0] == '+'
        -: 1306:#endif				/* GETOPT_COMPAT */
        -: 1307:	  ))
        -: 1308:    {
        -: 1309:      const struct option *p;
    #####: 1310:      char *s = nextchar;
    #####: 1311:      int exact = 0;
    #####: 1312:      int ambig = 0;
    #####: 1313:      const struct option *pfound = NULL;
        -: 1314:      int indfound;
        -: 1315:
    #####: 1316:      while (*s && *s != '=')
    $$$$$: 1316-block  0
    $$$$$: 1316-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1316-block  2
    $$$$$: 1316-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 1316-block  4
    #####: 1317:	s++;
        -: 1318:
        -: 1319:      /* Test all options for either exact match or abbreviated matches.  */
    #####: 1320:      for (p = longopts, option_index = 0; p->name;
    $$$$$: 1320-block  0
    $$$$$: 1320-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1320-block  2
    #####: 1321:	   p++, option_index++)
    #####: 1322:	if (!strncmp (p->name, nextchar, s - nextchar))
    $$$$$: 1322-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1322-block  1
        -: 1323:	  {
    #####: 1324:	    if (s - nextchar == strlen (p->name))
    $$$$$: 1324-block  0
branch  0 never executed
branch  1 never executed
        -: 1325:	      {
        -: 1326:		/* Exact match found.  */
    #####: 1327:		pfound = p;
    #####: 1328:		indfound = option_index;
    #####: 1329:		exact = 1;
    #####: 1330:		break;
    $$$$$: 1330-block  0
        -: 1331:	      }
    #####: 1332:	    else if (pfound == NULL)
    $$$$$: 1332-block  0
branch  0 never executed
branch  1 never executed
        -: 1333:	      {
        -: 1334:		/* First nonexact match found.  */
    #####: 1335:		pfound = p;
    #####: 1336:		indfound = option_index;
    #####: 1337:	      }
    $$$$$: 1337-block  0
        -: 1338:	    else
        -: 1339:	      /* Second nonexact match found.  */
    #####: 1340:	      ambig = 1;
    $$$$$: 1340-block  0
    #####: 1341:	  }
    $$$$$: 1341-block  0
        -: 1342:
    #####: 1343:      if (ambig && !exact)
    $$$$$: 1343-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1343-block  1
branch  2 never executed
branch  3 never executed
        -: 1344:	{
    #####: 1345:	  if (opterr)
    $$$$$: 1345-block  0
branch  0 never executed
branch  1 never executed
    #####: 1346:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
    $$$$$: 1346-block  0
    $$$$$: 1346-block  1
    #####: 1347:		     argv[0], argv[optind]);
    #####: 1348:	  nextchar += strlen (nextchar);
    #####: 1349:	  optind++;
    #####: 1350:	  return '?';
    $$$$$: 1350-block  0
        -: 1351:	}
        -: 1352:
    #####: 1353:      if (pfound != NULL)
    $$$$$: 1353-block  0
branch  0 never executed
branch  1 never executed
        -: 1354:	{
    #####: 1355:	  option_index = indfound;
    #####: 1356:	  optind++;
    #####: 1357:	  if (*s)
    $$$$$: 1357-block  0
branch  0 never executed
branch  1 never executed
        -: 1358:	    {
        -: 1359:	      /* Don't test has_arg with >, because some C compilers don't
        -: 1360:		 allow it to be used on enums.  */
    #####: 1361:	      if (pfound->has_arg)
    $$$$$: 1361-block  0
branch  0 never executed
branch  1 never executed
    #####: 1362:		optarg = s + 1;
    $$$$$: 1362-block  0
        -: 1363:	      else
        -: 1364:		{
    #####: 1365:		  if (opterr)
    $$$$$: 1365-block  0
branch  0 never executed
branch  1 never executed
        -: 1366:		    {
    #####: 1367:		      if (argv[optind - 1][1] == '-')
    $$$$$: 1367-block  0
branch  0 never executed
branch  1 never executed
        -: 1368:			/* --option */
    #####: 1369:			fprintf (stderr,
    $$$$$: 1369-block  0
    $$$$$: 1369-block  1
        -: 1370:				 "%s: option `--%s' doesn't allow an argument\n",
    #####: 1371:				 argv[0], pfound->name);
        -: 1372:		      else
        -: 1373:			/* +option or -option */
    #####: 1374:			fprintf (stderr,
    $$$$$: 1374-block  0
    $$$$$: 1374-block  1
        -: 1375:			     "%s: option `%c%s' doesn't allow an argument\n",
    #####: 1376:			     argv[0], argv[optind - 1][0], pfound->name);
    #####: 1377:		    }
    $$$$$: 1377-block  0
    #####: 1378:		  nextchar += strlen (nextchar);
    #####: 1379:		  return '?';
    $$$$$: 1379-block  0
        -: 1380:		}
    #####: 1381:	    }
    $$$$$: 1381-block  0
    #####: 1382:	  else if (pfound->has_arg == 1)
    $$$$$: 1382-block  0
branch  0 never executed
branch  1 never executed
        -: 1383:	    {
    #####: 1384:	      if (optind < argc)
    $$$$$: 1384-block  0
branch  0 never executed
branch  1 never executed
    #####: 1385:		optarg = argv[optind++];
    $$$$$: 1385-block  0
        -: 1386:	      else
        -: 1387:		{
    #####: 1388:		  if (opterr)
    $$$$$: 1388-block  0
branch  0 never executed
branch  1 never executed
    #####: 1389:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
    $$$$$: 1389-block  0
    $$$$$: 1389-block  1
    #####: 1390:			     argv[0], argv[optind - 1]);
    #####: 1391:		  nextchar += strlen (nextchar);
    #####: 1392:		  return optstring[0] == ':' ? ':' : '?';
    $$$$$: 1392-block  0
        -: 1393:		}
    #####: 1394:	    }
    $$$$$: 1394-block  0
    #####: 1395:	  nextchar += strlen (nextchar);
    #####: 1396:	  if (longind != NULL)
    $$$$$: 1396-block  0
branch  0 never executed
branch  1 never executed
    #####: 1397:	    *longind = option_index;
    $$$$$: 1397-block  0
    #####: 1398:	  if (pfound->flag)
    $$$$$: 1398-block  0
branch  0 never executed
branch  1 never executed
        -: 1399:	    {
    #####: 1400:	      *(pfound->flag) = pfound->val;
    #####: 1401:	      return 0;
    $$$$$: 1401-block  0
        -: 1402:	    }
    #####: 1403:	  return pfound->val;
    $$$$$: 1403-block  0
        -: 1404:	}
        -: 1405:      /* Can't find it as a long option.  If this is not getopt_long_only,
        -: 1406:	 or the option starts with '--' or is not a valid short
        -: 1407:	 option, then it's an error.
        -: 1408:	 Otherwise interpret it as a short option.  */
    #####: 1409:      if (!long_only || argv[optind][1] == '-'
    $$$$$: 1409-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1409-block  1
branch  2 never executed
branch  3 never executed
        -: 1410:#ifdef GETOPT_COMPAT
        -: 1411:	  || argv[optind][0] == '+'
        -: 1412:#endif				/* GETOPT_COMPAT */
    #####: 1413:	  || my_index (optstring, *nextchar) == NULL)
    $$$$$: 1413-block  0
branch  0 never executed
branch  1 never executed
        -: 1414:	{
    #####: 1415:	  if (opterr)
    $$$$$: 1415-block  0
branch  0 never executed
branch  1 never executed
        -: 1416:	    {
    #####: 1417:	      if (argv[optind][1] == '-')
    $$$$$: 1417-block  0
branch  0 never executed
branch  1 never executed
        -: 1418:		/* --option */
    #####: 1419:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
    $$$$$: 1419-block  0
    $$$$$: 1419-block  1
    #####: 1420:			 argv[0], nextchar);
        -: 1421:	      else
        -: 1422:		/* +option or -option */
    #####: 1423:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
    $$$$$: 1423-block  0
    $$$$$: 1423-block  1
    #####: 1424:			 argv[0], argv[optind][0], nextchar);
    #####: 1425:	    }
    $$$$$: 1425-block  0
    #####: 1426:	  nextchar = (char *) "";
    #####: 1427:	  optind++;
    #####: 1428:	  return '?';
    $$$$$: 1428-block  0
        -: 1429:	}
    #####: 1430:    }
    $$$$$: 1430-block  0
        -: 1431:
        -: 1432:  /* Look at and handle the next option-character.  */
        -: 1433:
        -: 1434:  {
       38: 1435:    char c = *nextchar++;
       38: 1436:    char *temp = my_index (optstring, c);
        -: 1437:
        -: 1438:    /* Increment `optind' when we start to process its last character.  */
       38: 1439:    if (*nextchar == '\0')
       38: 1439-block  0
branch  0 taken 34%
branch  1 taken 66%
       25: 1440:      ++optind;
       25: 1440-block  0
        -: 1441:
       38: 1442:    if (temp == NULL || c == ':')
       38: 1442-block  0
branch  0 taken 97%
branch  1 taken 3%
       37: 1442-block  1
branch  2 taken 0%
branch  3 taken 100%
        -: 1443:      {
        1: 1444:	if (opterr)
        1: 1444-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 1445:	  {
        -: 1446:#if 0
        -: 1447:	    if (c < 040 || c >= 0177)
        -: 1448:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
        -: 1449:		       argv[0], c);
        -: 1450:	    else
        -: 1451:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
        -: 1452:#else
        -: 1453:	    /* 1003.2 specifies the format of this message.  */
        1: 1454:	    fprintf (stderr, "%s: illegal option -- %c\n", argv[0], c);
        -: 1455:#endif
        1: 1456:	  }
        1: 1456-block  0
        1: 1457:	optopt = c;
        1: 1458:	return '?';
        1: 1458-block  0
        -: 1459:      }
       37: 1460:    if (temp[1] == ':')
       37: 1460-block  0
branch  0 taken 65%
branch  1 taken 35%
        -: 1461:      {
       13: 1462:	if (temp[2] == ':')
       13: 1462-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1463:	  {
        -: 1464:	    /* This is an option that accepts an argument optionally.  */
    #####: 1465:	    if (*nextchar != '\0')
    $$$$$: 1465-block  0
branch  0 never executed
branch  1 never executed
        -: 1466:	      {
    #####: 1467:		optarg = nextchar;
    #####: 1468:		optind++;
    #####: 1469:	      }
    $$$$$: 1469-block  0
        -: 1470:	    else
    #####: 1471:	      optarg = 0;
    $$$$$: 1471-block  0
    #####: 1472:	    nextchar = NULL;
    #####: 1473:	  }
    $$$$$: 1473-block  0
        -: 1474:	else
        -: 1475:	  {
        -: 1476:	    /* This is an option that requires an argument.  */
       13: 1477:	    if (*nextchar != '\0')
       13: 1477-block  0
branch  0 taken 8%
branch  1 taken 92%
        -: 1478:	      {
        1: 1479:		optarg = nextchar;
        -: 1480:		/* If we end this ARGV-element by taking the rest as an arg,
        -: 1481:		   we must advance to the next element now.  */
        1: 1482:		optind++;
        1: 1483:	      }
        1: 1483-block  0
       12: 1484:	    else if (optind == argc)
       12: 1484-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 1485:	      {
    #####: 1486:		if (opterr)
    $$$$$: 1486-block  0
branch  0 never executed
branch  1 never executed
        -: 1487:		  {
        -: 1488:#if 0
        -: 1489:		    fprintf (stderr, "%s: option `-%c' requires an argument\n",
        -: 1490:			     argv[0], c);
        -: 1491:#else
        -: 1492:		    /* 1003.2 specifies the format of this message.  */
    #####: 1493:		    fprintf (stderr, "%s: option requires an argument -- %c\n",
    #####: 1494:			     argv[0], c);
        -: 1495:#endif
    #####: 1496:		  }
    $$$$$: 1496-block  0
    #####: 1497:		optopt = c;
    #####: 1498:		if (optstring[0] == ':')
    $$$$$: 1498-block  0
branch  0 never executed
branch  1 never executed
    #####: 1499:		  c = ':';
    $$$$$: 1499-block  0
        -: 1500:		else
    #####: 1501:		  c = '?';
    $$$$$: 1501-block  0
    #####: 1502:	      }
    $$$$$: 1502-block  0
        -: 1503:	    else
        -: 1504:	      /* We already incremented `optind' once;
        -: 1505:		 increment it again when taking next ARGV-elt as argument.  */
       12: 1506:	      optarg = argv[optind++];
       12: 1506-block  0
       13: 1507:	    nextchar = NULL;
       13: 1507-block  0
        -: 1508:	  }
       13: 1509:      }
       13: 1509-block  0
       37: 1510:    return c;
       37: 1510-block  0
        -: 1511:  }
       43: 1512:}
       43: 1512-block  0
        -: 1513:
        -: 1514:int
function _getopt called 43 returned 100% blocks executed 100%
       43: 1515:getopt (argc, argv, optstring)
        -: 1516:     int argc;
        -: 1517:     char *const *argv;
        -: 1518:     const char *optstring;
        -: 1519:{
       43: 1520:  return _getopt_internal (argc, argv, optstring,
       43: 1520-block  0
        -: 1521:			   (const struct option *) 0,
        -: 1522:			   (int *) 0,
        -: 1523:			   0);
        -: 1524:}
        -: 1525:
        -: 1526:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
        -: 1527:
        -: 1528:#ifdef TEST
        -: 1529:
        -: 1530:/* Compile with -DTEST to make an executable for use in testing
        -: 1531:   the above definition of `getopt'.  */
        -: 1532:
        -: 1533:int
        -: 1534:main (argc, argv)
        -: 1535:     int argc;
        -: 1536:     char **argv;
        -: 1537:{
        -: 1538:  int c;
        -: 1539:  int digit_optind = 0;
        -: 1540:
        -: 1541:  while (1)
        -: 1542:    {
        -: 1543:      int this_option_optind = optind ? optind : 1;
        -: 1544:
        -: 1545:      c = getopt (argc, argv, "abc:d:0123456789");
        -: 1546:      if (c == EOF)
        -: 1547:	break;
        -: 1548:
        -: 1549:      switch (c)
        -: 1550:	{
        -: 1551:	case '0':
        -: 1552:	case '1':
        -: 1553:	case '2':
        -: 1554:	case '3':
        -: 1555:	case '4':
        -: 1556:	case '5':
        -: 1557:	case '6':
        -: 1558:	case '7':
        -: 1559:	case '8':
        -: 1560:	case '9':
        -: 1561:	  if (digit_optind != 0 && digit_optind != this_option_optind)
        -: 1562:	    printf ("digits occur in two different argv-elements.\n");
        -: 1563:	  digit_optind = this_option_optind;
        -: 1564:	  printf ("option %c\n", c);
        -: 1565:	  break;
        -: 1566:
        -: 1567:	case 'a':
        -: 1568:	  printf ("option a\n");
        -: 1569:	  break;
        -: 1570:
        -: 1571:	case 'b':
        -: 1572:	  printf ("option b\n");
        -: 1573:	  break;
        -: 1574:
        -: 1575:	case 'c':
        -: 1576:	  printf ("option c with value `%s'\n", optarg);
        -: 1577:	  break;
        -: 1578:
        -: 1579:	case '?':
        -: 1580:	  break;
        -: 1581:
        -: 1582:	default:
        -: 1583:	  printf ("?? getopt returned character code 0%o ??\n", c);
        -: 1584:	}
        -: 1585:    }
        -: 1586:
        -: 1587:  if (optind < argc)
        -: 1588:    {
        -: 1589:      printf ("non-option ARGV-elements: ");
        -: 1590:      while (optind < argc)
        -: 1591:	printf ("%s ", argv[optind++]);
        -: 1592:      printf ("\n");
        -: 1593:    }
        -: 1594:
        -: 1595:  exit (0);
        -: 1596:}
        -: 1597:
        -: 1598:#endif /* TEST */
        -: 1599:/* Extended regular expression matching and search library,
        -: 1600:   version 0.12.
        -: 1601:   (Implements POSIX draft P10003.2/D11.2, except for
        -: 1602:   internationalization features.)
        -: 1603:
        -: 1604:   Copyright (C) 1993 Free Software Foundation, Inc.
        -: 1605:
        -: 1606:   This program is free software; you can redistribute it and/or modify
        -: 1607:   it under the terms of the GNU General Public License as published by
        -: 1608:   the Free Software Foundation; either version 2, or (at your option)
        -: 1609:   any later version.
        -: 1610:
        -: 1611:   This program is distributed in the hope that it will be useful,
        -: 1612:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 1613:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 1614:   GNU General Public License for more details.
        -: 1615:
        -: 1616:   You should have received a copy of the GNU General Public License
        -: 1617:   along with this program; if not, write to the Free Software
        -: 1618:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 1619:
        -: 1620:/* AIX requires this to be the first thing in the file. */
        -: 1621:#if defined (_AIX) && !defined (REGEX_MALLOC)
        -: 1622:  #pragma alloca
        -: 1623:#endif
        -: 1624:
        -: 1625:#define _GNU_SOURCE
        -: 1626:
        -: 1627:/* We need this for `regex.h', and perhaps for the Emacs include files.  */
        -: 1628:#if flag_systypes==0
        -: 1629:#include <sys/types.h>
        -: 1630:#define flag_systypes 1
        -: 1631:#endif
        -: 1632:
        -: 1633:#ifdef HAVE_CONFIG_H
        -: 1634:#if flag_config==0
        -: 1635:#include "config.h"
        -: 1636:#define flag_config 1
        -: 1637:#endif
        -: 1638:#endif
        -: 1639:
        -: 1640:/* The `emacs' switch turns on certain matching commands
        -: 1641:   that make sense only in Emacs. */
        -: 1642:#ifdef emacs
        -: 1643:
        -: 1644:#include "lisp.h"
        -: 1645:#include "buffer.h"
        -: 1646:#include "syntax.h"
        -: 1647:
        -: 1648:/* Emacs uses `NULL' as a predicate.  */
        -: 1649:#undef NULL
        -: 1650:
        -: 1651:#else  /* not emacs */
        -: 1652:
        -: 1653:/* We used to test for `BSTRING' here, but only GCC and Emacs define
        -: 1654:   `BSTRING', as far as I know, and neither of them use this code.  */
        -: 1655:#if HAVE_STRING_H || STDC_HEADERS
        -: 1656:#if flag_string==0
        -: 1657:#include <string.h>
        -: 1658:#define flag_string 1
        -: 1659:#endif
        -: 1660:#ifndef bcmp
        -: 1661:#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))
        -: 1662:#endif
        -: 1663:#ifndef bcopy
        -: 1664:#define bcopy(s, d, n)	memcpy ((d), (s), (n))
        -: 1665:#endif
        -: 1666:#ifndef bzero
        -: 1667:#define bzero(s, n)	memset ((s), 0, (n))
        -: 1668:#endif
        -: 1669:#else
        -: 1670:#if flag_strings==0
        -: 1671:#include <strings.h>
        -: 1672:#define flag_strings 1
        -: 1673:#endif
        -: 1674:#endif
        -: 1675:
        -: 1676:#ifdef STDC_HEADERS
        -: 1677:#if flag_stdlib==0 
        -: 1678:#include <stdlib.h>
        -: 1679:#define flag_stdlib 1
        -: 1680:#endif
        -: 1681:#else
        -: 1682:char *malloc ();
        -: 1683:char *realloc ();
        -: 1684:#endif
        -: 1685:
        -: 1686:
        -: 1687:/* Define the syntax stuff for \<, \>, etc.  */
        -: 1688:
        -: 1689:/* This must be nonzero for the wordchar and notwordchar pattern
        -: 1690:   commands in re_match_2.  */
        -: 1691:#ifndef Sword 
        -: 1692:#define Sword 1
        -: 1693:#endif
        -: 1694:
        -: 1695:#ifdef SYNTAX_TABLE
        -: 1696:
        -: 1697:extern char *re_syntax_table;
        -: 1698:
        -: 1699:#else /* not SYNTAX_TABLE */
        -: 1700:
        -: 1701:/* How many characters in the character set.  */
        -: 1702:#define CHAR_SET_SIZE 256
        -: 1703:
        -: 1704:static char re_syntax_table[CHAR_SET_SIZE];
        -: 1705:
        -: 1706:static void
function init_syntax_once called 3 returned 100% blocks executed 93%
        3: 1707:init_syntax_once ()
        -: 1708:{
        -: 1709:   register int c;
        -: 1710:   static int done = 0;
        -: 1711:
        3: 1712:   if (done)
        3: 1712-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 1713:     return;
    $$$$$: 1713-block  0
        -: 1714:
        3: 1715:   bzero (re_syntax_table, sizeof re_syntax_table);
        -: 1716:
       81: 1717:   for (c = 'a'; c <= 'z'; c++)
        3: 1717-block  0
       81: 1717-block  1
branch  0 taken 96%
branch  1 taken 4%
       78: 1717-block  2
       78: 1718:     re_syntax_table[c] = Sword;
       78: 1718-block  0
        -: 1719:
       81: 1720:   for (c = 'A'; c <= 'Z'; c++)
        3: 1720-block  0
       81: 1720-block  1
branch  0 taken 96%
branch  1 taken 4%
       78: 1720-block  2
       78: 1721:     re_syntax_table[c] = Sword;
       78: 1721-block  0
        -: 1722:
       33: 1723:   for (c = '0'; c <= '9'; c++)
        3: 1723-block  0
       33: 1723-block  1
branch  0 taken 91%
branch  1 taken 9%
       30: 1723-block  2
       30: 1724:     re_syntax_table[c] = Sword;
       30: 1724-block  0
        -: 1725:
        3: 1726:   re_syntax_table['_'] = Sword;
        -: 1727:
        3: 1728:   done = 1;
        3: 1729:}
        3: 1729-block  0
        3: 1729-block  1
        -: 1730:
        -: 1731:#endif /* not SYNTAX_TABLE */
        -: 1732:
        -: 1733:#define SYNTAX(c) re_syntax_table[c]
        -: 1734:
        -: 1735:#endif /* not emacs */
        -: 1736:
        -: 1737:/* Get the interface, including the syntax bits.  */
        -: 1738:#include "regex.h"
        -: 1739:
        -: 1740:/* isalpha etc. are used for the character classes.  */
        -: 1741:#include <ctype.h>
        -: 1742:
        -: 1743:/* Jim Meyering writes:
        -: 1744:
        -: 1745:   "... Some ctype macros are valid only for character codes that
        -: 1746:   isascii says are ASCII (SGI's IRIX-4.0.5 is one such system --when
        -: 1747:   using /bin/cc or gcc but without giving an ansi option).  So, all
        -: 1748:   ctype uses should be through macros like ISPRINT...  If
        -: 1749:   STDC_HEADERS is defined, then autoconf has verified that the ctype
        -: 1750:   macros don't need to be guarded with references to isascii. ...
        -: 1751:   Defining isascii to 1 should let any compiler worth its salt
        -: 1752:   eliminate the && through constant folding."  */
        -: 1753:#if ! defined (isascii) || defined (STDC_HEADERS)
        -: 1754:#undef isascii
        -: 1755:#define isascii(c) 1
        -: 1756:#endif
        -: 1757:
        -: 1758:#ifdef isblank
        -: 1759:#define ISBLANK(c) (isascii (c) && isblank (c))
        -: 1760:#else
        -: 1761:#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
        -: 1762:#endif
        -: 1763:#ifdef isgraph
        -: 1764:#define ISGRAPH(c) (isascii (c) && isgraph (c))
        -: 1765:#else
        -: 1766:#define ISGRAPH(c) (isascii (c) && isprint (c) && !isspace (c))
        -: 1767:#endif
        -: 1768:
        -: 1769:#define ISPRINT(c) (isascii (c) && isprint (c))
        -: 1770:#define ISDIGIT(c) (isascii (c) && isdigit (c))
        -: 1771:#define ISALNUM(c) (isascii (c) && isalnum (c))
        -: 1772:#define ISALPHA(c) (isascii (c) && isalpha (c))
        -: 1773:#define ISCNTRL(c) (isascii (c) && iscntrl (c))
        -: 1774:#define ISLOWER(c) (isascii (c) && islower (c))
        -: 1775:#define ISPUNCT(c) (isascii (c) && ispunct (c))
        -: 1776:#define ISSPACE(c) (isascii (c) && isspace (c))
        -: 1777:#define ISUPPER(c) (isascii (c) && isupper (c))
        -: 1778:#define ISXDIGIT(c) (isascii (c) && isxdigit (c))
        -: 1779:
        -: 1780:#ifndef NULL
        -: 1781:#define NULL 0
        -: 1782:#endif
        -: 1783:
        -: 1784:/* We remove any previous definition of `SIGN_EXTEND_CHAR',
        -: 1785:   since ours (we hope) works properly with all combinations of
        -: 1786:   machines, compilers, `char' and `unsigned char' argument types.
        -: 1787:   (Per Bothner suggested the basic approach.)  */
        -: 1788:#undef SIGN_EXTEND_CHAR
        -: 1789:#if __STDC__
        -: 1790:#define SIGN_EXTEND_CHAR(c) ((signed char) (c))
        -: 1791:#else  /* not __STDC__ */
        -: 1792:/* As in Harbison and Steele.  */
        -: 1793:#define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
        -: 1794:#endif
        -: 1795:
        -: 1796:/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we
        -: 1797:   use `alloca' instead of `malloc'.  This is because using malloc in
        -: 1798:   re_search* or re_match* could cause memory leaks when C-g is used in
        -: 1799:   Emacs; also, malloc is slower and causes storage fragmentation.  On
        -: 1800:   the other hand, malloc is more portable, and easier to debug.  
        -: 1801:   
        -: 1802:   Because we sometimes use alloca, some routines have to be macros,
        -: 1803:   not functions -- `alloca'-allocated space disappears at the end of the
        -: 1804:   function it is called in.  */
        -: 1805:
        -: 1806:#ifdef REGEX_MALLOC
        -: 1807:
        -: 1808:#define REGEX_ALLOCATE malloc
        -: 1809:#define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
        -: 1810:
        -: 1811:#else /* not REGEX_MALLOC  */
        -: 1812:
        -: 1813:/* Emacs already defines alloca, sometimes.  */
        -: 1814:#ifndef alloca
        -: 1815:
        -: 1816:/* Make alloca work the best possible way.  */
        -: 1817:#ifdef __GNUC__
        -: 1818:#define alloca __builtin_alloca
        -: 1819:#else /* not __GNUC__ */
        -: 1820:#if HAVE_ALLOCA_H
        -: 1821:#if flag_alloca==0
        -: 1822:#include <alloca.h>
        -: 1823:#define flag_alloca 1
        -: 1824:#endif 
        -: 1825:#else /* not __GNUC__ or HAVE_ALLOCA_H */
        -: 1826:#ifndef _AIX /* Already did AIX, up at the top.  */
        -: 1827:char *alloca ();
        -: 1828:#endif /* not _AIX */
        -: 1829:#endif /* not HAVE_ALLOCA_H */ 
        -: 1830:#endif /* not __GNUC__ */
        -: 1831:
        -: 1832:#endif /* not alloca */
        -: 1833:
        -: 1834:#define REGEX_ALLOCATE alloca
        -: 1835:
        -: 1836:/* Assumes a `char *destination' variable.  */
        -: 1837:#define REGEX_REALLOCATE(source, osize, nsize)				\
        -: 1838:  (destination = (char *) alloca (nsize),				\
        -: 1839:   bcopy (source, destination, osize),					\
        -: 1840:   destination)
        -: 1841:
        -: 1842:#endif /* not REGEX_MALLOC */
        -: 1843:
        -: 1844:
        -: 1845:/* True if `size1' is non-NULL and PTR is pointing anywhere inside
        -: 1846:   `string1' or just past its end.  This works if PTR is NULL, which is
        -: 1847:   a good thing.  */
        -: 1848:#define FIRST_STRING_P(ptr) 					\
        -: 1849:  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
        -: 1850:
        -: 1851:/* (Re)Allocate N items of type T using malloc, or fail.  */
        -: 1852:#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
        -: 1853:#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
        -: 1854:#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
        -: 1855:
        -: 1856:#define BYTEWIDTH 8 /* In bits.  */
        -: 1857:
        -: 1858:#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
        -: 1859:
        -: 1860:#undef MAX               /****** added later *******/
        -: 1861:#define MAX(a, b) ((a) > (b) ? (a) : (b))
        -: 1862:#define MIN(a, b) ((a) < (b) ? (a) : (b))
        -: 1863:
        -: 1864:typedef char boolean;
        -: 1865:#define false 0
        -: 1866:#define true 1
        -: 1867:
        -: 1868:/* These are the command codes that appear in compiled regular
        -: 1869:   expressions.  Some opcodes are followed by argument bytes.  A
        -: 1870:   command code can specify any interpretation whatsoever for its
        -: 1871:   arguments.  Zero bytes may appear in the compiled regular expression.
        -: 1872:
        -: 1873:   The value of `exactn' is needed in search.c (search_buffer) in Emacs.
        -: 1874:   So regex.h defines a symbol `RE_EXACTN_VALUE' to be 1; the value of
        -: 1875:   `exactn' we use here must also be 1.  */
        -: 1876:
        -: 1877:typedef enum
        -: 1878:{
        -: 1879:  no_op = 0,
        -: 1880:
        -: 1881:        /* Followed by one byte giving n, then by n literal bytes.  */
        -: 1882:  exactn = 1,
        -: 1883:
        -: 1884:        /* Matches any (more or less) character.  */
        -: 1885:  anychar,
        -: 1886:
        -: 1887:        /* Matches any one char belonging to specified set.  First
        -: 1888:           following byte is number of bitmap bytes.  Then come bytes
        -: 1889:           for a bitmap saying which chars are in.  Bits in each byte
        -: 1890:           are ordered low-bit-first.  A character is in the set if its
        -: 1891:           bit is 1.  A character too large to have a bit in the map is
        -: 1892:           automatically not in the set.  */
        -: 1893:  charset,
        -: 1894:
        -: 1895:        /* Same parameters as charset, but match any character that is
        -: 1896:           not one of those specified.  */
        -: 1897:  charset_not,
        -: 1898:
        -: 1899:        /* Start remembering the text that is matched, for storing in a
        -: 1900:           register.  Followed by one byte with the register number, in
        -: 1901:           the range 0 to one less than the pattern buffer's re_nsub
        -: 1902:           field.  Then followed by one byte with the number of groups
        -: 1903:           inner to this one.  (This last has to be part of the
        -: 1904:           start_memory only because we need it in the on_failure_jump
        -: 1905:           of re_match_2.)  */
        -: 1906:  start_memory,
        -: 1907:
        -: 1908:        /* Stop remembering the text that is matched and store it in a
        -: 1909:           memory register.  Followed by one byte with the register
        -: 1910:           number, in the range 0 to one less than `re_nsub' in the
        -: 1911:           pattern buffer, and one byte with the number of inner groups,
        -: 1912:           just like `start_memory'.  (We need the number of inner
        -: 1913:           groups here because we don't have any easy way of finding the
        -: 1914:           corresponding start_memory when we're at a stop_memory.)  */
        -: 1915:  stop_memory,
        -: 1916:
        -: 1917:        /* Match a duplicate of something remembered. Followed by one
        -: 1918:           byte containing the register number.  */
        -: 1919:  duplicate,
        -: 1920:
        -: 1921:        /* Fail unless at beginning of line.  */
        -: 1922:  begline,
        -: 1923:
        -: 1924:        /* Fail unless at end of line.  */
        -: 1925:  endline,
        -: 1926:
        -: 1927:        /* Succeeds if at beginning of buffer (if emacs) or at beginning
        -: 1928:           of string to be matched (if not).  */
        -: 1929:  begbuf,
        -: 1930:
        -: 1931:        /* Analogously, for end of buffer/string.  */
        -: 1932:  endbuf,
        -: 1933: 
        -: 1934:        /* Followed by two byte relative address to which to jump.  */
        -: 1935:  jump, 
        -: 1936:
        -: 1937:	/* Same as jump, but marks the end of an alternative.  */
        -: 1938:  jump_past_alt,
        -: 1939:
        -: 1940:        /* Followed by two-byte relative address of place to resume at
        -: 1941:           in case of failure.  */
        -: 1942:  on_failure_jump,
        -: 1943:	
        -: 1944:        /* Like on_failure_jump, but pushes a placeholder instead of the
        -: 1945:           current string position when executed.  */
        -: 1946:  on_failure_keep_string_jump,
        -: 1947:  
        -: 1948:        /* Throw away latest failure point and then jump to following
        -: 1949:           two-byte relative address.  */
        -: 1950:  pop_failure_jump,
        -: 1951:
        -: 1952:        /* Change to pop_failure_jump if know won't have to backtrack to
        -: 1953:           match; otherwise change to jump.  This is used to jump
        -: 1954:           back to the beginning of a repeat.  If what follows this jump
        -: 1955:           clearly won't match what the repeat does, such that we can be
        -: 1956:           sure that there is no use backtracking out of repetitions
        -: 1957:           already matched, then we change it to a pop_failure_jump.
        -: 1958:           Followed by two-byte address.  */
        -: 1959:  maybe_pop_jump,
        -: 1960:
        -: 1961:        /* Jump to following two-byte address, and push a dummy failure
        -: 1962:           point. This failure point will be thrown away if an attempt
        -: 1963:           is made to use it for a failure.  A `+' construct makes this
        -: 1964:           before the first repeat.  Also used as an intermediary kind
        -: 1965:           of jump when compiling an alternative.  */
        -: 1966:  dummy_failure_jump,
        -: 1967:
        -: 1968:	/* Push a dummy failure point and continue.  Used at the end of
        -: 1969:	   alternatives.  */
        -: 1970:  push_dummy_failure,
        -: 1971:
        -: 1972:        /* Followed by two-byte relative address and two-byte number n.
        -: 1973:           After matching N times, jump to the address upon failure.  */
        -: 1974:  succeed_n,
        -: 1975:
        -: 1976:        /* Followed by two-byte relative address, and two-byte number n.
        -: 1977:           Jump to the address N times, then fail.  */
        -: 1978:  jump_n,
        -: 1979:
        -: 1980:        /* Set the following two-byte relative address to the
        -: 1981:           subsequent two-byte number.  The address *includes* the two
        -: 1982:           bytes of number.  */
        -: 1983:  set_number_at,
        -: 1984:
        -: 1985:  wordchar,	/* Matches any word-constituent character.  */
        -: 1986:  notwordchar,	/* Matches any char that is not a word-constituent.  */
        -: 1987:
        -: 1988:  wordbeg,	/* Succeeds if at word beginning.  */
        -: 1989:  wordend,	/* Succeeds if at word end.  */
        -: 1990:
        -: 1991:  wordbound,	/* Succeeds if at a word boundary.  */
        -: 1992:  notwordbound	/* Succeeds if not at a word boundary.  */
        -: 1993:
        -: 1994:#ifdef emacs
        -: 1995:  ,before_dot,	/* Succeeds if before point.  */
        -: 1996:  at_dot,	/* Succeeds if at point.  */
        -: 1997:  after_dot,	/* Succeeds if after point.  */
        -: 1998:
        -: 1999:	/* Matches any character whose syntax is specified.  Followed by
        -: 2000:           a byte which contains a syntax code, e.g., Sword.  */
        -: 2001:  syntaxspec,
        -: 2002:
        -: 2003:	/* Matches any character whose syntax is not that specified.  */
        -: 2004:  notsyntaxspec
        -: 2005:#endif /* emacs */
        -: 2006:} re_opcode_t;
        -: 2007:
        -: 2008:/* Common operations on the compiled pattern.  */
        -: 2009:
        -: 2010:/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */
        -: 2011:
        -: 2012:#define STORE_NUMBER(destination, number)				\
        -: 2013:  do {									\
        -: 2014:    (destination)[0] = (number) & 0377;					\
        -: 2015:    (destination)[1] = (number) >> 8;					\
        -: 2016:  } while (0)
        -: 2017:
        -: 2018:/* Same as STORE_NUMBER, except increment DESTINATION to
        -: 2019:   the byte after where the number is stored.  Therefore, DESTINATION
        -: 2020:   must be an lvalue.  */
        -: 2021:
        -: 2022:#define STORE_NUMBER_AND_INCR(destination, number)			\
        -: 2023:  do {									\
        -: 2024:    STORE_NUMBER (destination, number);					\
        -: 2025:    (destination) += 2;							\
        -: 2026:  } while (0)
        -: 2027:
        -: 2028:/* Put into DESTINATION a number stored in two contiguous bytes starting
        -: 2029:   at SOURCE.  */
        -: 2030:
        -: 2031:#define EXTRACT_NUMBER(destination, source)				\
        -: 2032:  do {									\
        -: 2033:    (destination) = *(source) & 0377;					\
        -: 2034:    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
        -: 2035:  } while (0)
        -: 2036:
        -: 2037:#ifdef DEBUG
        -: 2038:static void
        -: 2039:extract_number (dest, source)
        -: 2040:    int *dest;
        -: 2041:    unsigned char *source;
        -: 2042:{
        -: 2043:  int temp = SIGN_EXTEND_CHAR (*(source + 1)); 
        -: 2044:  *dest = *source & 0377;
        -: 2045:  *dest += temp << 8;
        -: 2046:}
        -: 2047:
        -: 2048:#ifndef EXTRACT_MACROS /* To debug the macros.  */
        -: 2049:#undef EXTRACT_NUMBER
        -: 2050:#define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
        -: 2051:#endif /* not EXTRACT_MACROS */
        -: 2052:
        -: 2053:#endif /* DEBUG */
        -: 2054:
        -: 2055:/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
        -: 2056:   SOURCE must be an lvalue.  */
        -: 2057:
        -: 2058:#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
        -: 2059:  do {									\
        -: 2060:    EXTRACT_NUMBER (destination, source);				\
        -: 2061:    (source) += 2; 							\
        -: 2062:  } while (0)
        -: 2063:
        -: 2064:#ifdef DEBUG
        -: 2065:static void
        -: 2066:extract_number_and_incr (destination, source)
        -: 2067:    int *destination;
        -: 2068:    unsigned char **source;
        -: 2069:{ 
        -: 2070:  extract_number (destination, *source);
        -: 2071:  *source += 2;
        -: 2072:}
        -: 2073:
        -: 2074:#ifndef EXTRACT_MACROS
        -: 2075:#undef EXTRACT_NUMBER_AND_INCR
        -: 2076:#define EXTRACT_NUMBER_AND_INCR(dest, src) \
        -: 2077:  extract_number_and_incr (&dest, &src)
        -: 2078:#endif /* not EXTRACT_MACROS */
        -: 2079:
        -: 2080:#endif /* DEBUG */
        -: 2081:
        -: 2082:/* If DEBUG is defined, Regex prints many voluminous messages about what
        -: 2083:   it is doing (if the variable `debug' is nonzero).  If linked with the
        -: 2084:   main program in `iregex.c', you can enter patterns and strings
        -: 2085:   interactively.  And if linked with the main program in `main.c' and
        -: 2086:   the other test files, you can run the already-written tests.  */
        -: 2087:
        -: 2088:#ifdef DEBUG
        -: 2089:
        -: 2090:/* We use standard I/O for debugging.  */
        -: 2091:/*#include <stdio.h>*/
        -: 2092:
        -: 2093:/* It is useful to test things that ``must'' be true when debugging.  */
        -: 2094:#include <assert.h>
        -: 2095:
        -: 2096:static int debug = 0;
        -: 2097:
        -: 2098:#define DEBUG_STATEMENT(e) e
        -: 2099:#define DEBUG_PRINT1(x) if (debug) printf (x)
        -: 2100:#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
        -: 2101:#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
        -: 2102:#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
        -: 2103:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
        -: 2104:  if (debug) print_partial_compiled_pattern (s, e)
        -: 2105:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
        -: 2106:  if (debug) print_double_string (w, s1, sz1, s2, sz2)
        -: 2107:
        -: 2108:
        -: 2109:extern void printchar ();
        -: 2110:
        -: 2111:/* Print the fastmap in human-readable form.  */
        -: 2112:
        -: 2113:void
        -: 2114:print_fastmap (fastmap)
        -: 2115:    char *fastmap;
        -: 2116:{
        -: 2117:  unsigned was_a_range = 0;
        -: 2118:  unsigned i = 0;  
        -: 2119:  
        -: 2120:  while (i < (1 << BYTEWIDTH))
        -: 2121:    {
        -: 2122:      if (fastmap[i++])
        -: 2123:	{
        -: 2124:	  was_a_range = 0;
        -: 2125:          printchar (i - 1);
        -: 2126:          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
        -: 2127:            {
        -: 2128:              was_a_range = 1;
        -: 2129:              i++;
        -: 2130:            }
        -: 2131:	  if (was_a_range)
        -: 2132:            {
        -: 2133:              printf ("-");
        -: 2134:              printchar (i - 1);
        -: 2135:            }
        -: 2136:        }
        -: 2137:    }
        -: 2138:  putchar ('\n'); 
        -: 2139:}
        -: 2140:
        -: 2141:
        -: 2142:/* Print a compiled pattern string in human-readable form, starting at
        -: 2143:   the START pointer into it and ending just before the pointer END.  */
        -: 2144:
        -: 2145:void
        -: 2146:print_partial_compiled_pattern (start, end)
        -: 2147:    unsigned char *start;
        -: 2148:    unsigned char *end;
        -: 2149:{
        -: 2150:  int mcnt, mcnt2;
        -: 2151:  unsigned char *p = start;
        -: 2152:  unsigned char *pend = end;
        -: 2153:
        -: 2154:  if (start == NULL)
        -: 2155:    {
        -: 2156:      printf ("(null)\n");
        -: 2157:      return;
        -: 2158:    }
        -: 2159:    
        -: 2160:  /* Loop over pattern commands.  */
        -: 2161:  while (p < pend)
        -: 2162:    {
        -: 2163:      printf ("%d:\t", p - start);
        -: 2164:
        -: 2165:      switch ((re_opcode_t) *p++)
        -: 2166:	{
        -: 2167:        case no_op:
        -: 2168:          printf ("/no_op");
        -: 2169:          break;
        -: 2170:
        -: 2171:	case exactn:
        -: 2172:	  mcnt = *p++;
        -: 2173:          printf ("/exactn/%d", mcnt);
        -: 2174:          do
        -: 2175:	    {
        -: 2176:              putchar ('/');
        -: 2177:	      printchar (*p++);
        -: 2178:            }
        -: 2179:          while (--mcnt);
        -: 2180:          break;
        -: 2181:
        -: 2182:	case start_memory:
        -: 2183:          mcnt = *p++;
        -: 2184:          printf ("/start_memory/%d/%d", mcnt, *p++);
        -: 2185:          break;
        -: 2186:
        -: 2187:	case stop_memory:
        -: 2188:          mcnt = *p++;
        -: 2189:	  printf ("/stop_memory/%d/%d", mcnt, *p++);
        -: 2190:          break;
        -: 2191:
        -: 2192:	case duplicate:
        -: 2193:	  printf ("/duplicate/%d", *p++);
        -: 2194:	  break;
        -: 2195:
        -: 2196:	case anychar:
        -: 2197:	  printf ("/anychar");
        -: 2198:	  break;
        -: 2199:
        -: 2200:	case charset:
        -: 2201:        case charset_not:
        -: 2202:          {
        -: 2203:            register int c, last = -100;
        -: 2204:	    register int in_range = 0;
        -: 2205:
        -: 2206:	    printf ("/charset [%s",
        -: 2207:	            (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
        -: 2208:            
        -: 2209:            assert (p + *p < pend);
        -: 2210:
        -: 2211:            for (c = 0; c < 256; c++)
        -: 2212:	      if (c / 8 < *p
        -: 2213:		  && (p[1 + (c/8)] & (1 << (c % 8))))
        -: 2214:		{
        -: 2215:		  /* Are we starting a range?  */
        -: 2216:		  if (last + 1 == c && ! in_range)
        -: 2217:		    {
        -: 2218:		      putchar ('-');
        -: 2219:		      in_range = 1;
        -: 2220:		    }
        -: 2221:		  /* Have we broken a range?  */
        -: 2222:		  else if (last + 1 != c && in_range)
        -: 2223:              {
        -: 2224:		      printchar (last);
        -: 2225:		      in_range = 0;
        -: 2226:		    }
        -: 2227:                
        -: 2228:		  if (! in_range)
        -: 2229:		    printchar (c);
        -: 2230:
        -: 2231:		  last = c;
        -: 2232:              }
        -: 2233:
        -: 2234:	    if (in_range)
        -: 2235:	      printchar (last);
        -: 2236:
        -: 2237:	    putchar (']');
        -: 2238:
        -: 2239:	    p += 1 + *p;
        -: 2240:	  }
        -: 2241:	  break;
        -: 2242:
        -: 2243:	case begline:
        -: 2244:	  printf ("/begline");
        -: 2245:          break;
        -: 2246:
        -: 2247:	case endline:
        -: 2248:          printf ("/endline");
        -: 2249:          break;
        -: 2250:
        -: 2251:	case on_failure_jump:
        -: 2252:          extract_number_and_incr (&mcnt, &p);
        -: 2253:  	  printf ("/on_failure_jump to %d", p + mcnt - start);
        -: 2254:          break;
        -: 2255:
        -: 2256:	case on_failure_keep_string_jump:
        -: 2257:          extract_number_and_incr (&mcnt, &p);
        -: 2258:  	  printf ("/on_failure_keep_string_jump to %d", p + mcnt - start);
        -: 2259:          break;
        -: 2260:
        -: 2261:	case dummy_failure_jump:
        -: 2262:          extract_number_and_incr (&mcnt, &p);
        -: 2263:  	  printf ("/dummy_failure_jump to %d", p + mcnt - start);
        -: 2264:          break;
        -: 2265:
        -: 2266:	case push_dummy_failure:
        -: 2267:          printf ("/push_dummy_failure");
        -: 2268:          break;
        -: 2269:          
        -: 2270:        case maybe_pop_jump:
        -: 2271:          extract_number_and_incr (&mcnt, &p);
        -: 2272:  	  printf ("/maybe_pop_jump to %d", p + mcnt - start);
        -: 2273:	  break;
        -: 2274:
        -: 2275:        case pop_failure_jump:
        -: 2276:	  extract_number_and_incr (&mcnt, &p);
        -: 2277:  	  printf ("/pop_failure_jump to %d", p + mcnt - start);
        -: 2278:	  break;          
        -: 2279:          
        -: 2280:        case jump_past_alt:
        -: 2281:	  extract_number_and_incr (&mcnt, &p);
        -: 2282:  	  printf ("/jump_past_alt to %d", p + mcnt - start);
        -: 2283:	  break;          
        -: 2284:          
        -: 2285:        case jump:
        -: 2286:	  extract_number_and_incr (&mcnt, &p);
        -: 2287:  	  printf ("/jump to %d", p + mcnt - start);
        -: 2288:	  break;
        -: 2289:
        -: 2290:        case succeed_n: 
        -: 2291:          extract_number_and_incr (&mcnt, &p);
        -: 2292:          extract_number_and_incr (&mcnt2, &p);
        -: 2293:	  printf ("/succeed_n to %d, %d times", p + mcnt - start, mcnt2);
        -: 2294:          break;
        -: 2295:        
        -: 2296:        case jump_n: 
        -: 2297:          extract_number_and_incr (&mcnt, &p);
        -: 2298:          extract_number_and_incr (&mcnt2, &p);
        -: 2299:	  printf ("/jump_n to %d, %d times", p + mcnt - start, mcnt2);
        -: 2300:          break;
        -: 2301:        
        -: 2302:        case set_number_at: 
        -: 2303:          extract_number_and_incr (&mcnt, &p);
        -: 2304:          extract_number_and_incr (&mcnt2, &p);
        -: 2305:	  printf ("/set_number_at location %d to %d", p + mcnt - start, mcnt2);
        -: 2306:          break;
        -: 2307:        
        -: 2308:        case wordbound:
        -: 2309:	  printf ("/wordbound");
        -: 2310:	  break;
        -: 2311:
        -: 2312:	case notwordbound:
        -: 2313:	  printf ("/notwordbound");
        -: 2314:          break;
        -: 2315:
        -: 2316:	case wordbeg:
        -: 2317:	  printf ("/wordbeg");
        -: 2318:	  break;
        -: 2319:          
        -: 2320:	case wordend:
        -: 2321:	  printf ("/wordend");
        -: 2322:          
        -: 2323:#ifdef emacs
        -: 2324:	case before_dot:
        -: 2325:	  printf ("/before_dot");
        -: 2326:          break;
        -: 2327:
        -: 2328:	case at_dot:
        -: 2329:	  printf ("/at_dot");
        -: 2330:          break;
        -: 2331:
        -: 2332:	case after_dot:
        -: 2333:	  printf ("/after_dot");
        -: 2334:          break;
        -: 2335:
        -: 2336:	case syntaxspec:
        -: 2337:          printf ("/syntaxspec");
        -: 2338:	  mcnt = *p++;
        -: 2339:	  printf ("/%d", mcnt);
        -: 2340:          break;
        -: 2341:	  
        -: 2342:	case notsyntaxspec:
        -: 2343:          printf ("/notsyntaxspec");
        -: 2344:	  mcnt = *p++;
        -: 2345:	  printf ("/%d", mcnt);
        -: 2346:	  break;
        -: 2347:#endif /* emacs */
        -: 2348:
        -: 2349:	case wordchar:
        -: 2350:	  printf ("/wordchar");
        -: 2351:          break;
        -: 2352:	  
        -: 2353:	case notwordchar:
        -: 2354:	  printf ("/notwordchar");
        -: 2355:          break;
        -: 2356:
        -: 2357:	case begbuf:
        -: 2358:	  printf ("/begbuf");
        -: 2359:          break;
        -: 2360:
        -: 2361:	case endbuf:
        -: 2362:	  printf ("/endbuf");
        -: 2363:          break;
        -: 2364:
        -: 2365:        default:
        -: 2366:          printf ("?%d", *(p-1));
        -: 2367:	}
        -: 2368:
        -: 2369:      putchar ('\n');
        -: 2370:    }
        -: 2371:
        -: 2372:  printf ("%d:\tend of pattern.\n", p - start);
        -: 2373:}
        -: 2374:
        -: 2375:
        -: 2376:void
        -: 2377:print_compiled_pattern (bufp)
        -: 2378:    struct re_pattern_buffer *bufp;
        -: 2379:{
        -: 2380:  unsigned char *buffer = bufp->buffer;
        -: 2381:
        -: 2382:  print_partial_compiled_pattern (buffer, buffer + bufp->used);
        -: 2383:  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
        -: 2384:
        -: 2385:  if (bufp->fastmap_accurate && bufp->fastmap)
        -: 2386:    {
        -: 2387:      printf ("fastmap: ");
        -: 2388:      print_fastmap (bufp->fastmap);
        -: 2389:    }
        -: 2390:
        -: 2391:  printf ("re_nsub: %d\t", bufp->re_nsub);
        -: 2392:  printf ("regs_alloc: %d\t", bufp->regs_allocated);
        -: 2393:  printf ("can_be_null: %d\t", bufp->can_be_null);
        -: 2394:  printf ("newline_anchor: %d\n", bufp->newline_anchor);
        -: 2395:  printf ("no_sub: %d\t", bufp->no_sub);
        -: 2396:  printf ("not_bol: %d\t", bufp->not_bol);
        -: 2397:  printf ("not_eol: %d\t", bufp->not_eol);
        -: 2398:  printf ("syntax: %d\n", bufp->syntax);
        -: 2399:  /* Perhaps we should print the translate table?  */
        -: 2400:}
        -: 2401:
        -: 2402:
        -: 2403:void
        -: 2404:print_double_string (where, string1, size1, string2, size2)
        -: 2405:    const char *where;
        -: 2406:    const char *string1;
        -: 2407:    const char *string2;
        -: 2408:    int size1;
        -: 2409:    int size2;
        -: 2410:{
        -: 2411:  unsigned this_char;
        -: 2412:  
        -: 2413:  if (where == NULL)
        -: 2414:    printf ("(null)");
        -: 2415:  else
        -: 2416:    {
        -: 2417:      if (FIRST_STRING_P (where))
        -: 2418:        {
        -: 2419:          for (this_char = where - string1; this_char < size1; this_char++)
        -: 2420:            printchar (string1[this_char]);
        -: 2421:
        -: 2422:          where = string2;    
        -: 2423:        }
        -: 2424:
        -: 2425:      for (this_char = where - string2; this_char < size2; this_char++)
        -: 2426:        printchar (string2[this_char]);
        -: 2427:    }
        -: 2428:}
        -: 2429:
        -: 2430:#else /* not DEBUG */
        -: 2431:
        -: 2432:#undef assert
        -: 2433:#define assert(e)
        -: 2434:
        -: 2435:#define DEBUG_STATEMENT(e)
        -: 2436:#define DEBUG_PRINT1(x)
        -: 2437:#define DEBUG_PRINT2(x1, x2)
        -: 2438:#define DEBUG_PRINT3(x1, x2, x3)
        -: 2439:#define DEBUG_PRINT4(x1, x2, x3, x4)
        -: 2440:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
        -: 2441:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
        -: 2442:
        -: 2443:#endif /* not DEBUG */
        -: 2444:
        -: 2445:/* Set by `re_set_syntax' to the current regexp syntax to recognize.  Can
        -: 2446:   also be assigned to arbitrarily: each pattern buffer stores its own
        -: 2447:   syntax, so it can be changed between regex compilations.  */
        -: 2448:reg_syntax_t re_syntax_options = RE_SYNTAX_EMACS;
        -: 2449:
        -: 2450:
        -: 2451:/* Specify the precise syntax of regexps for compilation.  This provides
        -: 2452:   for compatibility for various utilities which historically have
        -: 2453:   different, incompatible syntaxes.
        -: 2454:
        -: 2455:   The argument SYNTAX is a bit mask comprised of the various bits
        -: 2456:   defined in regex.h.  We return the old syntax.  */
        -: 2457:
        -: 2458:reg_syntax_t
function re_set_syntax called 3 returned 100% blocks executed 100%
        3: 2459:re_set_syntax (syntax)
        -: 2460:    reg_syntax_t syntax;
        -: 2461:{
        3: 2462:  reg_syntax_t ret = re_syntax_options;
        -: 2463:  
        3: 2464:  re_syntax_options = syntax;
        3: 2465:  return ret;
        3: 2465-block  0
        -: 2466:}
        -: 2467:
        -: 2468:/* This table gives an error message for each of the error codes listed
        -: 2469:   in regex.h.  Obviously the order here has to be same as there.  */
        -: 2470:
        -: 2471:static const char *re_error_msg[] =
        -: 2472:  { NULL,					/* REG_NOERROR */
        -: 2473:    "No match",					/* REG_NOMATCH */
        -: 2474:    "Invalid regular expression",		/* REG_BADPAT */
        -: 2475:    "Invalid collation character",		/* REG_ECOLLATE */
        -: 2476:    "Invalid character class name",		/* REG_ECTYPE */
        -: 2477:    "Trailing backslash",			/* REG_EESCAPE */
        -: 2478:    "Invalid back reference",			/* REG_ESUBREG */
        -: 2479:    "Unmatched [ or [^",			/* REG_EBRACK */
        -: 2480:    "Unmatched ( or \\(",			/* REG_EPAREN */
        -: 2481:    "Unmatched \\{",				/* REG_EBRACE */
        -: 2482:    "Invalid content of \\{\\}",		/* REG_BADBR */
        -: 2483:    "Invalid range end",			/* REG_ERANGE */
        -: 2484:    "Memory exhausted",				/* REG_ESPACE */
        -: 2485:    "Invalid preceding regular expression",	/* REG_BADRPT */
        -: 2486:    "Premature end of regular expression",	/* REG_EEND */
        -: 2487:    "Regular expression too big",		/* REG_ESIZE */
        -: 2488:    "Unmatched ) or \\)",			/* REG_ERPAREN */
        -: 2489:  };
        -: 2490:
        -: 2491:/* Subroutine declarations and macros for regex_compile.  */
        -: 2492:
        -: 2493:static void store_op1 (), store_op2 ();
        -: 2494:static void insert_op1 (), insert_op2 ();
        -: 2495:static boolean at_begline_loc_p (), at_endline_loc_p ();
        -: 2496:static boolean group_in_compile_stack ();
        -: 2497:static reg_errcode_t compile_range ();
        -: 2498:
        -: 2499:/* Fetch the next character in the uncompiled pattern---translating it 
        -: 2500:   if necessary.  Also cast from a signed character in the constant
        -: 2501:   string passed to us by the user to an unsigned char that we can use
        -: 2502:   as an array index (in, e.g., `translate').  */
        -: 2503:#define PATFETCH(c)							\
        -: 2504:  do {if (p == pend) return REG_EEND;					\
        -: 2505:    c = (unsigned char) *p++;						\
        -: 2506:    if (translate) c = translate[c]; 					\
        -: 2507:  } while (0)
        -: 2508:
        -: 2509:/* Fetch the next character in the uncompiled pattern, with no
        -: 2510:   translation.  */
        -: 2511:#define PATFETCH_RAW(c)							\
        -: 2512:  do {if (p == pend) return REG_EEND;					\
        -: 2513:    c = (unsigned char) *p++; 						\
        -: 2514:  } while (0)
        -: 2515:
        -: 2516:/* Go backwards one character in the pattern.  */
        -: 2517:#define PATUNFETCH p--
        -: 2518:
        -: 2519:
        -: 2520:/* If `translate' is non-null, return translate[D], else just D.  We
        -: 2521:   cast the subscript to translate because some data is declared as
        -: 2522:   `char *', to avoid warnings when a string constant is passed.  But
        -: 2523:   when we use a character as a subscript we must make it unsigned.  */
        -: 2524:#define TRANSLATE(d) (translate ? translate[(unsigned char) (d)] : (d))
        -: 2525:
        -: 2526:
        -: 2527:/* Macros for outputting the compiled pattern into `buffer'.  */
        -: 2528:
        -: 2529:/* If the buffer isn't allocated when it comes in, use this.  */
        -: 2530:#define INIT_BUF_SIZE  32
        -: 2531:
        -: 2532:/* Make sure we have at least N more bytes of space in buffer.  */
        -: 2533:#define GET_BUFFER_SPACE(n)						\
        -: 2534:    while (b - bufp->buffer + (n) > bufp->allocated)			\
        -: 2535:      EXTEND_BUFFER ()
        -: 2536:
        -: 2537:/* Make sure we have one more byte of buffer space and then add C to it.  */
        -: 2538:#define BUF_PUSH(c)							\
        -: 2539:  do {									\
        -: 2540:    GET_BUFFER_SPACE (1);						\
        -: 2541:    *b++ = (unsigned char) (c);						\
        -: 2542:  } while (0)
        -: 2543:
        -: 2544:
        -: 2545:/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */
        -: 2546:#define BUF_PUSH_2(c1, c2)						\
        -: 2547:  do {									\
        -: 2548:    GET_BUFFER_SPACE (2);						\
        -: 2549:    *b++ = (unsigned char) (c1);					\
        -: 2550:    *b++ = (unsigned char) (c2);					\
        -: 2551:  } while (0)
        -: 2552:
        -: 2553:
        -: 2554:/* As with BUF_PUSH_2, except for three bytes.  */
        -: 2555:#define BUF_PUSH_3(c1, c2, c3)						\
        -: 2556:  do {									\
        -: 2557:    GET_BUFFER_SPACE (3);						\
        -: 2558:    *b++ = (unsigned char) (c1);					\
        -: 2559:    *b++ = (unsigned char) (c2);					\
        -: 2560:    *b++ = (unsigned char) (c3);					\
        -: 2561:  } while (0)
        -: 2562:
        -: 2563:
        -: 2564:/* Store a jump with opcode OP at LOC to location TO.  We store a
        -: 2565:   relative address offset by the three bytes the jump itself occupies.  */
        -: 2566:#define STORE_JUMP(op, loc, to) \
        -: 2567:  store_op1 (op, loc, (to) - (loc) - 3)
        -: 2568:
        -: 2569:/* Likewise, for a two-argument jump.  */
        -: 2570:#define STORE_JUMP2(op, loc, to, arg) \
        -: 2571:  store_op2 (op, loc, (to) - (loc) - 3, arg)
        -: 2572:
        -: 2573:/* Like `STORE_JUMP', but for inserting.  Assume `b' is the buffer end.  */
        -: 2574:#define INSERT_JUMP(op, loc, to) \
        -: 2575:  insert_op1 (op, loc, (to) - (loc) - 3, b)
        -: 2576:
        -: 2577:/* Like `STORE_JUMP2', but for inserting.  Assume `b' is the buffer end.  */
        -: 2578:#define INSERT_JUMP2(op, loc, to, arg) \
        -: 2579:  insert_op2 (op, loc, (to) - (loc) - 3, arg, b)
        -: 2580:
        -: 2581:
        -: 2582:/* This is not an arbitrary limit: the arguments which represent offsets
        -: 2583:   into the pattern are two bytes long.  So if 2^16 bytes turns out to
        -: 2584:   be too small, many things would have to change.  */
        -: 2585:#define MAX_BUF_SIZE (1L << 16)
        -: 2586:
        -: 2587:
        -: 2588:/* Extend the buffer by twice its current size via realloc and
        -: 2589:   reset the pointers that pointed into the old block to point to the
        -: 2590:   correct places in the new one.  If extending the buffer results in it
        -: 2591:   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */
        -: 2592:#define EXTEND_BUFFER()							\
        -: 2593:  do { 									\
        -: 2594:    unsigned char *old_buffer = bufp->buffer;				\
        -: 2595:    if (bufp->allocated == MAX_BUF_SIZE) 				\
        -: 2596:      return REG_ESIZE;							\
        -: 2597:    bufp->allocated <<= 1;						\
        -: 2598:    if (bufp->allocated > MAX_BUF_SIZE)					\
        -: 2599:      bufp->allocated = MAX_BUF_SIZE; 					\
        -: 2600:    bufp->buffer = (unsigned char *) realloc (bufp->buffer, bufp->allocated);\
        -: 2601:    if (bufp->buffer == NULL)						\
        -: 2602:      return REG_ESPACE;						\
        -: 2603:    /* If the buffer moved, move all the pointers into it.  */		\
        -: 2604:    if (old_buffer != bufp->buffer)					\
        -: 2605:      {									\
        -: 2606:        b = (b - old_buffer) + bufp->buffer;				\
        -: 2607:        begalt = (begalt - old_buffer) + bufp->buffer;			\
        -: 2608:        if (fixup_alt_jump)						\
        -: 2609:          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
        -: 2610:        if (laststart)							\
        -: 2611:          laststart = (laststart - old_buffer) + bufp->buffer;		\
        -: 2612:        if (pending_exact)						\
        -: 2613:          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
        -: 2614:      }									\
        -: 2615:  } while (0)
        -: 2616:
        -: 2617:
        -: 2618:/* Since we have one byte reserved for the register number argument to
        -: 2619:   {start,stop}_memory, the maximum number of groups we can report
        -: 2620:   things about is what fits in that byte.  */
        -: 2621:#define MAX_REGNUM 255
        -: 2622:
        -: 2623:/* But patterns can have more than `MAX_REGNUM' registers.  We just
        -: 2624:   ignore the excess.  */
        -: 2625:typedef unsigned regnum_t;
        -: 2626:
        -: 2627:
        -: 2628:/* Macros for the compile stack.  */
        -: 2629:
        -: 2630:/* Since offsets can go either forwards or backwards, this type needs to
        -: 2631:   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
        -: 2632:typedef int pattern_offset_t;
        -: 2633:
        -: 2634:typedef struct
        -: 2635:{
        -: 2636:  pattern_offset_t begalt_offset;
        -: 2637:  pattern_offset_t fixup_alt_jump;
        -: 2638:  pattern_offset_t inner_group_offset;
        -: 2639:  pattern_offset_t laststart_offset;  
        -: 2640:  regnum_t regnum;
        -: 2641:} compile_stack_elt_t;
        -: 2642:
        -: 2643:
        -: 2644:typedef struct
        -: 2645:{
        -: 2646:  compile_stack_elt_t *stack;
        -: 2647:  unsigned size;
        -: 2648:  unsigned avail;			/* Offset of next open position.  */
        -: 2649:} compile_stack_type;
        -: 2650:
        -: 2651:
        -: 2652:#define INIT_COMPILE_STACK_SIZE 32
        -: 2653:
        -: 2654:#define COMPILE_STACK_EMPTY  (compile_stack.avail == 0)
        -: 2655:#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)
        -: 2656:
        -: 2657:/* The next available element.  */
        -: 2658:#define COMPILE_STACK_TOP (compile_stack.stack[compile_stack.avail])
        -: 2659:
        -: 2660:
        -: 2661:/* Set the bit for character C in a list.  */
        -: 2662:#define SET_LIST_BIT(c)                               \
        -: 2663:  (b[((unsigned char) (c)) / BYTEWIDTH]               \
        -: 2664:   |= 1 << (((unsigned char) c) % BYTEWIDTH))
        -: 2665:
        -: 2666:
        -: 2667:/* Get the next unsigned number in the uncompiled pattern.  */
        -: 2668:#define GET_UNSIGNED_NUMBER(num) 					\
        -: 2669:  { if (p != pend)							\
        -: 2670:     {									\
        -: 2671:       PATFETCH (c); 							\
        -: 2672:       while (ISDIGIT (c)) 						\
        -: 2673:         { 								\
        -: 2674:           if (num < 0)							\
        -: 2675:              num = 0;							\
        -: 2676:           num = num * 10 + c - '0'; 					\
        -: 2677:           if (p == pend) 						\
        -: 2678:              break; 							\
        -: 2679:           PATFETCH (c);						\
        -: 2680:         } 								\
        -: 2681:       } 								\
        -: 2682:    }		
        -: 2683:
        -: 2684:#define CHAR_CLASS_MAX_LENGTH  6 /* Namely, `xdigit'.  */
        -: 2685:
        -: 2686:#define IS_CHAR_CLASS(string)						\
        -: 2687:   (STREQ (string, "alpha") || STREQ (string, "upper")			\
        -: 2688:    || STREQ (string, "lower") || STREQ (string, "digit")		\
        -: 2689:    || STREQ (string, "alnum") || STREQ (string, "xdigit")		\
        -: 2690:    || STREQ (string, "space") || STREQ (string, "print")		\
        -: 2691:    || STREQ (string, "punct") || STREQ (string, "graph")		\
        -: 2692:    || STREQ (string, "cntrl") || STREQ (string, "blank"))
        -: 2693:
        -: 2694:/* `regex_compile' compiles PATTERN (of length SIZE) according to SYNTAX.
        -: 2695:   Returns one of error codes defined in `regex.h', or zero for success.
        -: 2696:
        -: 2697:   Assumes the `allocated' (and perhaps `buffer') and `translate'
        -: 2698:   fields are set in BUFP on entry.
        -: 2699:
        -: 2700:   If it succeeds, results are put in BUFP (if it returns an error, the
        -: 2701:   contents of BUFP are undefined):
        -: 2702:     `buffer' is the compiled pattern;
        -: 2703:     `syntax' is set to SYNTAX;
        -: 2704:     `used' is set to the length of the compiled pattern;
        -: 2705:     `fastmap_accurate' is zero;
        -: 2706:     `re_nsub' is the number of subexpressions in PATTERN;
        -: 2707:     `not_bol' and `not_eol' are zero;
        -: 2708:   
        -: 2709:   The `fastmap' and `newline_anchor' fields are neither
        -: 2710:   examined nor set.  */
        -: 2711:
        -: 2712:static reg_errcode_t
function regex_compile called 3 returned 433% blocks executed 28%
        3: 2713:regex_compile (pattern, size, syntax, bufp)
        -: 2714:     const char *pattern;
        -: 2715:     int size;
        -: 2716:     reg_syntax_t syntax;
        -: 2717:     struct re_pattern_buffer *bufp;
        -: 2718:{
        -: 2719:  /* We fetch characters from PATTERN here.  Even though PATTERN is
        -: 2720:     `char *' (i.e., signed), we declare these variables as unsigned, so
        -: 2721:     they can be reliably used as array indices.  */
        -: 2722:  register unsigned char c, c1;
        -: 2723:  
        -: 2724:  /* A random tempory spot in PATTERN.  */
        -: 2725:  const char *p1;
        -: 2726:
        -: 2727:  /* Points to the end of the buffer, where we should append.  */
        -: 2728:  register unsigned char *b;
        -: 2729:  
        -: 2730:  /* Keeps track of unclosed groups.  */
        -: 2731:  compile_stack_type compile_stack;
        -: 2732:
        -: 2733:  /* Points to the current (ending) position in the pattern.  */
        3: 2734:  const char *p = pattern;
        3: 2735:  const char *pend = pattern + size;
        -: 2736:  
        -: 2737:  /* How to translate the characters in the pattern.  */
        3: 2738:  char *translate = bufp->translate;
        -: 2739:
        -: 2740:  /* Address of the count-byte of the most recently inserted `exactn'
        -: 2741:     command.  This makes it possible to tell if a new exact-match
        -: 2742:     character can be added to that command or if the character requires
        -: 2743:     a new `exactn' command.  */
        3: 2744:  unsigned char *pending_exact = 0;
        -: 2745:
        -: 2746:  /* Address of start of the most recently finished expression.
        -: 2747:     This tells, e.g., postfix * where to find the start of its
        -: 2748:     operand.  Reset at the beginning of groups and alternatives.  */
        3: 2749:  unsigned char *laststart = 0;
        -: 2750:
        -: 2751:  /* Address of beginning of regexp, or inside of last group.  */
        -: 2752:  unsigned char *begalt;
        -: 2753:
        -: 2754:  /* Place in the uncompiled pattern (i.e., the {) to
        -: 2755:     which to go back if the interval is invalid.  */
        -: 2756:  const char *beg_interval;
        -: 2757:                
        -: 2758:  /* Address of the place where a forward jump should go to the end of
        -: 2759:     the containing expression.  Each alternative of an `or' -- except the
        -: 2760:     last -- ends with a forward jump of this sort.  */
        3: 2761:  unsigned char *fixup_alt_jump = 0;
        -: 2762:
        -: 2763:  /* Counts open-groups as they are encountered.  Remembered for the
        -: 2764:     matching close-group on the compile stack, so the same register
        -: 2765:     number is put in the stop_memory as the start_memory.  */
        3: 2766:  regnum_t regnum = 0;
        -: 2767:
        -: 2768:#ifdef DEBUG
        -: 2769:  DEBUG_PRINT1 ("\nCompiling pattern: ");
        -: 2770:  if (debug)
        -: 2771:    {
        -: 2772:      unsigned debug_count;
        -: 2773:      
        -: 2774:      for (debug_count = 0; debug_count < size; debug_count++)
        -: 2775:        printchar (pattern[debug_count]);
        -: 2776:      putchar ('\n');
        -: 2777:    }
        -: 2778:#endif /* DEBUG */
        -: 2779:
        -: 2780:  /* Initialize the compile stack.  */
        3: 2781:  compile_stack.stack = TALLOC (INIT_COMPILE_STACK_SIZE, compile_stack_elt_t);
        3: 2782:  if (compile_stack.stack == NULL)
        3: 2782-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 2783:    return REG_ESPACE;
    $$$$$: 2783-block  0
        -: 2784:
        3: 2785:  compile_stack.size = INIT_COMPILE_STACK_SIZE;
        3: 2786:  compile_stack.avail = 0;
        -: 2787:
        -: 2788:  /* Initialize the pattern buffer.  */
        3: 2789:  bufp->syntax = syntax;
        3: 2790:  bufp->fastmap_accurate = 0;
        3: 2791:  bufp->not_bol = bufp->not_eol = 0;
        -: 2792:
        -: 2793:  /* Set `used' to zero, so that if we return an error, the pattern
        -: 2794:     printer (for debugging) will think there's no pattern.  We reset it
        -: 2795:     at the end.  */
        3: 2796:  bufp->used = 0;
        -: 2797:  
        -: 2798:  /* Always count groups, whether or not bufp->no_sub is set.  */
        3: 2799:  bufp->re_nsub = 0;				
        -: 2800:
        -: 2801:#if !defined (emacs) && !defined (SYNTAX_TABLE)
        -: 2802:  /* Initialize the syntax table.  */
        3: 2803:   init_syntax_once ();
        -: 2804:#endif
        -: 2805:
        3: 2806:  if (bufp->allocated == 0)
        3: 2806-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 2807:    {
        3: 2808:      if (bufp->buffer)
        3: 2808-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 2809:	{ /* If zero allocated, but buffer is non-null, try to realloc
        -: 2810:             enough space.  This loses if buffer's address is bogus, but
        -: 2811:             that is the user's responsibility.  */
    #####: 2812:          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
    #####: 2813:        }
    $$$$$: 2813-block  0
        -: 2814:      else
        -: 2815:        { /* Caller did not allocate a buffer.  Do it for them.  */
        3: 2816:          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
        3: 2816-block  0
        -: 2817:        }
        3: 2818:      if (!bufp->buffer) return REG_ESPACE;
        3: 2818-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 2818-block  1
        -: 2819:
        3: 2820:      bufp->allocated = INIT_BUF_SIZE;
        3: 2821:    }
        3: 2821-block  0
        -: 2822:
        3: 2823:  begalt = b = bufp->buffer;
        -: 2824:
        -: 2825:  /* Loop through the uncompiled pattern until we're at the end.  */
      140: 2826:  while (p != pend)
        3: 2826-block  0
      140: 2826-block  1
branch  0 taken 98%
branch  1 taken 2%
      137: 2826-block  2
        -: 2827:    {
      137: 2828:      PATFETCH (c);
      137: 2828-block  0
      137: 2828-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 2828-block  2
      137: 2828-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 2828-block  4
      137: 2828-block  5
        -: 2829:
      137: 2830:      switch (c)
      137: 2830-block  0
branch  0 taken 49%
branch  1 taken 7%
branch  2 taken 6%
branch  3 taken 0%
branch  4 taken 1%
branch  5 taken 1%
branch  6 taken 4%
branch  7 taken 6%
branch  8 taken 6%
branch  9 taken 0%
branch 10 taken 18%
branch 11 taken 1%
branch 12 taken 0%
    $$$$$: 2830-block  1
        -: 2831:        {
        -: 2832:        case '^':
        -: 2833:          {
        -: 2834:            if (   /* If at start of pattern, it's an operator.  */
    #####: 2835:                   p == pattern + 1
    $$$$$: 2835-block  0
branch  0 never executed
branch  1 never executed
        -: 2836:                   /* If context independent, it's an operator.  */
    #####: 2837:                || syntax & RE_CONTEXT_INDEP_ANCHORS
    $$$$$: 2837-block  0
branch  0 never executed
branch  1 never executed
        -: 2838:                   /* Otherwise, depends on what's come before.  */
    #####: 2839:                || at_begline_loc_p (pattern, p, syntax))
    $$$$$: 2839-block  0
branch  0 never executed
branch  1 never executed
    #####: 2840:              BUF_PUSH (begline);
    $$$$$: 2840-block  0
    $$$$$: 2840-block  1
    $$$$$: 2840-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 2840-block  3
    $$$$$: 2840-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 2840-block  5
    $$$$$: 2840-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 2840-block  7
    $$$$$: 2840-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 2840-block  9
    $$$$$: 2840-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 2840-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 2840-block 12
    $$$$$: 2840-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 2840-block 14
    $$$$$: 2840-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 2840-block 16
    $$$$$: 2840-block 17
    $$$$$: 2840-block 18
    $$$$$: 2840-block 19
    $$$$$: 2840-block 20
    $$$$$: 2840-block 21
        -: 2841:            else
    #####: 2842:              goto normal_char;
    $$$$$: 2842-block  0
        -: 2843:          }
    #####: 2844:          break;
    $$$$$: 2844-block  0
        -: 2845:
        -: 2846:
        -: 2847:        case '$':
        -: 2848:          {
        -: 2849:            if (   /* If at end of pattern, it's an operator.  */
        3: 2850:                   p == pend 
        1: 2850-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 2851:                   /* If context independent, it's an operator.  */
        2: 2852:                || syntax & RE_CONTEXT_INDEP_ANCHORS
        2: 2852-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 2853:                   /* Otherwise, depends on what's next.  */
        2: 2854:                || at_endline_loc_p (p, pend, syntax))
        2: 2854-block  0
branch  0 taken 50%
branch  1 taken 50%
        1: 2855:               BUF_PUSH (endline);
        1: 2855-block  0
        1: 2855-block  1
        1: 2855-block  2
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 2855-block  3
    $$$$$: 2855-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 2855-block  5
    $$$$$: 2855-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 2855-block  7
    $$$$$: 2855-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 2855-block  9
    $$$$$: 2855-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 2855-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 2855-block 12
    $$$$$: 2855-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 2855-block 14
    $$$$$: 2855-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 2855-block 16
    $$$$$: 2855-block 17
    $$$$$: 2855-block 18
    $$$$$: 2855-block 19
        1: 2855-block 20
        1: 2855-block 21
        -: 2856:             else
        1: 2857:               goto normal_char;
        1: 2857-block  0
        -: 2858:           }
        1: 2859:           break;
        1: 2859-block  0
        -: 2860:
        -: 2861:
        -: 2862:	case '+':
        -: 2863:        case '?':
       10: 2864:          if ((syntax & RE_BK_PLUS_QM)
        5: 2864-block  0
branch  0 taken 0%
branch  1 taken 100%
       10: 2865:              || (syntax & RE_LIMITED_OPS))
       10: 2865-block  0
branch  0 taken 50%
branch  1 taken 50%
        5: 2865-block  1
        5: 2865-block  2
        5: 2866:            goto normal_char;
        5: 2866-block  0
        -: 2867:        handle_plus:
        -: 2868:        case '*':
        -: 2869:          /* If there is no previous pattern... */
       13: 2870:          if (!laststart)
       13: 2870-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 2871:            {
    #####: 2872:              if (syntax & RE_CONTEXT_INVALID_OPS)
    $$$$$: 2872-block  0
branch  0 never executed
branch  1 never executed
    #####: 2873:                return REG_BADRPT;
    $$$$$: 2873-block  0
    #####: 2874:              else if (!(syntax & RE_CONTEXT_INDEP_OPS))
    $$$$$: 2874-block  0
branch  0 never executed
branch  1 never executed
    #####: 2875:                goto normal_char;
    $$$$$: 2875-block  0
    #####: 2876:            }
    $$$$$: 2876-block  0
        -: 2877:
        -: 2878:          {
        -: 2879:            /* Are we optimizing this jump?  */
       13: 2880:            boolean keep_string_p = false;
        -: 2881:            
        -: 2882:            /* 1 means zero (many) matches is allowed.  */
       13: 2883:            char zero_times_ok = 0, many_times_ok = 0;
        -: 2884:
        -: 2885:            /* If there is a sequence of repetition chars, collapse it
        -: 2886:               down to just one (the right one).  We can't combine
        -: 2887:               interval operators with these because of, e.g., `a{2}*',
        -: 2888:               which should only match an even number of `a's.  */
        -: 2889:
       13: 2890:            for (;;)
       13: 2890-block  0
    $$$$$: 2890-block  1
        -: 2891:              {
       13: 2892:                zero_times_ok |= c != '+';
       13: 2893:                many_times_ok |= c != '?';
        -: 2894:
       13: 2895:                if (p == pend)
       13: 2895-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 2896:                  break;
    $$$$$: 2896-block  0
        -: 2897:
       13: 2898:                PATFETCH (c);
       13: 2898-block  0
       13: 2898-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 2898-block  2
       13: 2898-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 2898-block  4
       13: 2898-block  5
        -: 2899:
       22: 2900:                if (c == '*'
        9: 2900-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 2900-block  1
       13: 2901:                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
       13: 2901-block  0
branch  0 taken 100%
branch  1 taken 0%
       13: 2901-block  1
branch  2 taken 69%
branch  3 taken 31%
        9: 2901-block  2
branch  4 taken 100%
branch  5 taken 0%
        -: 2902:                  ;
        -: 2903:
       13: 2904:                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
       13: 2904-block  0
branch  0 taken 31%
branch  1 taken 69%
        4: 2904-block  1
branch  2 taken 100%
branch  3 taken 0%
        -: 2905:                  {
    #####: 2906:                    if (p == pend) return REG_EESCAPE;
    $$$$$: 2906-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2906-block  1
        -: 2907:
    #####: 2908:                    PATFETCH (c1);
    $$$$$: 2908-block  0
    $$$$$: 2908-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 2908-block  2
    $$$$$: 2908-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 2908-block  4
    $$$$$: 2908-block  5
    #####: 2909:                    if (!(c1 == '+' || c1 == '?'))
    $$$$$: 2909-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2909-block  1
branch  2 never executed
branch  3 never executed
        -: 2910:                      {
    #####: 2911:                        PATUNFETCH;
    #####: 2912:                        PATUNFETCH;
    #####: 2913:                        break;
    $$$$$: 2913-block  0
        -: 2914:                      }
        -: 2915:
    #####: 2916:                    c = c1;
    #####: 2917:                  }
    $$$$$: 2917-block  0
        -: 2918:                else
        -: 2919:                  {
       13: 2920:                    PATUNFETCH;
       13: 2921:                    break;
       13: 2921-block  0
        -: 2922:                  }
        -: 2923:
        -: 2924:                /* If we get here, we found another repeat character.  */
        -: 2925:               }
        -: 2926:
        -: 2927:            /* Star, etc. applied to an empty pattern is equivalent
        -: 2928:               to an empty pattern.  */
       13: 2929:            if (!laststart)  
       13: 2929-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 2930:              break;
    $$$$$: 2930-block  0
        -: 2931:
        -: 2932:            /* Now we know whether or not zero matches is allowed
        -: 2933:               and also whether or not two or more matches is allowed.  */
       13: 2934:            if (many_times_ok)
       13: 2934-block  0
branch  0 taken 15%
branch  1 taken 85%
        -: 2935:              { /* More than one repetition is allowed, so put in at the
        -: 2936:                   end a backward relative jump from `b' to before the next
        -: 2937:                   jump we're going to put in below (which jumps from
        -: 2938:                   laststart to after this jump).  
        -: 2939:
        -: 2940:                   But if we are at the `*' in the exact sequence `.*\n',
        -: 2941:                   insert an unconditional jump backwards to the .,
        -: 2942:                   instead of the beginning of the loop.  This way we only
        -: 2943:                   push a failure point once, instead of every time
        -: 2944:                   through the loop.  */
        -: 2945:                assert (p - 1 > pattern);
        -: 2946:
        -: 2947:                /* Allocate the space for the jump.  */
       11: 2948:                GET_BUFFER_SPACE (3);
       11: 2948-block  0
       11: 2948-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 2948-block  2
    $$$$$: 2948-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 2948-block  4
    $$$$$: 2948-block  5
branch  4 never executed
branch  5 never executed
    $$$$$: 2948-block  6
    $$$$$: 2948-block  7
branch  6 never executed
branch  7 never executed
    $$$$$: 2948-block  8
    $$$$$: 2948-block  9
branch  8 never executed
branch  9 never executed
    $$$$$: 2948-block 10
branch 10 never executed
branch 11 never executed
    $$$$$: 2948-block 11
    $$$$$: 2948-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 2948-block 13
    $$$$$: 2948-block 14
branch 14 never executed
branch 15 never executed
    $$$$$: 2948-block 15
    $$$$$: 2948-block 16
    $$$$$: 2948-block 17
    $$$$$: 2948-block 18
        -: 2949:
        -: 2950:                /* We know we are not at the first character of the pattern,
        -: 2951:                   because laststart was nonzero.  And we've already
        -: 2952:                   incremented `p', by the way, to be the character after
        -: 2953:                   the `*'.  Do we have to do something analogous here
        -: 2954:                   for null bytes, because of RE_DOT_NOT_NULL?  */
       11: 2955:                if (TRANSLATE (*(p - 2)) == TRANSLATE ('.')
       11: 2955-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 2955-block  1
       11: 2955-block  2
       11: 2955-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 2955-block  4
       11: 2955-block  5
    $$$$$: 2955-block  6
branch  4 never executed
branch  5 never executed
       11: 2956:		    && zero_times_ok
       11: 2956-block  0
branch  0 taken 18%
branch  1 taken 82%
        2: 2957:                    && p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
        2: 2957-block  0
branch  0 taken 100%
branch  1 taken 0%
        2: 2957-block  1
branch  2 taken 0%
branch  3 taken 100%
        2: 2957-block  2
branch  4 taken 100%
branch  5 taken 0%
    $$$$$: 2957-block  3
        2: 2957-block  4
        2: 2957-block  5
branch  6 taken 100%
branch  7 taken 0%
    $$$$$: 2957-block  6
        2: 2957-block  7
        2: 2958:                    && !(syntax & RE_DOT_NEWLINE))
        2: 2958-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 2959:                  { /* We have .*\n.  */
    #####: 2960:                    STORE_JUMP (jump, b, laststart);
    #####: 2961:                    keep_string_p = true;
    #####: 2962:                  }
    $$$$$: 2962-block  0
        -: 2963:                else
        -: 2964:                  /* Anything else.  */
       11: 2965:                  STORE_JUMP (maybe_pop_jump, b, laststart - 3);
       11: 2965-block  0
        -: 2966:
        -: 2967:                /* We've added more stuff to the buffer.  */
       11: 2968:                b += 3;
       11: 2969:              }
       11: 2969-block  0
        -: 2970:
        -: 2971:            /* On failure, jump from laststart to b + 3, which will be the
        -: 2972:               end of the buffer after this jump is inserted.  */
       13: 2973:            GET_BUFFER_SPACE (3);
       13: 2973-block  0
       13: 2973-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 2973-block  2
    $$$$$: 2973-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 2973-block  4
    $$$$$: 2973-block  5
branch  4 never executed
branch  5 never executed
    $$$$$: 2973-block  6
    $$$$$: 2973-block  7
branch  6 never executed
branch  7 never executed
    $$$$$: 2973-block  8
    $$$$$: 2973-block  9
branch  8 never executed
branch  9 never executed
    $$$$$: 2973-block 10
branch 10 never executed
branch 11 never executed
    $$$$$: 2973-block 11
    $$$$$: 2973-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 2973-block 13
    $$$$$: 2973-block 14
branch 14 never executed
branch 15 never executed
    $$$$$: 2973-block 15
    $$$$$: 2973-block 16
    $$$$$: 2973-block 17
    $$$$$: 2973-block 18
       13: 2974:            INSERT_JUMP (keep_string_p ? on_failure_keep_string_jump
        -: 2975:                                       : on_failure_jump,
        -: 2976:                         laststart, b + 3);
       13: 2977:            pending_exact = 0;
       13: 2978:            b += 3;
        -: 2979:
       13: 2980:            if (!zero_times_ok)
       13: 2980-block  0
branch  0 taken 77%
branch  1 taken 23%
        -: 2981:              {
        -: 2982:                /* At least one repetition is required, so insert a
        -: 2983:                   `dummy_failure_jump' before the initial
        -: 2984:                   `on_failure_jump' instruction of the loop. This
        -: 2985:                   effects a skip over that instruction the first time
        -: 2986:                   we hit that loop.  */
        4: 2987:                GET_BUFFER_SPACE (3);
        3: 2987-block  0
        4: 2987-block  1
branch  0 taken 25%
branch  1 taken 75%
        1: 2987-block  2
        1: 2987-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 2987-block  4
        1: 2987-block  5
branch  4 taken 100%
branch  5 taken 0%
    $$$$$: 2987-block  6
        1: 2987-block  7
branch  6 taken 100%
branch  7 taken 0%
    $$$$$: 2987-block  8
        1: 2987-block  9
branch  8 taken 100%
branch  9 taken 0%
        1: 2987-block 10
branch 10 taken 0%
branch 11 taken 100%
        1: 2987-block 11
        1: 2987-block 12
branch 12 taken 0%
branch 13 taken 100%
        1: 2987-block 13
        1: 2987-block 14
branch 14 taken 100%
branch 15 taken 0%
    $$$$$: 2987-block 15
        1: 2987-block 16
        1: 2987-block 17
        1: 2987-block 18
        3: 2988:                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 6);
        3: 2989:                b += 3;
        3: 2990:              }
        3: 2990-block  0
        -: 2991:            }
       13: 2992:	  break;
       13: 2992-block  0
        -: 2993:
        -: 2994:
        -: 2995:	case '.':
        2: 2996:          laststart = b;
        2: 2997:          BUF_PUSH (anychar);
        2: 2997-block  0
        2: 2997-block  1
        2: 2997-block  2
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 2997-block  3
    $$$$$: 2997-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 2997-block  5
    $$$$$: 2997-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 2997-block  7
    $$$$$: 2997-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 2997-block  9
    $$$$$: 2997-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 2997-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 2997-block 12
    $$$$$: 2997-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 2997-block 14
    $$$$$: 2997-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 2997-block 16
    $$$$$: 2997-block 17
    $$$$$: 2997-block 18
    $$$$$: 2997-block 19
        2: 2997-block 20
        2: 2998:          break;
        2: 2998-block  0
        -: 2999:
        -: 3000:
        -: 3001:        case '[':
        -: 3002:          {
        6: 3003:            boolean had_char_class = false;
        -: 3004:
        6: 3005:            if (p == pend) return REG_EBRACK;
        6: 3005-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 3005-block  1
        -: 3006:
        -: 3007:            /* Ensure that we have enough space to push a charset: the
        -: 3008:               opcode, the length count, and the bitset; 34 bytes in all.  */
       10: 3009:	    GET_BUFFER_SPACE (34);
        6: 3009-block  0
       10: 3009-block  1
branch  0 taken 40%
branch  1 taken 60%
        4: 3009-block  2
        4: 3009-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 3009-block  4
        4: 3009-block  5
branch  4 taken 100%
branch  5 taken 0%
    $$$$$: 3009-block  6
        4: 3009-block  7
branch  6 taken 100%
branch  7 taken 0%
    $$$$$: 3009-block  8
        4: 3009-block  9
branch  8 taken 100%
branch  9 taken 0%
        4: 3009-block 10
branch 10 taken 50%
branch 11 taken 50%
        2: 3009-block 11
        4: 3009-block 12
branch 12 taken 25%
branch 13 taken 75%
        3: 3009-block 13
        4: 3009-block 14
branch 14 taken 25%
branch 15 taken 75%
        3: 3009-block 15
        4: 3009-block 16
        4: 3009-block 17
        4: 3009-block 18
        -: 3010:
        6: 3011:            laststart = b;
        -: 3012:
        -: 3013:            /* We test `*p == '^' twice, instead of using an if
        -: 3014:               statement, so we only need one BUF_PUSH.  */
        6: 3015:            BUF_PUSH (*p == '^' ? charset_not : charset); 
        6: 3015-block  0
        6: 3015-block  1
        6: 3015-block  2
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3015-block  3
    $$$$$: 3015-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3015-block  5
    $$$$$: 3015-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3015-block  7
    $$$$$: 3015-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3015-block  9
    $$$$$: 3015-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3015-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3015-block 12
    $$$$$: 3015-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3015-block 14
    $$$$$: 3015-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3015-block 16
    $$$$$: 3015-block 17
    $$$$$: 3015-block 18
    $$$$$: 3015-block 19
        6: 3015-block 20
        6: 3016:            if (*p == '^')
        6: 3016-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 3017:              p++;
    $$$$$: 3017-block  0
        -: 3018:
        -: 3019:            /* Remember the first position in the bracket expression.  */
        6: 3020:            p1 = p;
        -: 3021:
        -: 3022:            /* Push the number of bytes in the bitmap.  */
        6: 3023:            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
        6: 3023-block  0
        6: 3023-block  1
        6: 3023-block  2
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3023-block  3
    $$$$$: 3023-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3023-block  5
    $$$$$: 3023-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3023-block  7
    $$$$$: 3023-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3023-block  9
    $$$$$: 3023-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3023-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3023-block 12
    $$$$$: 3023-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3023-block 14
    $$$$$: 3023-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3023-block 16
    $$$$$: 3023-block 17
    $$$$$: 3023-block 18
    $$$$$: 3023-block 19
        6: 3023-block 20
        -: 3024:
        -: 3025:            /* Clear the whole map.  */
        6: 3026:            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
        -: 3027:
        -: 3028:            /* charset_not matches newline according to a syntax bit.  */
        6: 3029:            if ((re_opcode_t) b[-2] == charset_not
    $$$$$: 3029-block  0
branch  0 never executed
branch  1 never executed
        6: 3030:                && (syntax & RE_HAT_LISTS_NOT_NEWLINE))
        6: 3030-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 3031:              SET_LIST_BIT ('\n');
    $$$$$: 3031-block  0
        -: 3032:
        -: 3033:            /* Read in characters and ranges, setting map bits.  */
       22: 3034:            for (;;)
        6: 3034-block  0
       16: 3034-block  1
        -: 3035:              {
       22: 3036:                if (p == pend) return REG_EBRACK;
       22: 3036-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 3036-block  1
        -: 3037:
       22: 3038:                PATFETCH (c);
       22: 3038-block  0
       22: 3038-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 3038-block  2
       22: 3038-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 3038-block  4
       22: 3038-block  5
        -: 3039:
        -: 3040:                /* \ might escape characters inside [...] and [^...].  */
       22: 3041:                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
       22: 3041-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3041-block  1
branch  2 never executed
branch  3 never executed
        -: 3042:                  {
    #####: 3043:                    if (p == pend) return REG_EESCAPE;
    $$$$$: 3043-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3043-block  1
        -: 3044:
    #####: 3045:                    PATFETCH (c1);
    $$$$$: 3045-block  0
    $$$$$: 3045-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3045-block  2
    $$$$$: 3045-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3045-block  4
    $$$$$: 3045-block  5
    #####: 3046:                    SET_LIST_BIT (c1);
    #####: 3047:                    continue;
    $$$$$: 3047-block  0
        -: 3048:                  }
        -: 3049:
        -: 3050:                /* Could be the end of the bracket expression.  If it's
        -: 3051:                   not (i.e., when the bracket expression is `[]' so
        -: 3052:                   far), the ']' character bit gets set way below.  */
       22: 3053:                if (c == ']' && p != p1 + 1)
       22: 3053-block  0
branch  0 taken 27%
branch  1 taken 73%
        6: 3053-block  1
branch  2 taken 0%
branch  3 taken 100%
        6: 3054:                  break;
        6: 3054-block  0
        -: 3055:
        -: 3056:                /* Look ahead to see if it's a range when the last thing
        -: 3057:                   was a character class.  */
       16: 3058:                if (had_char_class && c == '-' && *p != ']')
       16: 3058-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3058-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3058-block  2
branch  4 never executed
branch  5 never executed
    #####: 3059:                  return REG_ERANGE;
    $$$$$: 3059-block  0
        -: 3060:
        -: 3061:                /* Look ahead to see if it's a range when the last thing
        -: 3062:                   was a character: if this is a hyphen not at the
        -: 3063:                   beginning or the end of a list, then it's the range
        -: 3064:                   operator.  */
       16: 3065:                if (c == '-' 
    $$$$$: 3065-block  0
branch  0 never executed
branch  1 never executed
       16: 3066:                    && !(p - 2 >= pattern && p[-2] == '[') 
       16: 3066-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3066-block  1
branch  2 never executed
branch  3 never executed
    #####: 3067:                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
    $$$$$: 3067-block  0
    $$$$$: 3067-block  1
    $$$$$: 3067-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3067-block  3
branch  2 never executed
branch  3 never executed
    #####: 3068:                    && *p != ']')
    $$$$$: 3068-block  0
    $$$$$: 3068-block  1
        -: 3069:                  {
    #####: 3070:                    reg_errcode_t ret
    #####: 3071:                      = compile_range (&p, pend, translate, syntax, b);
    #####: 3072:                    if (ret != REG_NOERROR) return ret;
    $$$$$: 3072-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3072-block  1
    #####: 3073:                  }
    $$$$$: 3073-block  0
        -: 3074:
       16: 3075:                else if (p[0] == '-' && p[1] != ']')
       16: 3075-block  0
branch  0 taken 50%
branch  1 taken 50%
        8: 3075-block  1
branch  2 taken 0%
branch  3 taken 100%
        -: 3076:                  { /* This handles ranges made up of characters only.  */
        -: 3077:                    reg_errcode_t ret;
        -: 3078:
        -: 3079:		    /* Move past the `-'.  */
        8: 3080:                    PATFETCH (c1);
        8: 3080-block  0
        8: 3080-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 3080-block  2
        8: 3080-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 3080-block  4
        8: 3080-block  5
        -: 3081:                    
        8: 3082:                    ret = compile_range (&p, pend, translate, syntax, b);
        8: 3083:                    if (ret != REG_NOERROR) return ret;
        8: 3083-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 3083-block  1
        8: 3084:                  }
        8: 3084-block  0
        -: 3085:
        -: 3086:                /* See if we're at the beginning of a possible character
        -: 3087:                   class.  */
        -: 3088:
        8: 3089:                else if (syntax & RE_CHAR_CLASSES && c == '[' && *p == ':')
        8: 3089-block  0
branch  0 taken 100%
branch  1 taken 0%
        8: 3089-block  1
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 3089-block  2
branch  4 never executed
branch  5 never executed
        -: 3090:                  { /* Leave room for the null.  */
        -: 3091:                    char str[CHAR_CLASS_MAX_LENGTH + 1];
        -: 3092:
    #####: 3093:                    PATFETCH (c);
    $$$$$: 3093-block  0
    $$$$$: 3093-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3093-block  2
    $$$$$: 3093-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3093-block  4
    $$$$$: 3093-block  5
    #####: 3094:                    c1 = 0;
        -: 3095:
        -: 3096:                    /* If pattern is `[[:'.  */
    #####: 3097:                    if (p == pend) return REG_EBRACK;
    $$$$$: 3097-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3097-block  1
        -: 3098:
    #####: 3099:                    for (;;)
    $$$$$: 3099-block  0
    $$$$$: 3099-block  1
        -: 3100:                      {
    #####: 3101:                        PATFETCH (c);
    $$$$$: 3101-block  0
    $$$$$: 3101-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3101-block  2
    $$$$$: 3101-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3101-block  4
    $$$$$: 3101-block  5
    #####: 3102:                        if (c == ':' || c == ']' || p == pend
    $$$$$: 3102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3102-block  2
branch  4 never executed
branch  5 never executed
    #####: 3103:                            || c1 == CHAR_CLASS_MAX_LENGTH)
    $$$$$: 3103-block  0
branch  0 never executed
branch  1 never executed
    #####: 3104:                          break;
    $$$$$: 3104-block  0
    #####: 3105:                        str[c1++] = c;
        -: 3106:                      }
    #####: 3107:                    str[c1] = '\0';
        -: 3108:
        -: 3109:                    /* If isn't a word bracketed by `[:' and:`]':
        -: 3110:                       undo the ending character, the letters, and leave 
        -: 3111:                       the leading `:' and `[' (but set bits for them).  */
    #####: 3112:                    if (c == ':' && *p == ']')
    $$$$$: 3112-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3112-block  1
branch  2 never executed
branch  3 never executed
        -: 3113:                      {
        -: 3114:                        int ch;
    #####: 3115:                        boolean is_alnum = STREQ (str, "alnum");
    #####: 3116:                        boolean is_alpha = STREQ (str, "alpha");
    #####: 3117:                        boolean is_blank = STREQ (str, "blank");
    #####: 3118:                        boolean is_cntrl = STREQ (str, "cntrl");
    #####: 3119:                        boolean is_digit = STREQ (str, "digit");
    #####: 3120:                        boolean is_graph = STREQ (str, "graph");
    #####: 3121:                        boolean is_lower = STREQ (str, "lower");
    #####: 3122:                        boolean is_print = STREQ (str, "print");
    #####: 3123:                        boolean is_punct = STREQ (str, "punct");
    #####: 3124:                        boolean is_space = STREQ (str, "space");
    #####: 3125:                        boolean is_upper = STREQ (str, "upper");
    #####: 3126:                        boolean is_xdigit = STREQ (str, "xdigit");
        -: 3127:                        
    #####: 3128:                        if (!IS_CHAR_CLASS (str)) return REG_ECTYPE;
    $$$$$: 3128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3128-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3128-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 3128-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 3128-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 3128-block  5
branch 10 never executed
branch 11 never executed
    $$$$$: 3128-block  6
branch 12 never executed
branch 13 never executed
    $$$$$: 3128-block  7
branch 14 never executed
branch 15 never executed
    $$$$$: 3128-block  8
branch 16 never executed
branch 17 never executed
    $$$$$: 3128-block  9
branch 18 never executed
branch 19 never executed
    $$$$$: 3128-block 10
branch 20 never executed
branch 21 never executed
    $$$$$: 3128-block 11
branch 22 never executed
branch 23 never executed
    $$$$$: 3128-block 12
        -: 3129:
        -: 3130:                        /* Throw away the ] at the end of the character
        -: 3131:                           class.  */
    #####: 3132:                        PATFETCH (c);					
    $$$$$: 3132-block  0
    $$$$$: 3132-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3132-block  2
    $$$$$: 3132-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3132-block  4
    $$$$$: 3132-block  5
        -: 3133:
    #####: 3134:                        if (p == pend) return REG_EBRACK;
    $$$$$: 3134-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3134-block  1
        -: 3135:
    #####: 3136:                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
    $$$$$: 3136-block  0
    $$$$$: 3136-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3136-block  2
        -: 3137:                          {
    #####: 3138:                            if (   (is_alnum  && ISALNUM (ch))
    $$$$$: 3138-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3138-block  1
    $$$$$: 3138-block  2
    #####: 3139:                                || (is_alpha  && ISALPHA (ch))
    $$$$$: 3139-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3139-block  1
branch  2 never executed
branch  3 never executed
    #####: 3140:                                || (is_blank  && ISBLANK (ch))
    $$$$$: 3140-block  0
    $$$$$: 3140-block  1
    $$$$$: 3140-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3140-block  3
branch  2 never executed
branch  3 never executed
    #####: 3141:                                || (is_cntrl  && ISCNTRL (ch))
    $$$$$: 3141-block  0
    $$$$$: 3141-block  1
    $$$$$: 3141-block  2
branch  0 never executed
branch  1 never executed
    #####: 3142:                                || (is_digit  && ISDIGIT (ch))
    $$$$$: 3142-block  0
    $$$$$: 3142-block  1
    $$$$$: 3142-block  2
branch  0 never executed
branch  1 never executed
    #####: 3143:                                || (is_graph  && ISGRAPH (ch))
    $$$$$: 3143-block  0
    $$$$$: 3143-block  1
    $$$$$: 3143-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3143-block  3
branch  2 never executed
branch  3 never executed
    #####: 3144:                                || (is_lower  && ISLOWER (ch))
    $$$$$: 3144-block  0
    $$$$$: 3144-block  1
    $$$$$: 3144-block  2
branch  0 never executed
branch  1 never executed
    #####: 3145:                                || (is_print  && ISPRINT (ch))
    $$$$$: 3145-block  0
    $$$$$: 3145-block  1
    $$$$$: 3145-block  2
branch  0 never executed
branch  1 never executed
    #####: 3146:                                || (is_punct  && ISPUNCT (ch))
    $$$$$: 3146-block  0
    $$$$$: 3146-block  1
    $$$$$: 3146-block  2
branch  0 never executed
branch  1 never executed
    #####: 3147:                                || (is_space  && ISSPACE (ch))
    $$$$$: 3147-block  0
    $$$$$: 3147-block  1
    $$$$$: 3147-block  2
branch  0 never executed
branch  1 never executed
    #####: 3148:                                || (is_upper  && ISUPPER (ch))
    $$$$$: 3148-block  0
    $$$$$: 3148-block  1
    $$$$$: 3148-block  2
branch  0 never executed
branch  1 never executed
    #####: 3149:                                || (is_xdigit && ISXDIGIT (ch)))
    $$$$$: 3149-block  0
    $$$$$: 3149-block  1
    $$$$$: 3149-block  2
branch  0 never executed
branch  1 never executed
    #####: 3150:                            SET_LIST_BIT (ch);
    $$$$$: 3150-block  0
    #####: 3151:                          }
    $$$$$: 3151-block  0
    #####: 3152:                        had_char_class = true;
    #####: 3153:                      }
    $$$$$: 3153-block  0
        -: 3154:                    else
        -: 3155:                      {
    #####: 3156:                        c1++;
    #####: 3157:                        while (c1--)    
    $$$$$: 3157-block  0
    $$$$$: 3157-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3157-block  2
    #####: 3158:                          PATUNFETCH;
    #####: 3159:                        SET_LIST_BIT ('[');
    #####: 3160:                        SET_LIST_BIT (':');
    #####: 3161:                        had_char_class = false;
    $$$$$: 3161-block  0
        -: 3162:                      }
    #####: 3163:                  }
    $$$$$: 3163-block  0
        -: 3164:                else
        -: 3165:                  {
        8: 3166:                    had_char_class = false;
        8: 3167:                    SET_LIST_BIT (c);
        8: 3167-block  0
        -: 3168:                  }
        -: 3169:              }
        -: 3170:
        -: 3171:            /* Discard any (non)matching list bytes that are all 0 at the
        -: 3172:               end of the map.  Decrease the map-length byte too.  */
      122: 3173:            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0) 
        6: 3173-block  0
      122: 3173-block  1
branch  0 taken 0%
branch  1 taken 100%
      122: 3173-block  2
      122: 3173-block  3
branch  2 taken 95%
branch  3 taken 5%
      116: 3173-block  4
      116: 3174:              b[-1]--; 
        6: 3175:            b += b[-1];
        -: 3176:          }
        6: 3177:          break;
        6: 3177-block  0
        -: 3178:
        -: 3179:
        -: 3180:	case '(':
        8: 3181:          if (syntax & RE_NO_BK_PARENS)
        8: 3181-block  0
branch  0 taken 50%
branch  1 taken 50%
        4: 3182:            goto handle_open;
        4: 3182-block  0
        -: 3183:          else
        4: 3184:            goto normal_char;
        4: 3184-block  0
        -: 3185:
        -: 3186:
        -: 3187:        case ')':
        8: 3188:          if (syntax & RE_NO_BK_PARENS)
        8: 3188-block  0
branch  0 taken 50%
branch  1 taken 50%
        4: 3189:            goto handle_close;
        4: 3189-block  0
        -: 3190:          else
        4: 3191:            goto normal_char;
        4: 3191-block  0
        -: 3192:
        -: 3193:
        -: 3194:        case '\n':
    #####: 3195:          if (syntax & RE_NEWLINE_ALT)
    $$$$$: 3195-block  0
branch  0 never executed
branch  1 never executed
    #####: 3196:            goto handle_alt;
    $$$$$: 3196-block  0
        -: 3197:          else
    #####: 3198:            goto normal_char;
    $$$$$: 3198-block  0
        -: 3199:
        -: 3200:
        -: 3201:	case '|':
       24: 3202:          if (syntax & RE_NO_BK_VBAR)
       24: 3202-block  0
branch  0 taken 50%
branch  1 taken 50%
       12: 3203:            goto handle_alt;
       12: 3203-block  0
        -: 3204:          else
       12: 3205:            goto normal_char;
       12: 3205-block  0
        -: 3206:
        -: 3207:
        -: 3208:        case '{':
        2: 3209:           if (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES)
        2: 3209-block  0
branch  0 taken 100%
branch  1 taken 0%
        2: 3209-block  1
branch  2 taken 50%
branch  3 taken 50%
        1: 3210:             goto handle_interval;
        1: 3210-block  0
        -: 3211:           else
        1: 3212:             goto normal_char;
        1: 3212-block  0
        -: 3213:
        -: 3214:
        -: 3215:        case '\\':
    #####: 3216:          if (p == pend) return REG_EESCAPE;
    $$$$$: 3216-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3216-block  1
        -: 3217:
        -: 3218:          /* Do not translate the character after the \, so that we can
        -: 3219:             distinguish, e.g., \B from \b, even if we normally would
        -: 3220:             translate, e.g., B to b.  */
    #####: 3221:          PATFETCH_RAW (c);
    $$$$$: 3221-block  0
    $$$$$: 3221-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3221-block  2
    $$$$$: 3221-block  3
        -: 3222:
    #####: 3223:          switch (c)
    $$$$$: 3223-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 3223-block  1
    $$$$$: 3223-block  2
    $$$$$: 3223-block  3
    $$$$$: 3223-block  4
    $$$$$: 3223-block  5
    $$$$$: 3223-block  6
    $$$$$: 3223-block  7
    $$$$$: 3223-block  8
    $$$$$: 3223-block  9
        -: 3224:            {
        -: 3225:            case '(':
    #####: 3226:              if (syntax & RE_NO_BK_PARENS)
    $$$$$: 3226-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3226-block  1
    #####: 3227:                goto normal_backslash;
    $$$$$: 3227-block  0
        -: 3228:
        -: 3229:            handle_open:
        4: 3230:              bufp->re_nsub++;
        4: 3231:              regnum++;
        -: 3232:
        4: 3233:              if (COMPILE_STACK_FULL)
        4: 3233-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 3234:                { 
    #####: 3235:                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
        -: 3236:                            compile_stack_elt_t);
    #####: 3237:                  if (compile_stack.stack == NULL) return REG_ESPACE;
    $$$$$: 3237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3237-block  1
        -: 3238:
    #####: 3239:                  compile_stack.size <<= 1;
    #####: 3240:                }
    $$$$$: 3240-block  0
        -: 3241:
        -: 3242:              /* These are the values to restore when we hit end of this
        -: 3243:                 group.  They are all relative offsets, so that if the
        -: 3244:                 whole pattern moves because of realloc, they will still
        -: 3245:                 be valid.  */
        4: 3246:              COMPILE_STACK_TOP.begalt_offset = begalt - bufp->buffer;
        4: 3247:              COMPILE_STACK_TOP.fixup_alt_jump 
        4: 3248:                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
        4: 3248-block  0
branch  0 taken 75%
branch  1 taken 25%
        3: 3248-block  1
        1: 3248-block  2
        4: 3249:              COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer;
        4: 3250:              COMPILE_STACK_TOP.regnum = regnum;
        -: 3251:
        -: 3252:              /* We will eventually replace the 0 with the number of
        -: 3253:                 groups inner to this one.  But do not push a
        -: 3254:                 start_memory for groups beyond the last one we can
        -: 3255:                 represent in the compiled pattern.  */
        4: 3256:              if (regnum <= MAX_REGNUM)
        4: 3256-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 3257:                {
        4: 3258:                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2;
        4: 3259:                  BUF_PUSH_3 (start_memory, regnum, 0);
        4: 3259-block  0
        4: 3259-block  1
        4: 3259-block  2
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3259-block  3
    $$$$$: 3259-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3259-block  5
    $$$$$: 3259-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3259-block  7
    $$$$$: 3259-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3259-block  9
    $$$$$: 3259-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3259-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3259-block 12
    $$$$$: 3259-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3259-block 14
    $$$$$: 3259-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3259-block 16
    $$$$$: 3259-block 17
    $$$$$: 3259-block 18
    $$$$$: 3259-block 19
        4: 3259-block 20
        4: 3260:                }
        4: 3260-block  0
        -: 3261:                
        4: 3262:              compile_stack.avail++;
        -: 3263:
        4: 3264:              fixup_alt_jump = 0;
        4: 3265:              laststart = 0;
        4: 3266:              begalt = b;
        -: 3267:	      /* If we've reached MAX_REGNUM groups, then this open
        -: 3268:		 won't actually generate any code, so we'll have to
        -: 3269:		 clear pending_exact explicitly.  */
        4: 3270:	      pending_exact = 0;
        4: 3271:              break;
        4: 3271-block  0
        -: 3272:
        -: 3273:
        -: 3274:            case ')':
    #####: 3275:              if (syntax & RE_NO_BK_PARENS) goto normal_backslash;
    $$$$$: 3275-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3275-block  1
        -: 3276:
    #####: 3277:              if (COMPILE_STACK_EMPTY)
    $$$$$: 3277-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3277-block  1
    #####: 3278:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
    $$$$$: 3278-block  0
branch  0 never executed
branch  1 never executed
    #####: 3279:                  goto normal_backslash;
    $$$$$: 3279-block  0
        -: 3280:                else
    #####: 3281:                  return REG_ERPAREN;
    $$$$$: 3281-block  0
        -: 3282:
        -: 3283:            handle_close:
        4: 3284:              if (fixup_alt_jump)
        4: 3284-block  0
branch  0 taken 50%
branch  1 taken 50%
        -: 3285:                { /* Push a dummy failure point at the end of the
        -: 3286:                     alternative for a possible future
        -: 3287:                     `pop_failure_jump' to pop.  See comments at
        -: 3288:                     `push_dummy_failure' in `re_match_2'.  */
        2: 3289:                  BUF_PUSH (push_dummy_failure);
        2: 3289-block  0
        2: 3289-block  1
        2: 3289-block  2
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3289-block  3
    $$$$$: 3289-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3289-block  5
    $$$$$: 3289-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3289-block  7
    $$$$$: 3289-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3289-block  9
    $$$$$: 3289-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3289-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3289-block 12
    $$$$$: 3289-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3289-block 14
    $$$$$: 3289-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3289-block 16
    $$$$$: 3289-block 17
    $$$$$: 3289-block 18
    $$$$$: 3289-block 19
        2: 3289-block 20
        -: 3290:                  
        -: 3291:                  /* We allocated space for this jump when we assigned
        -: 3292:                     to `fixup_alt_jump', in the `handle_alt' case below.  */
        2: 3293:                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1);
        2: 3294:                }
        2: 3294-block  0
        -: 3295:
        -: 3296:              /* See similar code for backslashed left paren above.  */
        4: 3297:              if (COMPILE_STACK_EMPTY)
        4: 3297-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 3298:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
    $$$$$: 3298-block  0
branch  0 never executed
branch  1 never executed
    #####: 3299:                  goto normal_char;
    $$$$$: 3299-block  0
        -: 3300:                else
    #####: 3301:                  return REG_ERPAREN;
    $$$$$: 3301-block  0
        -: 3302:
        -: 3303:              /* Since we just checked for an empty stack above, this
        -: 3304:                 ``can't happen''.  */
        -: 3305:              assert (compile_stack.avail != 0);
        -: 3306:              {
        -: 3307:                /* We don't just want to restore into `regnum', because
        -: 3308:                   later groups should continue to be numbered higher,
        -: 3309:                   as in `(ab)c(de)' -- the second group is #2.  */
        -: 3310:                regnum_t this_group_regnum;
        -: 3311:
        4: 3312:                compile_stack.avail--;		
        4: 3313:                begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset;
        -: 3314:                fixup_alt_jump
        4: 3315:                  = COMPILE_STACK_TOP.fixup_alt_jump
        4: 3315-block  0
branch  0 taken 75%
branch  1 taken 25%
        3: 3315-block  1
        1: 3315-block  2
        3: 3316:                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1 
        -: 3317:                    : 0;
        4: 3318:                laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset;
        4: 3319:                this_group_regnum = COMPILE_STACK_TOP.regnum;
        -: 3320:		/* If we've reached MAX_REGNUM groups, then this open
        -: 3321:		   won't actually generate any code, so we'll have to
        -: 3322:		   clear pending_exact explicitly.  */
        4: 3323:		pending_exact = 0;
        -: 3324:
        -: 3325:                /* We're at the end of the group, so now we know how many
        -: 3326:                   groups were inside this one.  */
        4: 3327:                if (this_group_regnum <= MAX_REGNUM)
        4: 3327-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 3328:                  {
        4: 3329:                    unsigned char *inner_group_loc
        4: 3330:                      = bufp->buffer + COMPILE_STACK_TOP.inner_group_offset;
        -: 3331:                    
        4: 3332:                    *inner_group_loc = regnum - this_group_regnum;
        4: 3333:                    BUF_PUSH_3 (stop_memory, this_group_regnum,
        4: 3333-block  0
        4: 3333-block  1
        4: 3333-block  2
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3333-block  3
    $$$$$: 3333-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3333-block  5
    $$$$$: 3333-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3333-block  7
    $$$$$: 3333-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3333-block  9
    $$$$$: 3333-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3333-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3333-block 12
    $$$$$: 3333-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3333-block 14
    $$$$$: 3333-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3333-block 16
    $$$$$: 3333-block 17
    $$$$$: 3333-block 18
    $$$$$: 3333-block 19
        4: 3333-block 20
        -: 3334:                                regnum - this_group_regnum);
        4: 3335:                  }
        4: 3335-block  0
        -: 3336:              }
        4: 3337:              break;
        4: 3337-block  0
        -: 3338:
        -: 3339:
        -: 3340:            case '|':					/* `\|'.  */
    #####: 3341:              if (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR)
    $$$$$: 3341-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3341-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3341-block  2
    #####: 3342:                goto normal_backslash;
    $$$$$: 3342-block  0
        -: 3343:            handle_alt:
       12: 3344:              if (syntax & RE_LIMITED_OPS)
       12: 3344-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 3345:                goto normal_char;
    $$$$$: 3345-block  0
        -: 3346:
        -: 3347:              /* Insert before the previous alternative a jump which
        -: 3348:                 jumps to this alternative if the former fails.  */
       12: 3349:              GET_BUFFER_SPACE (3);
       12: 3349-block  0
       12: 3349-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3349-block  2
    $$$$$: 3349-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3349-block  4
    $$$$$: 3349-block  5
branch  4 never executed
branch  5 never executed
    $$$$$: 3349-block  6
    $$$$$: 3349-block  7
branch  6 never executed
branch  7 never executed
    $$$$$: 3349-block  8
    $$$$$: 3349-block  9
branch  8 never executed
branch  9 never executed
    $$$$$: 3349-block 10
branch 10 never executed
branch 11 never executed
    $$$$$: 3349-block 11
    $$$$$: 3349-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 3349-block 13
    $$$$$: 3349-block 14
branch 14 never executed
branch 15 never executed
    $$$$$: 3349-block 15
    $$$$$: 3349-block 16
    $$$$$: 3349-block 17
    $$$$$: 3349-block 18
       12: 3350:              INSERT_JUMP (on_failure_jump, begalt, b + 6);
       12: 3351:              pending_exact = 0;
       12: 3352:              b += 3;
        -: 3353:
        -: 3354:              /* The alternative before this one has a jump after it
        -: 3355:                 which gets executed if it gets matched.  Adjust that
        -: 3356:                 jump so it will jump to this alternative's analogous
        -: 3357:                 jump (put in below, which in turn will jump to the next
        -: 3358:                 (if any) alternative's such jump, etc.).  The last such
        -: 3359:                 jump jumps to the correct final destination.  A picture:
        -: 3360:                          _____ _____ 
        -: 3361:                          |   | |   |   
        -: 3362:                          |   v |   v 
        -: 3363:                         a | b   | c   
        -: 3364:
        -: 3365:                 If we are at `b', then fixup_alt_jump right now points to a
        -: 3366:                 three-byte space after `a'.  We'll put in the jump, set
        -: 3367:                 fixup_alt_jump to right after `b', and leave behind three
        -: 3368:                 bytes which we'll fill in when we get to after `c'.  */
        -: 3369:
       12: 3370:              if (fixup_alt_jump)
       12: 3370-block  0
branch  0 taken 75%
branch  1 taken 25%
        9: 3371:                STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
        9: 3371-block  0
        -: 3372:
        -: 3373:              /* Mark and leave space for a jump after this alternative,
        -: 3374:                 to be filled in later either by next alternative or
        -: 3375:                 when know we're at the end of a series of alternatives.  */
       12: 3376:              fixup_alt_jump = b;
       13: 3377:              GET_BUFFER_SPACE (3);
       12: 3377-block  0
       13: 3377-block  1
branch  0 taken 8%
branch  1 taken 92%
        1: 3377-block  2
        1: 3377-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 3377-block  4
        1: 3377-block  5
branch  4 taken 100%
branch  5 taken 0%
    $$$$$: 3377-block  6
        1: 3377-block  7
branch  6 taken 100%
branch  7 taken 0%
    $$$$$: 3377-block  8
        1: 3377-block  9
branch  8 taken 0%
branch  9 taken 100%
        1: 3377-block 10
branch 10 taken 0%
branch 11 taken 100%
        1: 3377-block 11
        1: 3377-block 12
branch 12 taken 0%
branch 13 taken 100%
        1: 3377-block 13
        1: 3377-block 14
branch 14 taken 100%
branch 15 taken 0%
    $$$$$: 3377-block 15
        1: 3377-block 16
        1: 3377-block 17
        1: 3377-block 18
       12: 3378:              b += 3;
        -: 3379:
       12: 3380:              laststart = 0;
       12: 3381:              begalt = b;
       12: 3382:              break;
       12: 3382-block  0
        -: 3383:
        -: 3384:
        -: 3385:            case '{': 
        -: 3386:              /* If \{ is a literal.  */
    #####: 3387:              if (!(syntax & RE_INTERVALS)
    $$$$$: 3387-block  0
    $$$$$: 3387-block  1
        -: 3388:                     /* If we're at `\{' and it's not the open-interval 
        -: 3389:                        operator.  */
    #####: 3390:                  || ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
    $$$$$: 3390-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3390-block  1
branch  2 never executed
branch  3 never executed
    #####: 3391:                  || (p - 2 == pattern  &&  p == pend))
    $$$$$: 3391-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3391-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3391-block  2
    #####: 3392:                goto normal_backslash;
    $$$$$: 3392-block  0
        -: 3393:
        -: 3394:            handle_interval:
        -: 3395:              {
        -: 3396:                /* If got here, then the syntax allows intervals.  */
        -: 3397:
        -: 3398:                /* At least (most) this many matches must be made.  */
        1: 3399:                int lower_bound = -1, upper_bound = -1;
        -: 3400:
        1: 3401:                beg_interval = p - 1;
        -: 3402:
        1: 3403:                if (p == pend)
        1: 3403-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 3404:                  {
    #####: 3405:                    if (syntax & RE_NO_BK_BRACES)
    $$$$$: 3405-block  0
branch  0 never executed
branch  1 never executed
    #####: 3406:                      goto unfetch_interval;
    $$$$$: 3406-block  0
        -: 3407:                    else
    #####: 3408:                      return REG_EBRACE;
    $$$$$: 3408-block  0
        -: 3409:                  }
        -: 3410:
        2: 3411:                GET_UNSIGNED_NUMBER (lower_bound);
        1: 3411-block  0
branch  0 taken 0%
branch  1 taken 100%
        1: 3411-block  1
        1: 3411-block  2
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 3411-block  3
        1: 3411-block  4
branch  4 taken 100%
branch  5 taken 0%
    $$$$$: 3411-block  5
        1: 3411-block  6
        1: 3411-block  7
        2: 3411-block  8
branch  6 taken 50%
branch  7 taken 50%
        1: 3411-block  9
branch  8 taken 0%
branch  9 taken 100%
        1: 3411-block 10
        1: 3411-block 11
branch 10 taken 100%
branch 11 taken 0%
    $$$$$: 3411-block 12
        1: 3411-block 13
        1: 3411-block 14
branch 12 taken 100%
branch 13 taken 0%
    $$$$$: 3411-block 15
        1: 3411-block 16
branch 14 taken 100%
branch 15 taken 0%
    $$$$$: 3411-block 17
        1: 3411-block 18
        1: 3411-block 19
        1: 3411-block 20
        -: 3412:
        1: 3413:                if (c == ',')
        1: 3413-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 3414:                  {
        2: 3415:                    GET_UNSIGNED_NUMBER (upper_bound);
        1: 3415-block  0
branch  0 taken 0%
branch  1 taken 100%
        1: 3415-block  1
        1: 3415-block  2
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 3415-block  3
        1: 3415-block  4
branch  4 taken 100%
branch  5 taken 0%
    $$$$$: 3415-block  5
        1: 3415-block  6
        1: 3415-block  7
        2: 3415-block  8
branch  6 taken 50%
branch  7 taken 50%
        1: 3415-block  9
branch  8 taken 0%
branch  9 taken 100%
        1: 3415-block 10
        1: 3415-block 11
branch 10 taken 100%
branch 11 taken 0%
    $$$$$: 3415-block 12
        1: 3415-block 13
        1: 3415-block 14
branch 12 taken 100%
branch 13 taken 0%
    $$$$$: 3415-block 15
        1: 3415-block 16
branch 14 taken 100%
branch 15 taken 0%
    $$$$$: 3415-block 17
        1: 3415-block 18
        1: 3415-block 19
        1: 3415-block 20
        1: 3416:                    if (upper_bound < 0) upper_bound = RE_DUP_MAX;
        1: 3416-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3416-block  1
        1: 3417:                  }
        1: 3417-block  0
        -: 3418:                else
        -: 3419:                  /* Interval such as `{1}' => match exactly once. */
    #####: 3420:                  upper_bound = lower_bound;
    $$$$$: 3420-block  0
        -: 3421:
        1: 3422:                if (lower_bound < 0 || upper_bound > RE_DUP_MAX
        1: 3422-block  0
branch  0 taken 100%
branch  1 taken 0%
        1: 3422-block  1
branch  2 taken 0%
branch  3 taken 100%
        1: 3423:                    || lower_bound > upper_bound)
        1: 3423-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 3424:                  {
    #####: 3425:                    if (syntax & RE_NO_BK_BRACES)
    $$$$$: 3425-block  0
branch  0 never executed
branch  1 never executed
    #####: 3426:                      goto unfetch_interval;
    $$$$$: 3426-block  0
        -: 3427:                    else 
    #####: 3428:                      return REG_BADBR;
    $$$$$: 3428-block  0
        -: 3429:                  }
        -: 3430:
        1: 3431:                if (!(syntax & RE_NO_BK_BRACES)) 
        1: 3431-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 3432:                  {
    #####: 3433:                    if (c != '\\') return REG_EBRACE;
    $$$$$: 3433-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3433-block  1
        -: 3434:
    #####: 3435:                    PATFETCH (c);
    $$$$$: 3435-block  0
    $$$$$: 3435-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3435-block  2
    $$$$$: 3435-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3435-block  4
    $$$$$: 3435-block  5
    #####: 3436:                  }
    $$$$$: 3436-block  0
        -: 3437:
        1: 3438:                if (c != '}')
        1: 3438-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 3439:                  {
    #####: 3440:                    if (syntax & RE_NO_BK_BRACES)
    $$$$$: 3440-block  0
branch  0 never executed
branch  1 never executed
    #####: 3441:                      goto unfetch_interval;
    $$$$$: 3441-block  0
        -: 3442:                    else 
    #####: 3443:                      return REG_BADBR;
    $$$$$: 3443-block  0
        -: 3444:                  }
        -: 3445:
        -: 3446:                /* We just parsed a valid interval.  */
        -: 3447:
        -: 3448:                /* If it's invalid to have no preceding re.  */
        1: 3449:                if (!laststart)
        1: 3449-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 3450:                  {
    #####: 3451:                    if (syntax & RE_CONTEXT_INVALID_OPS)
    $$$$$: 3451-block  0
branch  0 never executed
branch  1 never executed
    #####: 3452:                      return REG_BADRPT;
    $$$$$: 3452-block  0
    #####: 3453:                    else if (syntax & RE_CONTEXT_INDEP_OPS)
    $$$$$: 3453-block  0
branch  0 never executed
branch  1 never executed
    #####: 3454:                      laststart = b;
    $$$$$: 3454-block  0
        -: 3455:                    else
    #####: 3456:                      goto unfetch_interval;
    $$$$$: 3456-block  0
    #####: 3457:                  }
    $$$$$: 3457-block  0
        -: 3458:
        -: 3459:                /* If the upper bound is zero, don't want to succeed at
        -: 3460:                   all; jump from `laststart' to `b + 3', which will be
        -: 3461:                   the end of the buffer after we insert the jump.  */
        1: 3462:                 if (upper_bound == 0)
        1: 3462-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 3463:                   {
    #####: 3464:                     GET_BUFFER_SPACE (3);
    $$$$$: 3464-block  0
    $$$$$: 3464-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3464-block  2
    $$$$$: 3464-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3464-block  4
    $$$$$: 3464-block  5
branch  4 never executed
branch  5 never executed
    $$$$$: 3464-block  6
    $$$$$: 3464-block  7
branch  6 never executed
branch  7 never executed
    $$$$$: 3464-block  8
    $$$$$: 3464-block  9
branch  8 never executed
branch  9 never executed
    $$$$$: 3464-block 10
branch 10 never executed
branch 11 never executed
    $$$$$: 3464-block 11
    $$$$$: 3464-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 3464-block 13
    $$$$$: 3464-block 14
branch 14 never executed
branch 15 never executed
    $$$$$: 3464-block 15
    $$$$$: 3464-block 16
    $$$$$: 3464-block 17
    $$$$$: 3464-block 18
    #####: 3465:                     INSERT_JUMP (jump, laststart, b + 3);
    #####: 3466:                     b += 3;
    #####: 3467:                   }
    $$$$$: 3467-block  0
        -: 3468:
        -: 3469:                 /* Otherwise, we have a nontrivial interval.  When
        -: 3470:                    we're all done, the pattern will look like:
        -: 3471:                      set_number_at <jump count> <upper bound>
        -: 3472:                      set_number_at <succeed_n count> <lower bound>
        -: 3473:                      succeed_n <after jump addr> <succed_n count>
        -: 3474:                      <body of loop>
        -: 3475:                      jump_n <succeed_n addr> <jump count>
        -: 3476:                    (The upper bound and `jump_n' are omitted if
        -: 3477:                    `upper_bound' is 1, though.)  */
        -: 3478:                 else 
        -: 3479:                   { /* If the upper bound is > 1, we need to insert
        -: 3480:                        more at the end of the loop.  */
        1: 3481:                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
        -: 3482:
        1: 3483:                     GET_BUFFER_SPACE (nbytes);
        1: 3483-block  0
        1: 3483-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3483-block  2
    $$$$$: 3483-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3483-block  4
    $$$$$: 3483-block  5
branch  4 never executed
branch  5 never executed
    $$$$$: 3483-block  6
    $$$$$: 3483-block  7
branch  6 never executed
branch  7 never executed
    $$$$$: 3483-block  8
    $$$$$: 3483-block  9
branch  8 never executed
branch  9 never executed
    $$$$$: 3483-block 10
branch 10 never executed
branch 11 never executed
    $$$$$: 3483-block 11
    $$$$$: 3483-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 3483-block 13
    $$$$$: 3483-block 14
branch 14 never executed
branch 15 never executed
    $$$$$: 3483-block 15
    $$$$$: 3483-block 16
    $$$$$: 3483-block 17
    $$$$$: 3483-block 18
        -: 3484:
        -: 3485:                     /* Initialize lower bound of the `succeed_n', even
        -: 3486:                        though it will be set during matching by its
        -: 3487:                        attendant `set_number_at' (inserted next),
        -: 3488:                        because `re_compile_fastmap' needs to know.
        -: 3489:                        Jump to the `jump_n' we might insert below.  */
        1: 3490:                     INSERT_JUMP2 (succeed_n, laststart,
        -: 3491:                                   b + 5 + (upper_bound > 1) * 5,
        -: 3492:                                   lower_bound);
        1: 3493:                     b += 5;
        -: 3494:
        -: 3495:                     /* Code to initialize the lower bound.  Insert 
        -: 3496:                        before the `succeed_n'.  The `5' is the last two
        -: 3497:                        bytes of this `set_number_at', plus 3 bytes of
        -: 3498:                        the following `succeed_n'.  */
        1: 3499:                     insert_op2 (set_number_at, laststart, 5, lower_bound, b);
        1: 3500:                     b += 5;
        -: 3501:
        1: 3502:                     if (upper_bound > 1)
        1: 3502-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 3503:                       { /* More than one repetition is allowed, so
        -: 3504:                            append a backward jump to the `succeed_n'
        -: 3505:                            that starts this interval.
        -: 3506:                            
        -: 3507:                            When we've reached this during matching,
        -: 3508:                            we'll have matched the interval once, so
        -: 3509:                            jump back only `upper_bound - 1' times.  */
        1: 3510:                         STORE_JUMP2 (jump_n, b, laststart + 5,
        -: 3511:                                      upper_bound - 1);
        1: 3512:                         b += 5;
        -: 3513:
        -: 3514:                         /* The location we want to set is the second
        -: 3515:                            parameter of the `jump_n'; that is `b-2' as
        -: 3516:                            an absolute address.  `laststart' will be
        -: 3517:                            the `set_number_at' we're about to insert;
        -: 3518:                            `laststart+3' the number to set, the source
        -: 3519:                            for the relative address.  But we are
        -: 3520:                            inserting into the middle of the pattern --
        -: 3521:                            so everything is getting moved up by 5.
        -: 3522:                            Conclusion: (b - 2) - (laststart + 3) + 5,
        -: 3523:                            i.e., b - laststart.
        -: 3524:                            
        -: 3525:                            We insert this at the beginning of the loop
        -: 3526:                            so that if we fail during matching, we'll
        -: 3527:                            reinitialize the bounds.  */
        2: 3528:                         insert_op2 (set_number_at, laststart, b - laststart,
        1: 3529:                                     upper_bound - 1, b);
        1: 3530:                         b += 5;
        1: 3531:                       }
        1: 3531-block  0
        -: 3532:                   }
        1: 3533:                pending_exact = 0;
        1: 3534:                beg_interval = NULL;
        -: 3535:              }
        1: 3536:              break;
        1: 3536-block  0
        -: 3537:
        -: 3538:            unfetch_interval:
        -: 3539:              /* If an invalid interval, match the characters as literals.  */
        -: 3540:               assert (beg_interval);
    #####: 3541:               p = beg_interval;
    #####: 3542:               beg_interval = NULL;
        -: 3543:
        -: 3544:               /* normal_char and normal_backslash need `c'.  */
    #####: 3545:               PATFETCH (c);	
    $$$$$: 3545-block  0
    $$$$$: 3545-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3545-block  2
    $$$$$: 3545-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3545-block  4
    $$$$$: 3545-block  5
        -: 3546:
    #####: 3547:               if (!(syntax & RE_NO_BK_BRACES))
    $$$$$: 3547-block  0
branch  0 never executed
branch  1 never executed
        -: 3548:                 {
    #####: 3549:                   if (p > pattern  &&  p[-1] == '\\')
    $$$$$: 3549-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3549-block  1
branch  2 never executed
branch  3 never executed
    #####: 3550:                     goto normal_backslash;
    $$$$$: 3550-block  0
    #####: 3551:                 }
    $$$$$: 3551-block  0
    #####: 3552:               goto normal_char;
    $$$$$: 3552-block  0
        -: 3553:
        -: 3554:#ifdef emacs
        -: 3555:            /* There is no way to specify the before_dot and after_dot
        -: 3556:               operators.  rms says this is ok.  --karl  */
        -: 3557:            case '=':
        -: 3558:              BUF_PUSH (at_dot);
        -: 3559:              break;
        -: 3560:
        -: 3561:            case 's':	
        -: 3562:              laststart = b;
        -: 3563:              PATFETCH (c);
        -: 3564:              BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]);
        -: 3565:              break;
        -: 3566:
        -: 3567:            case 'S':
        -: 3568:              laststart = b;
        -: 3569:              PATFETCH (c);
        -: 3570:              BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]);
        -: 3571:              break;
        -: 3572:#endif /* emacs */
        -: 3573:
        -: 3574:
        -: 3575:            case 'w':
    #####: 3576:              laststart = b;
    #####: 3577:              BUF_PUSH (wordchar);
    $$$$$: 3577-block  0
    $$$$$: 3577-block  1
    $$$$$: 3577-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3577-block  3
    $$$$$: 3577-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3577-block  5
    $$$$$: 3577-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3577-block  7
    $$$$$: 3577-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3577-block  9
    $$$$$: 3577-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3577-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3577-block 12
    $$$$$: 3577-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3577-block 14
    $$$$$: 3577-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3577-block 16
    $$$$$: 3577-block 17
    $$$$$: 3577-block 18
    $$$$$: 3577-block 19
    $$$$$: 3577-block 20
    #####: 3578:              break;
    $$$$$: 3578-block  0
        -: 3579:
        -: 3580:
        -: 3581:            case 'W':
    #####: 3582:              laststart = b;
    #####: 3583:              BUF_PUSH (notwordchar);
    $$$$$: 3583-block  0
    $$$$$: 3583-block  1
    $$$$$: 3583-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3583-block  3
    $$$$$: 3583-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3583-block  5
    $$$$$: 3583-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3583-block  7
    $$$$$: 3583-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3583-block  9
    $$$$$: 3583-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3583-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3583-block 12
    $$$$$: 3583-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3583-block 14
    $$$$$: 3583-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3583-block 16
    $$$$$: 3583-block 17
    $$$$$: 3583-block 18
    $$$$$: 3583-block 19
    $$$$$: 3583-block 20
    #####: 3584:              break;
    $$$$$: 3584-block  0
        -: 3585:
        -: 3586:
        -: 3587:            case '<':
    #####: 3588:              BUF_PUSH (wordbeg);
    $$$$$: 3588-block  0
    $$$$$: 3588-block  1
    $$$$$: 3588-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3588-block  3
    $$$$$: 3588-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3588-block  5
    $$$$$: 3588-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3588-block  7
    $$$$$: 3588-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3588-block  9
    $$$$$: 3588-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3588-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3588-block 12
    $$$$$: 3588-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3588-block 14
    $$$$$: 3588-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3588-block 16
    $$$$$: 3588-block 17
    $$$$$: 3588-block 18
    $$$$$: 3588-block 19
    $$$$$: 3588-block 20
    #####: 3589:              break;
    $$$$$: 3589-block  0
        -: 3590:
        -: 3591:            case '>':
    #####: 3592:              BUF_PUSH (wordend);
    $$$$$: 3592-block  0
    $$$$$: 3592-block  1
    $$$$$: 3592-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3592-block  3
    $$$$$: 3592-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3592-block  5
    $$$$$: 3592-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3592-block  7
    $$$$$: 3592-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3592-block  9
    $$$$$: 3592-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3592-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3592-block 12
    $$$$$: 3592-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3592-block 14
    $$$$$: 3592-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3592-block 16
    $$$$$: 3592-block 17
    $$$$$: 3592-block 18
    $$$$$: 3592-block 19
    $$$$$: 3592-block 20
    #####: 3593:              break;
    $$$$$: 3593-block  0
        -: 3594:
        -: 3595:            case 'b':
    #####: 3596:              BUF_PUSH (wordbound);
    $$$$$: 3596-block  0
    $$$$$: 3596-block  1
    $$$$$: 3596-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3596-block  3
    $$$$$: 3596-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3596-block  5
    $$$$$: 3596-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3596-block  7
    $$$$$: 3596-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3596-block  9
    $$$$$: 3596-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3596-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3596-block 12
    $$$$$: 3596-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3596-block 14
    $$$$$: 3596-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3596-block 16
    $$$$$: 3596-block 17
    $$$$$: 3596-block 18
    $$$$$: 3596-block 19
    $$$$$: 3596-block 20
    #####: 3597:              break;
    $$$$$: 3597-block  0
        -: 3598:
        -: 3599:            case 'B':
    #####: 3600:              BUF_PUSH (notwordbound);
    $$$$$: 3600-block  0
    $$$$$: 3600-block  1
    $$$$$: 3600-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3600-block  3
    $$$$$: 3600-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3600-block  5
    $$$$$: 3600-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3600-block  7
    $$$$$: 3600-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3600-block  9
    $$$$$: 3600-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3600-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3600-block 12
    $$$$$: 3600-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3600-block 14
    $$$$$: 3600-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3600-block 16
    $$$$$: 3600-block 17
    $$$$$: 3600-block 18
    $$$$$: 3600-block 19
    $$$$$: 3600-block 20
    #####: 3601:              break;
    $$$$$: 3601-block  0
        -: 3602:
        -: 3603:            case '`':
    #####: 3604:              BUF_PUSH (begbuf);
    $$$$$: 3604-block  0
    $$$$$: 3604-block  1
    $$$$$: 3604-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3604-block  3
    $$$$$: 3604-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3604-block  5
    $$$$$: 3604-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3604-block  7
    $$$$$: 3604-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3604-block  9
    $$$$$: 3604-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3604-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3604-block 12
    $$$$$: 3604-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3604-block 14
    $$$$$: 3604-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3604-block 16
    $$$$$: 3604-block 17
    $$$$$: 3604-block 18
    $$$$$: 3604-block 19
    $$$$$: 3604-block 20
    #####: 3605:              break;
    $$$$$: 3605-block  0
        -: 3606:
        -: 3607:            case '\'':
    #####: 3608:              BUF_PUSH (endbuf);
    $$$$$: 3608-block  0
    $$$$$: 3608-block  1
    $$$$$: 3608-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3608-block  3
    $$$$$: 3608-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3608-block  5
    $$$$$: 3608-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3608-block  7
    $$$$$: 3608-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3608-block  9
    $$$$$: 3608-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3608-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3608-block 12
    $$$$$: 3608-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3608-block 14
    $$$$$: 3608-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3608-block 16
    $$$$$: 3608-block 17
    $$$$$: 3608-block 18
    $$$$$: 3608-block 19
    $$$$$: 3608-block 20
    #####: 3609:              break;
    $$$$$: 3609-block  0
        -: 3610:
        -: 3611:            case '1': case '2': case '3': case '4': case '5':
        -: 3612:            case '6': case '7': case '8': case '9':
    #####: 3613:              if (syntax & RE_NO_BK_REFS)
    $$$$$: 3613-block  0
branch  0 never executed
branch  1 never executed
    #####: 3614:                goto normal_char;
    $$$$$: 3614-block  0
        -: 3615:
    #####: 3616:              c1 = c - '0';
        -: 3617:
    #####: 3618:              if (c1 > regnum)
    $$$$$: 3618-block  0
branch  0 never executed
branch  1 never executed
    #####: 3619:                return REG_ESUBREG;
    $$$$$: 3619-block  0
        -: 3620:
        -: 3621:              /* Can't back reference to a subexpression if inside of it.  */
    #####: 3622:              if (group_in_compile_stack (compile_stack, c1))
    $$$$$: 3622-block  0
branch  0 never executed
branch  1 never executed
    #####: 3623:                goto normal_char;
    $$$$$: 3623-block  0
        -: 3624:
    #####: 3625:              laststart = b;
    #####: 3626:              BUF_PUSH_2 (duplicate, c1);
    $$$$$: 3626-block  0
    $$$$$: 3626-block  1
    $$$$$: 3626-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 3626-block  3
    $$$$$: 3626-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 3626-block  5
    $$$$$: 3626-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3626-block  7
    $$$$$: 3626-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3626-block  9
    $$$$$: 3626-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3626-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3626-block 12
    $$$$$: 3626-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3626-block 14
    $$$$$: 3626-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3626-block 16
    $$$$$: 3626-block 17
    $$$$$: 3626-block 18
    $$$$$: 3626-block 19
    $$$$$: 3626-block 20
    #####: 3627:              break;
    $$$$$: 3627-block  0
        -: 3628:
        -: 3629:
        -: 3630:            case '+':
        -: 3631:            case '?':
    #####: 3632:              if (syntax & RE_BK_PLUS_QM)
    $$$$$: 3632-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3632-block  1
    #####: 3633:                goto handle_plus;
    $$$$$: 3633-block  0
        -: 3634:              else
    #####: 3635:                goto normal_backslash;
    $$$$$: 3635-block  0
        -: 3636:
        -: 3637:            default:
        -: 3638:            normal_backslash:
        -: 3639:              /* You might think it would be useful for \ to mean
        -: 3640:                 not to translate; but if we don't translate it
        -: 3641:                 it will never match anything.  */
    #####: 3642:              c = TRANSLATE (c);
    $$$$$: 3642-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3642-block  1
    $$$$$: 3642-block  2
    #####: 3643:              goto normal_char;
    $$$$$: 3643-block  0
        -: 3644:            }
       88: 3645:          break;
       21: 3645-block  0
       67: 3645-block  1
        -: 3646:
        -: 3647:
        -: 3648:	default:
        -: 3649:        /* Expects the character in `c'.  */
        -: 3650:	normal_char:
        -: 3651:	      /* If no exactn currently being built.  */
      152: 3652:          if (!pending_exact 
       58: 3652-block  0
branch  0 taken 9%
branch  1 taken 91%
    $$$$$: 3652-block  1
    $$$$$: 3652-block  2
        -: 3653:
        -: 3654:              /* If last exactn not at current position.  */
       94: 3655:              || pending_exact + *pending_exact + 1 != b
       94: 3655-block  0
branch  0 taken 69%
branch  1 taken 31%
        -: 3656:              
        -: 3657:              /* We have only one byte following the exactn for the count.  */
       65: 3658:	      || *pending_exact == (1 << BYTEWIDTH) - 1
       65: 3658-block  0
branch  0 taken 95%
branch  1 taken 5%
        -: 3659:
        -: 3660:              /* If followed by a repetition operator.  */
       62: 3661:              || *p == '*' || *p == '^'
       62: 3661-block  0
branch  0 taken 100%
branch  1 taken 0%
       62: 3661-block  1
branch  2 taken 94%
branch  3 taken 6%
       58: 3662:	      || ((syntax & RE_BK_PLUS_QM)
       58: 3662-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3662-block  1
    $$$$$: 3662-block  2
       53: 3663:		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
       53: 3663-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3663-block  1
branch  2 never executed
branch  3 never executed
        5: 3664:		  : (*p == '+' || *p == '?'))
        5: 3664-block  0
branch  0 taken 100%
branch  1 taken 0%
      116: 3665:	      || ((syntax & RE_INTERVALS)
       58: 3665-block  0
branch  0 taken 91%
branch  1 taken 9%
       15: 3665-block  1
branch  2 taken 33%
branch  3 taken 67%
       63: 3666:                  && ((syntax & RE_NO_BK_BRACES)
       63: 3666-block  0
branch  0 taken 8%
branch  1 taken 92%
        5: 3666-block  1
    $$$$$: 3666-block  2
        5: 3667:		      ? *p == '{'
       53: 3668:                      : (p[0] == '\\' && p[1] == '{'))))
       53: 3668-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 3669:	    {
        -: 3670:	      /* Start building a new exactn.  */
        -: 3671:              
       46: 3672:              laststart = b;
        -: 3673:
       46: 3674:	      BUF_PUSH_2 (exactn, 0);
       46: 3674-block  0
       46: 3674-block  1
       46: 3674-block  2
branch  0 taken 22%
branch  1 taken 78%
       10: 3674-block  3
       10: 3674-block  4
branch  2 taken 0%
branch  3 taken 100%
       10: 3674-block  5
    $$$$$: 3674-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 3674-block  7
    $$$$$: 3674-block  8
branch  6 never executed
branch  7 never executed
    $$$$$: 3674-block  9
    $$$$$: 3674-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 3674-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 3674-block 12
    $$$$$: 3674-block 13
branch 12 never executed
branch 13 never executed
    $$$$$: 3674-block 14
    $$$$$: 3674-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 3674-block 16
    $$$$$: 3674-block 17
    $$$$$: 3674-block 18
    $$$$$: 3674-block 19
       36: 3674-block 20
       36: 3675:	      pending_exact = b - 1;
       36: 3676:            }
       36: 3676-block  0
        -: 3677:            
       95: 3678:	  BUF_PUSH (c);
       94: 3678-block  0
       94: 3678-block  1
       95: 3678-block  2
branch  0 taken 1%
branch  1 taken 99%
        1: 3678-block  3
        1: 3678-block  4
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 3678-block  5
        1: 3678-block  6
branch  4 taken 100%
branch  5 taken 0%
    $$$$$: 3678-block  7
        1: 3678-block  8
branch  6 taken 100%
branch  7 taken 0%
    $$$$$: 3678-block  9
        1: 3678-block 10
branch  8 taken 0%
branch  9 taken 100%
        1: 3678-block 11
branch 10 taken 100%
branch 11 taken 0%
    $$$$$: 3678-block 12
        1: 3678-block 13
branch 12 taken 0%
branch 13 taken 100%
        1: 3678-block 14
        1: 3678-block 15
branch 14 taken 0%
branch 15 taken 100%
        1: 3678-block 16
        1: 3678-block 17
        1: 3678-block 18
        1: 3678-block 19
       94: 3678-block 20
       94: 3679:          (*pending_exact)++;
       94: 3680:	  break;
       94: 3680-block  0
        -: 3681:        } /* switch (c) */
        -: 3682:    } /* while p != pend */
        -: 3683:
        -: 3684:  
        -: 3685:  /* Through the pattern now.  */
        -: 3686:  
        3: 3687:  if (fixup_alt_jump)
        3: 3687-block  0
branch  0 taken 67%
branch  1 taken 33%
        1: 3688:    STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
        1: 3688-block  0
        -: 3689:
        3: 3690:  if (!COMPILE_STACK_EMPTY) 
        3: 3690-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 3691:    return REG_EPAREN;
    $$$$$: 3691-block  0
        -: 3692:
        3: 3693:  free (compile_stack.stack);
        -: 3694:
        -: 3695:  /* We have succeeded; set the length of the buffer.  */
        3: 3696:  bufp->used = b - bufp->buffer;
        -: 3697:
        -: 3698:#ifdef DEBUG
        -: 3699:  if (debug)
        -: 3700:    {
        -: 3701:      DEBUG_PRINT1 ("\nCompiled pattern: \n");
        -: 3702:      print_compiled_pattern (bufp);
        -: 3703:    }
        -: 3704:#endif /* DEBUG */
        -: 3705:
        3: 3706:  return REG_NOERROR;
        3: 3706-block  0
       13: 3707:} /* regex_compile */
       13: 3707-block  0
        -: 3708:
        -: 3709:/* Subroutines for `regex_compile'.  */
        -: 3710:
        -: 3711:/* Store OP at LOC followed by two-byte integer parameter ARG.  */
        -: 3712:
        -: 3713:static void
function store_op1 called 51 returned 100% blocks executed 100%
       51: 3714:store_op1 (op, loc, arg)
        -: 3715:    re_opcode_t op;
        -: 3716:    unsigned char *loc;
        -: 3717:    int arg;
        -: 3718:{
       51: 3719:  *loc = (unsigned char) op;
       51: 3720:  STORE_NUMBER (loc + 1, arg);
       51: 3720-block  0
       51: 3720-block  1
       51: 3721:}
       51: 3721-block  0
        -: 3722:
        -: 3723:
        -: 3724:/* Like `store_op1', but" for 'two two-byte parameters ARG1 and ARG2.  */
        -: 3725:
        -: 3726:static void
function store_op2 called 4 returned 100% blocks executed 100%
        4: 3727:store_op2 (op, loc, arg1, arg2)
        -: 3728:    re_opcode_t op;
        -: 3729:    unsigned char *loc;
        -: 3730:    int arg1, arg2;
        -: 3731:{
        4: 3732:  *loc = (unsigned char) op;
        4: 3733:  STORE_NUMBER (loc + 1, arg1);
        4: 3733-block  0
        4: 3733-block  1
        4: 3734:  STORE_NUMBER (loc + 3, arg2);
        4: 3734-block  0
        4: 3734-block  1
        4: 3735:}
        4: 3735-block  0
        -: 3736:
        -: 3737:
        -: 3738:/* Copy the bytes from LOC to END to open up three bytes of space at LOC
        -: 3739:   for OP followed by two-byte integer parameter ARG.  */
        -: 3740:
        -: 3741:static void
function insert_op1 called 28 returned 100% blocks executed 100%
       28: 3742:insert_op1 (op, loc, arg, end)
        -: 3743:    re_opcode_t op;
        -: 3744:    unsigned char *loc;
        -: 3745:    int arg;
        -: 3746:    unsigned char *end;    
        -: 3747:{
       28: 3748:  register unsigned char *pfrom = end;
       28: 3749:  register unsigned char *pto = end + 3;
        -: 3750:
      425: 3751:  while (pfrom != loc)
       28: 3751-block  0
      425: 3751-block  1
branch  0 taken 93%
branch  1 taken 7%
      397: 3751-block  2
      397: 3752:    *--pto = *--pfrom;
        -: 3753:    
       28: 3754:  store_op1 (op, loc, arg);
       28: 3755:}
       28: 3755-block  0
        -: 3756:
        -: 3757:
        -: 3758:/* Like `insert_op1', but for two two-byte parameters ARG1 and ARG2.  */
        -: 3759:
        -: 3760:static void
function insert_op2 called 3 returned 100% blocks executed 100%
        3: 3761:insert_op2 (op, loc, arg1, arg2, end)
        -: 3762:    re_opcode_t op;
        -: 3763:    unsigned char *loc;
        -: 3764:    int arg1, arg2;
        -: 3765:    unsigned char *end;    
        -: 3766:{
        3: 3767:  register unsigned char *pfrom = end;
        3: 3768:  register unsigned char *pto = end + 5;
        -: 3769:
       32: 3770:  while (pfrom != loc)
        3: 3770-block  0
       32: 3770-block  1
branch  0 taken 91%
branch  1 taken 9%
       29: 3770-block  2
       29: 3771:    *--pto = *--pfrom;
        -: 3772:    
        3: 3773:  store_op2 (op, loc, arg1, arg2);
        3: 3774:}
        3: 3774-block  0
        -: 3775:
        -: 3776:
        -: 3777:/* P points to just after a ^ in PATTERN.  Return true if that ^ comes
        -: 3778:   after an alternative or a begin-subexpression.  We assume there is at
        -: 3779:   least one character before the ^.  */
        -: 3780:
        -: 3781:static boolean
function at_begline_loc_p called 0 returned 0% blocks executed 0%
    #####: 3782:at_begline_loc_p (pattern, p, syntax)
        -: 3783:    const char *pattern, *p;
        -: 3784:    reg_syntax_t syntax;
        -: 3785:{
    #####: 3786:  const char *prev = p - 2;
    #####: 3787:  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
    $$$$$: 3787-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3787-block  1
        -: 3788:  
    #####: 3789:  return
    $$$$$: 3789-block  0
        -: 3790:       /* After a subexpression?  */
    #####: 3791:       (*prev == '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
    $$$$$: 3791-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3791-block  1
branch  2 never executed
branch  3 never executed
        -: 3792:       /* After an alternative?  */
    #####: 3793:    || (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
    $$$$$: 3793-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3793-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3793-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 3793-block  3
    $$$$$: 3793-block  4
        -: 3794:}
        -: 3795:
        -: 3796:
        -: 3797:/* The dual of at_begline_loc_p.  This one is for $.  We assume there is
        -: 3798:   at least one character after the $, i.e., `P < PEND'.  */
        -: 3799:
        -: 3800:static boolean
function at_endline_loc_p called 1 returned 100% blocks executed 52%
        1: 3801:at_endline_loc_p (p, pend, syntax)
        -: 3802:    const char *p, *pend;
        -: 3803:    int syntax;
        -: 3804:{
        1: 3805:  const char *next = p;
        1: 3806:  boolean next_backslash = *next == '\\';
        1: 3807:  const char *next_next = p + 1 < pend ? p + 1 : NULL;
        1: 3807-block  0
branch  0 taken 100%
branch  1 taken 0%
        1: 3807-block  1
    $$$$$: 3807-block  2
        -: 3808:  
        1: 3809:  return
        1: 3809-block  0
        -: 3810:       /* Before a subexpression?  */
        2: 3811:       (syntax & RE_NO_BK_PARENS ? *next == ')'
    $$$$$: 3811-block  0
branch  0 never executed
branch  1 never executed
        1: 3812:        : next_backslash && next_next && *next_next == ')')
        1: 3812-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3812-block  1
branch  2 never executed
branch  3 never executed
        -: 3813:       /* Before an alternative?  */
        3: 3814:    || (syntax & RE_NO_BK_VBAR ? *next == '|'
        1: 3814-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3814-block  1
    $$$$$: 3814-block  2
        1: 3814-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 3814-block  4
        1: 3814-block  5
        1: 3814-block  6
        1: 3815:        : next_backslash && next_next && *next_next == '|');
        1: 3815-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3815-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 3815-block  2
        -: 3816:}
        -: 3817:
        -: 3818:
        -: 3819:/* Returns true if REGNUM is in one of COMPILE_STACK's elements and 
        -: 3820:   false if it's not.  */
        -: 3821:
        -: 3822:static boolean
function group_in_compile_stack called 0 returned 0% blocks executed 0%
    #####: 3823:group_in_compile_stack (compile_stack, regnum)
        -: 3824:    compile_stack_type compile_stack;
        -: 3825:    regnum_t regnum;
        -: 3826:{
        -: 3827:  int this_element;
        -: 3828:
    #####: 3829:  for (this_element = compile_stack.avail - 1;  
    $$$$$: 3829-block  0
    $$$$$: 3829-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3829-block  2
    #####: 3830:       this_element >= 0; 
    #####: 3831:       this_element--)
    #####: 3832:    if (compile_stack.stack[this_element].regnum == regnum)
    $$$$$: 3832-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3832-block  1
    #####: 3833:      return true;
    $$$$$: 3833-block  0
        -: 3834:
    #####: 3835:  return false;
    $$$$$: 3835-block  0
    #####: 3836:}
    $$$$$: 3836-block  0
        -: 3837:
        -: 3838:
        -: 3839:/* Read the ending character of a range (in a bracket expression) from the
        -: 3840:   uncompiled pattern *P_PTR (which ends at PEND).  We assume the
        -: 3841:   starting character is in `P[-2]'.  (`P[-1]' is the character `-'.)
        -: 3842:   Then we set the translation of all bits between the starting and
        -: 3843:   ending characters (inclusive) in the compiled pattern B.
        -: 3844:   
        -: 3845:   Return an error code.
        -: 3846:   
        -: 3847:   We use these short variable names so we can use the same macros as
        -: 3848:   `regex_compile' itself.  */
        -: 3849:
        -: 3850:static reg_errcode_t
function compile_range called 8 returned 100% blocks executed 75%
        8: 3851:compile_range (p_ptr, pend, translate, syntax, b)
        -: 3852:    const char **p_ptr, *pend;
        -: 3853:    char *translate;
        -: 3854:    reg_syntax_t syntax;
        -: 3855:    unsigned char *b;
        -: 3856:{
        -: 3857:  unsigned this_char;
        -: 3858:
        8: 3859:  const char *p = *p_ptr;
        -: 3860:  int range_start, range_end;
        -: 3861:  
        8: 3862:  if (p == pend)
        8: 3862-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 3863:    return REG_ERANGE;
    $$$$$: 3863-block  0
        -: 3864:
        -: 3865:  /* Even though the pattern is a signed `char *', we need to fetch
        -: 3866:     with unsigned char *'s; if the high bit of the pattern character
        -: 3867:     is set, the range endpoints will be negative if we fetch using a
        -: 3868:     signed char *.
        -: 3869:
        -: 3870:     We also want to fetch the endpoints without translating them; the 
        -: 3871:     appropriate translation is done in the bit-setting loop below.  */
        8: 3872:  range_start = ((unsigned char *) p)[-2];
        8: 3873:  range_end   = ((unsigned char *) p)[0];
        -: 3874:
        -: 3875:  /* Have to increment the pointer into the pattern string, so the
        -: 3876:     caller isn't still at the ending character.  */
        8: 3877:  (*p_ptr)++;
        -: 3878:
        -: 3879:  /* If the start is after the end, the range is empty.  */
        8: 3880:  if (range_start > range_end)
        8: 3880-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 3881:    return syntax & RE_NO_EMPTY_RANGES ? REG_ERANGE : REG_NOERROR;
    $$$$$: 3881-block  0
        -: 3882:
        -: 3883:  /* Here we see why `this_char' has to be larger than an `unsigned
        -: 3884:     char' -- the range is inclusive, so if `range_end' == 0xff
        -: 3885:     (assuming 8-bit characters), we would otherwise go into an infinite
        -: 3886:     loop, since all characters <= 0xff.  */
      152: 3887:  for (this_char = range_start; this_char <= range_end; this_char++)
        8: 3887-block  0
      152: 3887-block  1
branch  0 taken 95%
branch  1 taken 5%
      144: 3887-block  2
        -: 3888:    {
      144: 3889:      SET_LIST_BIT (TRANSLATE (this_char));
      144: 3889-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 3889-block  1
      144: 3889-block  2
      144: 3889-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 3889-block  4
      144: 3889-block  5
      144: 3890:    }
      144: 3890-block  0
        -: 3891:  
        8: 3892:  return REG_NOERROR;
        8: 3892-block  0
        8: 3893:}
        8: 3893-block  0
        -: 3894:
        -: 3895:/* Failure stack declarations and macros; both re_compile_fastmap and
        -: 3896:   re_match_2 use a failure stack.  These have to be macros because of
        -: 3897:   REGEX_ALLOCATE.  */
        -: 3898:   
        -: 3899:
        -: 3900:/* Number of failure points for which to initially allocate space
        -: 3901:   when matching.  If this number is exceeded, we allocate more
        -: 3902:   space, so it is not a hard limit.  */
        -: 3903:#ifndef INIT_FAILURE_ALLOC
        -: 3904:#define INIT_FAILURE_ALLOC 5
        -: 3905:#endif
        -: 3906:
        -: 3907:/* Roughly the maximum number of failure points on the stack.  Would be
        -: 3908:   exactly that if always used MAX_FAILURE_SPACE each time we failed.
        -: 3909:   This is a variable only so users of regex can assign to it; we never
        -: 3910:   change it ourselves.  */
        -: 3911:int re_max_failures = 2000;
        -: 3912:
        -: 3913:typedef const unsigned char *fail_stack_elt_t;
        -: 3914:
        -: 3915:typedef struct
        -: 3916:{
        -: 3917:  fail_stack_elt_t *stack;
        -: 3918:  unsigned size;
        -: 3919:  unsigned avail;			/* Offset of next open position.  */
        -: 3920:} fail_stack_type;
        -: 3921:
        -: 3922:#define FAIL_STACK_EMPTY()     (fail_stack.avail == 0)
        -: 3923:#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 0)
        -: 3924:#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)
        -: 3925:#define FAIL_STACK_TOP()       (fail_stack.stack[fail_stack.avail])
        -: 3926:
        -: 3927:
        -: 3928:/* Initialize `fail_stack'.  Do `return -2' if the alloc fails.  */
        -: 3929:
        -: 3930:#define INIT_FAIL_STACK()						\
        -: 3931:  do {									\
        -: 3932:    fail_stack.stack = (fail_stack_elt_t *)				\
        -: 3933:      REGEX_ALLOCATE (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t));	\
        -: 3934:									\
        -: 3935:    if (fail_stack.stack == NULL)					\
        -: 3936:      return -2;							\
        -: 3937:									\
        -: 3938:    fail_stack.size = INIT_FAILURE_ALLOC;				\
        -: 3939:    fail_stack.avail = 0;						\
        -: 3940:  } while (0)
        -: 3941:
        -: 3942:
        -: 3943:/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
        -: 3944:
        -: 3945:   Return 1 if succeeds, and 0 if either ran out of memory
        -: 3946:   allocating space for it or it was already too large.  
        -: 3947:   
        -: 3948:   REGEX_REALLOCATE requires `destination' be declared.   */
        -: 3949:
        -: 3950:#define DOUBLE_FAIL_STACK(fail_stack)					\
        -: 3951:  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
        -: 3952:   ? 0									\
        -: 3953:   : ((fail_stack).stack = (fail_stack_elt_t *)				\
        -: 3954:        REGEX_REALLOCATE ((fail_stack).stack, 				\
        -: 3955:          (fail_stack).size * sizeof (fail_stack_elt_t),		\
        -: 3956:          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
        -: 3957:									\
        -: 3958:      (fail_stack).stack == NULL					\
        -: 3959:      ? 0								\
        -: 3960:      : ((fail_stack).size <<= 1, 					\
        -: 3961:         1)))
        -: 3962:
        -: 3963:
        -: 3964:/* Push PATTERN_OP on FAIL_STACK. 
        -: 3965:
        -: 3966:   Return 1 if was able to do so and 0 if ran out of memory allocating
        -: 3967:   space to do so.  */
        -: 3968:#define PUSH_PATTERN_OP(pattern_op, fail_stack)				\
        -: 3969:  ((FAIL_STACK_FULL ()							\
        -: 3970:    && !DOUBLE_FAIL_STACK (fail_stack))					\
        -: 3971:    ? 0									\
        -: 3972:    : ((fail_stack).stack[(fail_stack).avail++] = pattern_op,		\
        -: 3973:       1))
        -: 3974:
        -: 3975:/* This pushes an item onto the failure stack.  Must be a four-byte
        -: 3976:   value.  Assumes the variable `fail_stack'.  Probably should only
        -: 3977:   be called from within `PUSH_FAILURE_POINT'.  */
        -: 3978:#define PUSH_FAILURE_ITEM(item)						\
        -: 3979:  fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) item
        -: 3980:
        -: 3981:/* The complement operation.  Assumes `fail_stack' is nonempty.  */
        -: 3982:#define POP_FAILURE_ITEM() fail_stack.stack[--fail_stack.avail]
        -: 3983:
        -: 3984:/* Used to omit pushing failure point id's when we're not debugging.  */
        -: 3985:#ifdef DEBUG
        -: 3986:#define DEBUG_PUSH PUSH_FAILURE_ITEM
        -: 3987:#define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_ITEM ()
        -: 3988:#else
        -: 3989:#define DEBUG_PUSH(item)
        -: 3990:#define DEBUG_POP(item_addr)
        -: 3991:#endif
        -: 3992:
        -: 3993:
        -: 3994:/* Push the information about the state we will need
        -: 3995:   if we ever fail back to it.  
        -: 3996:   
        -: 3997:   Requires variables fail_stack, regstart, regend, reg_info, and
        -: 3998:   num_regs be declared.  DOUBLE_FAIL_STACK requires `destination' be
        -: 3999:   declared.
        -: 4000:   
        -: 4001:   Does `return FAILURE_CODE' if runs out of memory.  */
        -: 4002:
        -: 4003:#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)	\
        -: 4004:  do {									\
        -: 4005:    char *destination;							\
        -: 4006:    /* Must be int, so when we don't save any registers, the arithmetic	\
        -: 4007:       of 0 + -1 isn't done as unsigned.  */				\
        -: 4008:    int this_reg;							\
        -: 4009:    									\
        -: 4010:    DEBUG_STATEMENT (failure_id++);					\
        -: 4011:    DEBUG_STATEMENT (nfailure_points_pushed++);				\
        -: 4012:    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
        -: 4013:    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
        -: 4014:    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
        -: 4015:									\
        -: 4016:    DEBUG_PRINT2 ("  slots needed: %d\n", NUM_FAILURE_ITEMS);		\
        -: 4017:    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
        -: 4018:									\
        -: 4019:    /* Ensure we have enough space allocated for what we will push.  */	\
        -: 4020:    while (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS)			\
        -: 4021:      {									\
        -: 4022:        if (!DOUBLE_FAIL_STACK (fail_stack))			\
        -: 4023:          return failure_code;						\
        -: 4024:									\
        -: 4025:        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
        -: 4026:		       (fail_stack).size);				\
        -: 4027:        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
        -: 4028:      }									\
        -: 4029:									\
        -: 4030:    /* Push the info, starting with the registers.  */			\
        -: 4031:    DEBUG_PRINT1 ("\n");						\
        -: 4032:									\
        -: 4033:    for (this_reg = lowest_active_reg; this_reg <= highest_active_reg;	\
        -: 4034:         this_reg++)							\
        -: 4035:      {									\
        -: 4036:	DEBUG_PRINT2 ("  Pushing reg: %d\n", this_reg);			\
        -: 4037:        DEBUG_STATEMENT (num_regs_pushed++);				\
        -: 4038:									\
        -: 4039:	DEBUG_PRINT2 ("    start: 0x%x\n", regstart[this_reg]);		\
        -: 4040:        PUSH_FAILURE_ITEM (regstart[this_reg]);				\
        -: 4041:                                                                        \
        -: 4042:	DEBUG_PRINT2 ("    end: 0x%x\n", regend[this_reg]);		\
        -: 4043:        PUSH_FAILURE_ITEM (regend[this_reg]);				\
        -: 4044:									\
        -: 4045:	DEBUG_PRINT2 ("    info: 0x%x\n      ", reg_info[this_reg]);	\
        -: 4046:        DEBUG_PRINT2 (" match_null=%d",					\
        -: 4047:                      REG_MATCH_NULL_STRING_P (reg_info[this_reg]));	\
        -: 4048:        DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
        -: 4049:        DEBUG_PRINT2 (" matched_something=%d",				\
        -: 4050:                      MATCHED_SOMETHING (reg_info[this_reg]));		\
        -: 4051:        DEBUG_PRINT2 (" ever_matched=%d",				\
        -: 4052:                      EVER_MATCHED_SOMETHING (reg_info[this_reg]));	\
        -: 4053:	DEBUG_PRINT1 ("\n");						\
        -: 4054:        PUSH_FAILURE_ITEM (reg_info[this_reg].word);			\
        -: 4055:      }									\
        -: 4056:									\
        -: 4057:    DEBUG_PRINT2 ("  Pushing  low active reg: %d\n", lowest_active_reg);\
        -: 4058:    PUSH_FAILURE_ITEM (lowest_active_reg);				\
        -: 4059:									\
        -: 4060:    DEBUG_PRINT2 ("  Pushing high active reg: %d\n", highest_active_reg);\
        -: 4061:    PUSH_FAILURE_ITEM (highest_active_reg);				\
        -: 4062:									\
        -: 4063:    DEBUG_PRINT2 ("  Pushing pattern 0x%x: ", pattern_place);		\
        -: 4064:    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
        -: 4065:    PUSH_FAILURE_ITEM (pattern_place);					\
        -: 4066:									\
        -: 4067:    DEBUG_PRINT2 ("  Pushing string 0x%x: `", string_place);		\
        -: 4068:    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
        -: 4069:				 size2);				\
        -: 4070:    DEBUG_PRINT1 ("'\n");						\
        -: 4071:    PUSH_FAILURE_ITEM (string_place);					\
        -: 4072:									\
        -: 4073:    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
        -: 4074:    DEBUG_PUSH (failure_id);						\
        -: 4075:  } while (0)
        -: 4076:
        -: 4077:/* This is the number of items that are pushed and popped on the stack
        -: 4078:   for each register.  */
        -: 4079:#define NUM_REG_ITEMS  3
        -: 4080:
        -: 4081:/* Individual items aside from the registers.  */
        -: 4082:#ifdef DEBUG
        -: 4083:#define NUM_NONREG_ITEMS 5 /* Includes failure point id.  */
        -: 4084:#else
        -: 4085:#define NUM_NONREG_ITEMS 4
        -: 4086:#endif
        -: 4087:
        -: 4088:/* We push at most this many items on the stack.  */
        -: 4089:#define MAX_FAILURE_ITEMS ((num_regs - 1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS)
        -: 4090:
        -: 4091:/* We actually push this many items.  */
        -: 4092:#define NUM_FAILURE_ITEMS						\
        -: 4093:  ((highest_active_reg - lowest_active_reg + 1) * NUM_REG_ITEMS 	\
        -: 4094:    + NUM_NONREG_ITEMS)
        -: 4095:
        -: 4096:/* How many items can still be added to the stack without overflowing it.  */
        -: 4097:#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)
        -: 4098:
        -: 4099:
        -: 4100:/* Pops what PUSH_FAIL_STACK pushes.
        -: 4101:
        -: 4102:   We restore into the parameters, all of which should be lvalues:
        -: 4103:     STR -- the saved data position.
        -: 4104:     PAT -- the saved pattern position.
        -: 4105:     LOW_REG, HIGH_REG -- the highest and lowest active registers.
        -: 4106:     REGSTART, REGEND -- arrays of string positions.
        -: 4107:     REG_INFO -- array of information about each subexpression.
        -: 4108:   
        -: 4109:   Also assumes the variables `fail_stack' and (if debugging), `bufp',
        -: 4110:   `pend', `string1', `size1', `string2', and `size2'.  */
        -: 4111:
        -: 4112:#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\
        -: 4113:{									\
        -: 4114:  DEBUG_STATEMENT (fail_stack_elt_t failure_id;)			\
        -: 4115:  int this_reg;								\
        -: 4116:  const unsigned char *string_temp;					\
        -: 4117:									\
        -: 4118:  assert (!FAIL_STACK_EMPTY ());					\
        -: 4119:									\
        -: 4120:  /* Remove failure points and point to how many regs pushed.  */	\
        -: 4121:  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
        -: 4122:  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
        -: 4123:  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
        -: 4124:									\
        -: 4125:  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
        -: 4126:									\
        -: 4127:  DEBUG_POP (&failure_id);						\
        -: 4128:  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
        -: 4129:									\
        -: 4130:  /* If the saved string location is NULL, it came from an		\
        -: 4131:     on_failure_keep_string_jump opcode, and we want to throw away the	\
        -: 4132:     saved NULL, thus retaining our current position in the string.  */	\
        -: 4133:  string_temp = POP_FAILURE_ITEM ();					\
        -: 4134:  if (string_temp != NULL)						\
        -: 4135:    str = (const char *) string_temp;					\
        -: 4136:									\
        -: 4137:  DEBUG_PRINT2 ("  Popping string 0x%x: `", str);			\
        -: 4138:  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
        -: 4139:  DEBUG_PRINT1 ("'\n");							\
        -: 4140:									\
        -: 4141:  pat = (unsigned char *) POP_FAILURE_ITEM ();				\
        -: 4142:  DEBUG_PRINT2 ("  Popping pattern 0x%x: ", pat);			\
        -: 4143:  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
        -: 4144:									\
        -: 4145:  /* Restore register info.  */						\
        -: 4146:  high_reg = (unsigned) POP_FAILURE_ITEM ();				\
        -: 4147:  DEBUG_PRINT2 ("  Popping high active reg: %d\n", high_reg);		\
        -: 4148:									\
        -: 4149:  low_reg = (unsigned) POP_FAILURE_ITEM ();				\
        -: 4150:  DEBUG_PRINT2 ("  Popping  low active reg: %d\n", low_reg);		\
        -: 4151:									\
        -: 4152:  for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
        -: 4153:    {									\
        -: 4154:      DEBUG_PRINT2 ("    Popping reg: %d\n", this_reg);			\
        -: 4155:									\
        -: 4156:      reg_info[this_reg].word = POP_FAILURE_ITEM ();			\
        -: 4157:      DEBUG_PRINT2 ("      info: 0x%x\n", reg_info[this_reg]);		\
        -: 4158:									\
        -: 4159:      regend[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
        -: 4160:      DEBUG_PRINT2 ("      end: 0x%x\n", regend[this_reg]);		\
        -: 4161:									\
        -: 4162:      regstart[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
        -: 4163:      DEBUG_PRINT2 ("      start: 0x%x\n", regstart[this_reg]);		\
        -: 4164:    }									\
        -: 4165:									\
        -: 4166:  DEBUG_STATEMENT (nfailure_points_popped++);				\
        -: 4167:} /* POP_FAILURE_POINT */
        -: 4168:
        -: 4169:/* re_compile_fastmap computes a ``fastmap'' for the compiled pattern in
        -: 4170:   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
        -: 4171:   characters can start a string that matches the pattern.  This fastmap
        -: 4172:   is used by re_search to skip quickly over impossible starting points.
        -: 4173:
        -: 4174:   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
        -: 4175:   area as BUFP->fastmap.
        -: 4176:   
        -: 4177:   We set the `fastmap', `fastmap_accurate', and `can_be_null' fields in
        -: 4178:   the pattern buffer.
        -: 4179:
        -: 4180:   Returns 0 if we succeed, -2 if an internal error.   */
        -: 4181:
        -: 4182:int
function re_compile_fastmap called 0 returned 0% blocks executed 0%
    #####: 4183:re_compile_fastmap (bufp)
        -: 4184:     struct re_pattern_buffer *bufp;
        -: 4185:{
        -: 4186:  int j, k;
        -: 4187:  fail_stack_type fail_stack;
        -: 4188:#ifndef REGEX_MALLOC
        -: 4189:  char *destination;
        -: 4190:#endif
        -: 4191:  /* We don't push any register information onto the failure stack.  */
    #####: 4192:  unsigned num_regs = 0;
        -: 4193:  
    #####: 4194:  register char *fastmap = bufp->fastmap;
    #####: 4195:  unsigned char *pattern = bufp->buffer;
    #####: 4196:  unsigned long size = bufp->used;
    #####: 4197:  const unsigned char *p = pattern;
    #####: 4198:  register unsigned char *pend = pattern + size;
        -: 4199:
        -: 4200:  /* Assume that each path through the pattern can be null until
        -: 4201:     proven otherwise.  We set this false at the bottom of switch
        -: 4202:     statement, to which we get only if a particular path doesn't
        -: 4203:     match the empty string.  */
    #####: 4204:  boolean path_can_be_null = true;
        -: 4205:
        -: 4206:  /* We aren't doing a `succeed_n' to begin with.  */
    #####: 4207:  boolean succeed_n_p = false;
        -: 4208:
        -: 4209:  assert (fastmap != NULL && p != NULL);
        -: 4210:  
    #####: 4211:  INIT_FAIL_STACK ();
    $$$$$: 4211-block  0
    $$$$$: 4211-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4211-block  2
    $$$$$: 4211-block  3
    #####: 4212:  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
    #####: 4213:  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
    #####: 4214:  bufp->can_be_null = 0;
        -: 4215:      
    #####: 4216:  while (p != pend || !FAIL_STACK_EMPTY ())
    $$$$$: 4216-block  0
    $$$$$: 4216-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4216-block  2
    $$$$$: 4216-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 4216-block  4
        -: 4217:    {
    #####: 4218:      if (p == pend)
    $$$$$: 4218-block  0
branch  0 never executed
branch  1 never executed
        -: 4219:        {
    #####: 4220:          bufp->can_be_null |= path_can_be_null;
        -: 4221:          
        -: 4222:          /* Reset for next path.  */
    #####: 4223:          path_can_be_null = true;
        -: 4224:          
    #####: 4225:          p = fail_stack.stack[--fail_stack.avail];
    #####: 4226:	}
    $$$$$: 4226-block  0
        -: 4227:
        -: 4228:      /* We should never be about to go beyond the end of the pattern.  */
        -: 4229:      assert (p < pend);
        -: 4230:      
        -: 4231:#ifdef SWITCH_ENUM_BUG
        -: 4232:      switch ((int) ((re_opcode_t) *p++))
        -: 4233:#else
    #####: 4234:      switch ((re_opcode_t) *p++)
    $$$$$: 4234-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$: 4234-block  1
    $$$$$: 4234-block  2
    $$$$$: 4234-block  3
    $$$$$: 4234-block  4
    $$$$$: 4234-block  5
    $$$$$: 4234-block  6
    $$$$$: 4234-block  7
    $$$$$: 4234-block  8
    $$$$$: 4234-block  9
    $$$$$: 4234-block 10
    $$$$$: 4234-block 11
    $$$$$: 4234-block 12
    $$$$$: 4234-block 13
    $$$$$: 4234-block 14
    $$$$$: 4234-block 15
    $$$$$: 4234-block 16
        -: 4235:#endif
        -: 4236:	{
        -: 4237:
        -: 4238:        /* I guess the idea here is to simply not bother with a fastmap
        -: 4239:           if a backreference is used, since it's too hard to figure out
        -: 4240:           the fastmap for the corresponding group.  Setting
        -: 4241:           `can_be_null' stops `re_search_2' from using the fastmap, so
        -: 4242:           that is all we do.  */
        -: 4243:	case duplicate:
    #####: 4244:	  bufp->can_be_null = 1;
    #####: 4245:          return 0;
    $$$$$: 4245-block  0
        -: 4246:
        -: 4247:
        -: 4248:      /* Following are the cases which match a character.  These end
        -: 4249:         with `break'.  */
        -: 4250:
        -: 4251:	case exactn:
    #####: 4252:          fastmap[p[1]] = 1;
    #####: 4253:	  break;
    $$$$$: 4253-block  0
        -: 4254:
        -: 4255:
        -: 4256:        case charset:
    #####: 4257:          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
    $$$$$: 4257-block  0
    $$$$$: 4257-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4257-block  2
    #####: 4258:	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
    $$$$$: 4258-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4258-block  1
    #####: 4259:              fastmap[j] = 1;
    $$$$$: 4259-block  0
    #####: 4260:	  break;
    $$$$$: 4260-block  0
        -: 4261:
        -: 4262:
        -: 4263:	case charset_not:
        -: 4264:	  /* Chars beyond end of map must be allowed.  */
    #####: 4265:	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
    $$$$$: 4265-block  0
    $$$$$: 4265-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4265-block  2
    #####: 4266:            fastmap[j] = 1;
    $$$$$: 4266-block  0
        -: 4267:
    #####: 4268:	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
    $$$$$: 4268-block  0
    $$$$$: 4268-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4268-block  2
    #####: 4269:	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
    $$$$$: 4269-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4269-block  1
    #####: 4270:              fastmap[j] = 1;
    $$$$$: 4270-block  0
    #####: 4271:          break;
    $$$$$: 4271-block  0
        -: 4272:
        -: 4273:
        -: 4274:	case wordchar:
    #####: 4275:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
    $$$$$: 4275-block  0
    $$$$$: 4275-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4275-block  2
    #####: 4276:	    if (SYNTAX (j) == Sword)
    $$$$$: 4276-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4276-block  1
    #####: 4277:	      fastmap[j] = 1;
    $$$$$: 4277-block  0
    #####: 4278:	  break;
    $$$$$: 4278-block  0
        -: 4279:
        -: 4280:
        -: 4281:	case notwordchar:
    #####: 4282:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
    $$$$$: 4282-block  0
    $$$$$: 4282-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4282-block  2
    #####: 4283:	    if (SYNTAX (j) != Sword)
    $$$$$: 4283-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4283-block  1
    #####: 4284:	      fastmap[j] = 1;
    $$$$$: 4284-block  0
    #####: 4285:	  break;
    $$$$$: 4285-block  0
        -: 4286:
        -: 4287:
        -: 4288:        case anychar:
        -: 4289:          /* `.' matches anything ...  */
    #####: 4290:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
    $$$$$: 4290-block  0
    $$$$$: 4290-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4290-block  2
    #####: 4291:            fastmap[j] = 1;
    $$$$$: 4291-block  0
        -: 4292:
        -: 4293:          /* ... except perhaps newline.  */
    #####: 4294:          if (!(bufp->syntax & RE_DOT_NEWLINE))
    $$$$$: 4294-block  0
branch  0 never executed
branch  1 never executed
    #####: 4295:            fastmap['\n'] = 0;
    $$$$$: 4295-block  0
        -: 4296:
        -: 4297:          /* Return if we have already set `can_be_null'; if we have,
        -: 4298:             then the fastmap is irrelevant.  Something's wrong here.  */
    #####: 4299:	  else if (bufp->can_be_null)
    $$$$$: 4299-block  0
branch  0 never executed
branch  1 never executed
    #####: 4300:	    return 0;
    $$$$$: 4300-block  0
        -: 4301:
        -: 4302:          /* Otherwise, have to check alternative paths.  */
    #####: 4303:	  break;
    $$$$$: 4303-block  0
        -: 4304:
        -: 4305:
        -: 4306:#ifdef emacs
        -: 4307:        case syntaxspec:
        -: 4308:	  k = *p++;
        -: 4309:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
        -: 4310:	    if (SYNTAX (j) == (enum syntaxcode) k)
        -: 4311:	      fastmap[j] = 1;
        -: 4312:	  break;
        -: 4313:
        -: 4314:
        -: 4315:	case notsyntaxspec:
        -: 4316:	  k = *p++;
        -: 4317:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
        -: 4318:	    if (SYNTAX (j) != (enum syntaxcode) k)
        -: 4319:	      fastmap[j] = 1;
        -: 4320:	  break;
        -: 4321:
        -: 4322:
        -: 4323:      /* All cases after this match the empty string.  These end with
        -: 4324:         `continue'.  */
        -: 4325:
        -: 4326:
        -: 4327:	case before_dot:
        -: 4328:	case at_dot:
        -: 4329:	case after_dot:
        -: 4330:          continue;
        -: 4331:#endif /* not emacs */
        -: 4332:
        -: 4333:
        -: 4334:        case no_op:
        -: 4335:        case begline:
        -: 4336:        case endline:
        -: 4337:	case begbuf:
        -: 4338:	case endbuf:
        -: 4339:	case wordbound:
        -: 4340:	case notwordbound:
        -: 4341:	case wordbeg:
        -: 4342:	case wordend:
        -: 4343:        case push_dummy_failure:
    #####: 4344:          continue;
    $$$$$: 4344-block  0
        -: 4345:
        -: 4346:
        -: 4347:	case jump_n:
        -: 4348:        case pop_failure_jump:
        -: 4349:	case maybe_pop_jump:
        -: 4350:	case jump:
        -: 4351:        case jump_past_alt:
        -: 4352:	case dummy_failure_jump:
    #####: 4353:          EXTRACT_NUMBER_AND_INCR (j, p);
    $$$$$: 4353-block  0
    $$$$$: 4353-block  1
    $$$$$: 4353-block  2
    $$$$$: 4353-block  3
    #####: 4354:	  p += j;	
    #####: 4355:	  if (j > 0)
    $$$$$: 4355-block  0
branch  0 never executed
branch  1 never executed
    #####: 4356:	    continue;
    $$$$$: 4356-block  0
        -: 4357:            
        -: 4358:          /* Jump backward implies we just went through the body of a
        -: 4359:             loop and matched nothing.  Opcode jumped to should be
        -: 4360:             `on_failure_jump' or `succeed_n'.  Just treat it like an
        -: 4361:             ordinary jump.  For a * loop, it has pushed its failure
        -: 4362:             point already; if so, discard that as redundant.  */
    #####: 4363:          if ((re_opcode_t) *p != on_failure_jump
    $$$$$: 4363-block  0
branch  0 never executed
branch  1 never executed
    #####: 4364:	      && (re_opcode_t) *p != succeed_n)
    $$$$$: 4364-block  0
branch  0 never executed
branch  1 never executed
    #####: 4365:	    continue;
    $$$$$: 4365-block  0
        -: 4366:
    #####: 4367:          p++;
    #####: 4368:          EXTRACT_NUMBER_AND_INCR (j, p);
    $$$$$: 4368-block  0
    $$$$$: 4368-block  1
    $$$$$: 4368-block  2
    $$$$$: 4368-block  3
    #####: 4369:          p += j;		
        -: 4370:	  
        -: 4371:          /* If what's on the stack is where we are now, pop it.  */
    #####: 4372:          if (!FAIL_STACK_EMPTY () 
    $$$$$: 4372-block  0
branch  0 never executed
branch  1 never executed
    #####: 4373:	      && fail_stack.stack[fail_stack.avail - 1] == p)
    $$$$$: 4373-block  0
branch  0 never executed
branch  1 never executed
    #####: 4374:            fail_stack.avail--;
    $$$$$: 4374-block  0
        -: 4375:
    #####: 4376:          continue;
    $$$$$: 4376-block  0
    $$$$$: 4376-block  1
        -: 4377:
        -: 4378:
        -: 4379:        case on_failure_jump:
        -: 4380:        case on_failure_keep_string_jump:
        -: 4381:	handle_on_failure_jump:
    #####: 4382:          EXTRACT_NUMBER_AND_INCR (j, p);
    $$$$$: 4382-block  0
    $$$$$: 4382-block  1
    $$$$$: 4382-block  2
    $$$$$: 4382-block  3
        -: 4383:
        -: 4384:          /* For some patterns, e.g., `(a?)?', `p+j' here points to the
        -: 4385:             end of the pattern.  We don't want to push such a point,
        -: 4386:             since when we restore it above, entering the switch will
        -: 4387:             increment `p' past the end of the pattern.  We don't need
        -: 4388:             to push such a point since we obviously won't find any more
        -: 4389:             fastmap entries beyond `pend'.  Such a pattern can match
        -: 4390:             the null string, though.  */
    #####: 4391:          if (p + j < pend)
    $$$$$: 4391-block  0
branch  0 never executed
branch  1 never executed
        -: 4392:            {
    #####: 4393:              if (!PUSH_PATTERN_OP (p + j, fail_stack))
    $$$$$: 4393-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4393-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4393-block  2
    $$$$$: 4393-block  3
    $$$$$: 4393-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 4393-block  5
    $$$$$: 4393-block  6
    $$$$$: 4393-block  7
    $$$$$: 4393-block  8
    $$$$$: 4393-block  9
    $$$$$: 4393-block 10
    $$$$$: 4393-block 11
branch  6 never executed
branch  7 never executed
    #####: 4394:                return -2;
    $$$$$: 4394-block  0
    #####: 4395:            }
    $$$$$: 4395-block  0
        -: 4396:          else
    #####: 4397:            bufp->can_be_null = 1;
    $$$$$: 4397-block  0
        -: 4398:
    #####: 4399:          if (succeed_n_p)
    $$$$$: 4399-block  0
branch  0 never executed
branch  1 never executed
        -: 4400:            {
    #####: 4401:              EXTRACT_NUMBER_AND_INCR (k, p);	/* Skip the n.  */
    $$$$$: 4401-block  0
    $$$$$: 4401-block  1
    $$$$$: 4401-block  2
    $$$$$: 4401-block  3
    #####: 4402:              succeed_n_p = false;
    #####: 4403:	    }
    $$$$$: 4403-block  0
        -: 4404:
    #####: 4405:          continue;
    $$$$$: 4405-block  0
        -: 4406:
        -: 4407:
        -: 4408:	case succeed_n:
        -: 4409:          /* Get to the number of times to succeed.  */
    #####: 4410:          p += 2;		
        -: 4411:
        -: 4412:          /* Increment p past the n for when k != 0.  */
    #####: 4413:          EXTRACT_NUMBER_AND_INCR (k, p);
    $$$$$: 4413-block  0
    $$$$$: 4413-block  1
    $$$$$: 4413-block  2
    $$$$$: 4413-block  3
    #####: 4414:          if (k == 0)
    $$$$$: 4414-block  0
branch  0 never executed
branch  1 never executed
        -: 4415:	    {
    #####: 4416:              p -= 4;
    #####: 4417:  	      succeed_n_p = true;  /* Spaghetti code alert.  */
    #####: 4418:              goto handle_on_failure_jump;
    $$$$$: 4418-block  0
        -: 4419:            }
    #####: 4420:          continue;
    $$$$$: 4420-block  0
        -: 4421:
        -: 4422:
        -: 4423:	case set_number_at:
    #####: 4424:          p += 4;
    #####: 4425:          continue;
    $$$$$: 4425-block  0
        -: 4426:
        -: 4427:
        -: 4428:	case start_memory:
        -: 4429:        case stop_memory:
    #####: 4430:	  p += 2;
    #####: 4431:	  continue;
    $$$$$: 4431-block  0
        -: 4432:
        -: 4433:
        -: 4434:	default:
    #####: 4435:          abort (); /* We have listed all the cases.  */
    $$$$$: 4435-block  0
        -: 4436:        } /* switch *p++ */
        -: 4437:
        -: 4438:      /* Getting here means we have found the possible starting
        -: 4439:         characters for one path of the pattern -- and that the empty
        -: 4440:         string does not match.  We need not follow this path further.
        -: 4441:         Instead, look at the next alternative (remembered on the
        -: 4442:         stack), or quit if no more.  The test at the top of the loop
        -: 4443:         does these things.  */
    #####: 4444:      path_can_be_null = false;
    #####: 4445:      p = pend;
        -: 4446:    } /* while p */
        -: 4447:
        -: 4448:  /* Set `can_be_null' for the last path (also the first path, if the
        -: 4449:     pattern is empty).  */
    #####: 4450:  bufp->can_be_null |= path_can_be_null;
    #####: 4451:  return 0;
    $$$$$: 4451-block  0
    #####: 4452:} /* re_compile_fastmap */
    $$$$$: 4452-block  0
        -: 4453:
        -: 4454:/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
        -: 4455:   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
        -: 4456:   this memory for recording register information.  STARTS and ENDS
        -: 4457:   must be allocated using the malloc library routine, and must each
        -: 4458:   be at least NUM_REGS * sizeof (regoff_t) bytes long.
        -: 4459:
        -: 4460:   If NUM_REGS == 0, then subsequent matches should allocate their own
        -: 4461:   register data.
        -: 4462:
        -: 4463:   Unless this function is called, the first search or match using
        -: 4464:   PATTERN_BUFFER will allocate its own register data, without
        -: 4465:   freeing the old data.  */
        -: 4466:
        -: 4467:void
function re_set_registers called 0 returned 0% blocks executed 0%
    #####: 4468:re_set_registers (bufp, regs, num_regs, starts, ends)
        -: 4469:    struct re_pattern_buffer *bufp;
        -: 4470:    struct re_registers *regs;
        -: 4471:    unsigned num_regs;
        -: 4472:    regoff_t *starts, *ends;
        -: 4473:{
    #####: 4474:  if (num_regs)
    $$$$$: 4474-block  0
branch  0 never executed
branch  1 never executed
        -: 4475:    {
    #####: 4476:      bufp->regs_allocated = REGS_REALLOCATE;
    #####: 4477:      regs->num_regs = num_regs;
    #####: 4478:      regs->start = starts;
    #####: 4479:      regs->end = ends;
    #####: 4480:    }
    $$$$$: 4480-block  0
        -: 4481:  else
        -: 4482:    {
    #####: 4483:      bufp->regs_allocated = REGS_UNALLOCATED;
    #####: 4484:      regs->num_regs = 0;
    #####: 4485:      regs->start = regs->end = (regoff_t) 0;
    $$$$$: 4485-block  0
        -: 4486:    }
    #####: 4487:}
    $$$$$: 4487-block  0
        -: 4488:
        -: 4489:/* Searching routines.  */
        -: 4490:
        -: 4491:/* Like re_search_2, below, but only one string is specified, and
        -: 4492:   doesn't let you say where to stop matching. */
        -: 4493:
        -: 4494:int
function re_search called 0 returned 0% blocks executed 0%
    #####: 4495:re_search (bufp, string, size, startpos, range, regs)
        -: 4496:     struct re_pattern_buffer *bufp;
        -: 4497:     const char *string;
        -: 4498:     int size, startpos, range;
        -: 4499:     struct re_registers *regs;
        -: 4500:{
    #####: 4501:  return re_search_2 (bufp, NULL, 0, string, size, startpos, range, 
    $$$$$: 4501-block  0
    $$$$$: 4501-block  1
    #####: 4502:		      regs, size);
        -: 4503:}
        -: 4504:
        -: 4505:
        -: 4506:/* Using the compiled pattern in BUFP->buffer, first tries to match the
        -: 4507:   virtual concatenation of STRING1 and STRING2, starting first at index
        -: 4508:   STARTPOS, then at STARTPOS + 1, and so on.
        -: 4509:   
        -: 4510:   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.
        -: 4511:   
        -: 4512:   RANGE is how far to scan while trying to match.  RANGE = 0 means try
        -: 4513:   only at STARTPOS; in general, the last start tried is STARTPOS +
        -: 4514:   RANGE.
        -: 4515:   
        -: 4516:   In REGS, return the indices of the virtual concatenation of STRING1
        -: 4517:   and STRING2 that matched the entire BUFP->buffer and its contained
        -: 4518:   subexpressions.
        -: 4519:   
        -: 4520:   Do not consider matching one past the index STOP in the virtual
        -: 4521:   concatenation of STRING1 and STRING2.
        -: 4522:
        -: 4523:   We return either the position in the strings at which the match was
        -: 4524:   found, -1 if no match, or -2 if error (such as failure
        -: 4525:   stack overflow).  */
        -: 4526:
        -: 4527:int
function re_search_2 called 0 returned 0% blocks executed 0%
    #####: 4528:re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
        -: 4529:     struct re_pattern_buffer *bufp;
        -: 4530:     const char *string1, *string2;
        -: 4531:     int size1, size2;
        -: 4532:     int startpos;
        -: 4533:     int range;
        -: 4534:     struct re_registers *regs;
        -: 4535:     int stop;
        -: 4536:{
        -: 4537:  int val;
    #####: 4538:  register char *fastmap = bufp->fastmap;
    #####: 4539:  register char *translate = bufp->translate;
    #####: 4540:  int total_size = size1 + size2;
    #####: 4541:  int endpos = startpos + range;
        -: 4542:
        -: 4543:  /* Check for out-of-range STARTPOS.  */
    #####: 4544:  if (startpos < 0 || startpos > total_size)
    $$$$$: 4544-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4544-block  1
branch  2 never executed
branch  3 never executed
    #####: 4545:    return -1;
    $$$$$: 4545-block  0
        -: 4546:    
        -: 4547:  /* Fix up RANGE if it might eventually take us outside
        -: 4548:     the virtual concatenation of STRING1 and STRING2.  */
    #####: 4549:  if (endpos < -1)
    $$$$$: 4549-block  0
branch  0 never executed
branch  1 never executed
    #####: 4550:    range = -1 - startpos;
    $$$$$: 4550-block  0
    #####: 4551:  else if (endpos > total_size)
    $$$$$: 4551-block  0
branch  0 never executed
branch  1 never executed
    #####: 4552:    range = total_size - startpos;
    $$$$$: 4552-block  0
        -: 4553:
        -: 4554:  /* If the search isn't to be a backwards one, don't waste time in a
        -: 4555:     search for a pattern that must be anchored.  */
    #####: 4556:  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
    $$$$$: 4556-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4556-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4556-block  2
branch  4 never executed
branch  5 never executed
        -: 4557:    {
    #####: 4558:      if (startpos > 0)
    $$$$$: 4558-block  0
branch  0 never executed
branch  1 never executed
    #####: 4559:	return -1;
    $$$$$: 4559-block  0
        -: 4560:      else
    #####: 4561:	range = 1;
    $$$$$: 4561-block  0
    #####: 4562:    }
    $$$$$: 4562-block  0
        -: 4563:
        -: 4564:  /* Update the fastmap now if not correct already.  */
    #####: 4565:  if (fastmap && !bufp->fastmap_accurate)
    $$$$$: 4565-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4565-block  1
branch  2 never executed
branch  3 never executed
    #####: 4566:    if (re_compile_fastmap (bufp) == -2)
    $$$$$: 4566-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4566-block  1
    #####: 4567:      return -2;
    $$$$$: 4567-block  0
        -: 4568:  
        -: 4569:  /* Loop through the string, looking for a place to start matching.  */
    #####: 4570:  for (;;)
    $$$$$: 4570-block  0
    $$$$$: 4570-block  1
        -: 4571:    { 
        -: 4572:      /* If a fastmap is supplied, skip quickly over characters that
        -: 4573:         cannot be the start of a match.  If the pattern can match the
        -: 4574:         null string, however, we don't need to skip characters; we want
        -: 4575:         the first null string.  */
    #####: 4576:      if (fastmap && startpos < total_size && !bufp->can_be_null)
    $$$$$: 4576-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4576-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4576-block  2
branch  4 never executed
branch  5 never executed
        -: 4577:	{
    #####: 4578:	  if (range > 0)	/* Searching forwards.  */
    $$$$$: 4578-block  0
branch  0 never executed
branch  1 never executed
        -: 4579:	    {
        -: 4580:	      register const char *d;
    #####: 4581:	      register int lim = 0;
    #####: 4582:	      int irange = range;
        -: 4583:
    #####: 4584:              if (startpos < size1 && startpos + range >= size1)
    $$$$$: 4584-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4584-block  1
branch  2 never executed
branch  3 never executed
    #####: 4585:                lim = range - (size1 - startpos);
    $$$$$: 4585-block  0
        -: 4586:
    #####: 4587:	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
    $$$$$: 4587-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4587-block  1
    $$$$$: 4587-block  2
        -: 4588:   
        -: 4589:              /* Written out as an if-else to avoid testing `translate'
        -: 4590:                 inside the loop.  */
    #####: 4591:	      if (translate)
    $$$$$: 4591-block  0
branch  0 never executed
branch  1 never executed
    #####: 4592:                while (range > lim
    $$$$$: 4592-block  0
    $$$$$: 4592-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4592-block  2
    $$$$$: 4592-block  3
    #####: 4593:                       && !fastmap[(unsigned char)
    $$$$$: 4593-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4593-block  1
    $$$$$: 4593-block  2
    #####: 4594:				   translate[(unsigned char) *d++]])
    #####: 4595:                  range--;
        -: 4596:	      else
    #####: 4597:                while (range > lim && !fastmap[(unsigned char) *d++])
    $$$$$: 4597-block  0
    $$$$$: 4597-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4597-block  2
    $$$$$: 4597-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 4597-block  4
    #####: 4598:                  range--;
        -: 4599:
    #####: 4600:	      startpos += irange - range;
    #####: 4601:	    }
    $$$$$: 4601-block  0
        -: 4602:	  else				/* Searching backwards.  */
        -: 4603:	    {
    #####: 4604:	      register char c = (size1 == 0 || startpos >= size1
    $$$$$: 4604-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4604-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4604-block  2
    $$$$$: 4604-block  3
    #####: 4605:                                 ? string2[startpos - size1] 
    #####: 4606:                                 : string1[startpos]);
        -: 4607:
    #####: 4608:	      if (!fastmap[(unsigned char) TRANSLATE (c)])
    $$$$$: 4608-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4608-block  1
    $$$$$: 4608-block  2
    $$$$$: 4608-block  3
branch  2 never executed
branch  3 never executed
    #####: 4609:		goto advance;
    $$$$$: 4609-block  0
        -: 4610:	    }
    #####: 4611:	}
    $$$$$: 4611-block  0
        -: 4612:
        -: 4613:      /* If can't match the null string, and that's all we have left, fail.  */
    #####: 4614:      if (range >= 0 && startpos == total_size && fastmap
    $$$$$: 4614-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4614-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4614-block  2
branch  4 never executed
branch  5 never executed
    #####: 4615:          && !bufp->can_be_null)
    $$$$$: 4615-block  0
branch  0 never executed
branch  1 never executed
    #####: 4616:	return -1;
    $$$$$: 4616-block  0
        -: 4617:
    #####: 4618:      val = re_match_2 (bufp, string1, size1, string2, size2,
    #####: 4619:	                startpos, regs, stop);
    #####: 4620:      if (val >= 0)
    $$$$$: 4620-block  0
branch  0 never executed
branch  1 never executed
    #####: 4621:	return startpos;
    $$$$$: 4621-block  0
        -: 4622:        
    #####: 4623:      if (val == -2)
    $$$$$: 4623-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4623-block  1
    #####: 4624:	return -2;
    $$$$$: 4624-block  0
        -: 4625:
        -: 4626:    advance:
    #####: 4627:      if (!range) 
    $$$$$: 4627-block  0
branch  0 never executed
branch  1 never executed
    #####: 4628:        break;
    $$$$$: 4628-block  0
    #####: 4629:      else if (range > 0) 
    $$$$$: 4629-block  0
branch  0 never executed
branch  1 never executed
        -: 4630:        {
    #####: 4631:          range--; 
    #####: 4632:          startpos++;
    #####: 4633:        }
    $$$$$: 4633-block  0
        -: 4634:      else
        -: 4635:        {
    #####: 4636:          range++; 
    #####: 4637:          startpos--;
    $$$$$: 4637-block  0
        -: 4638:        }
        -: 4639:    }
    #####: 4640:  return -1;
    $$$$$: 4640-block  0
    #####: 4641:} /* re_search_2 */
    $$$$$: 4641-block  0
        -: 4642:
        -: 4643:/* Declarations and macros for re_match_2.  */
        -: 4644:
        -: 4645:static int bcmp_translate ();
        -: 4646:static boolean alt_match_null_string_p (),
        -: 4647:               common_op_match_null_string_p (),
        -: 4648:               group_match_null_string_p ();
        -: 4649:
        -: 4650:/* Structure for per-register (a.k.a. per-group) information.
        -: 4651:   This must not be longer than one word, because we push this value
        -: 4652:   onto the failure stack.  Other register information, such as the
        -: 4653:   starting and ending positions (which are addresses), and the list of
        -: 4654:   inner groups (which is a bits list) are maintained in separate
        -: 4655:   variables.  
        -: 4656:   
        -: 4657:   We are making a (strictly speaking) nonportable assumption here: that
        -: 4658:   the compiler will pack our bit fields into something that fits into
        -: 4659:   the type of `word', i.e., is something that fits into one item on the
        -: 4660:   failure stack.  */
        -: 4661:typedef union
        -: 4662:{
        -: 4663:  fail_stack_elt_t word;
        -: 4664:  struct
        -: 4665:  {
        -: 4666:      /* This field is one if this group can match the empty string,
        -: 4667:         zero if not.  If not yet determined,  `MATCH_NULL_UNSET_VALUE'.  */
        -: 4668:#define MATCH_NULL_UNSET_VALUE 3
        -: 4669:    unsigned match_null_string_p : 2;
        -: 4670:    unsigned is_active : 1;
        -: 4671:    unsigned matched_something : 1;
        -: 4672:    unsigned ever_matched_something : 1;
        -: 4673:  } bits;
        -: 4674:} register_info_type;
        -: 4675:
        -: 4676:#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.match_null_string_p)
        -: 4677:#define IS_ACTIVE(R)  ((R).bits.is_active)
        -: 4678:#define MATCHED_SOMETHING(R)  ((R).bits.matched_something)
        -: 4679:#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_matched_something)
        -: 4680:
        -: 4681:
        -: 4682:/* Call this when have matched a real character; it sets `matched' flags
        -: 4683:   for the subexpressions which we are currently inside.  Also records
        -: 4684:   that those subexprs have matched.  */
        -: 4685:#define SET_REGS_MATCHED()						\
        -: 4686:  do									\
        -: 4687:    {									\
        -: 4688:      unsigned r;							\
        -: 4689:      for (r = lowest_active_reg; r <= highest_active_reg; r++)		\
        -: 4690:        {								\
        -: 4691:          MATCHED_SOMETHING (reg_info[r])				\
        -: 4692:            = EVER_MATCHED_SOMETHING (reg_info[r])			\
        -: 4693:            = 1;							\
        -: 4694:        }								\
        -: 4695:    }									\
        -: 4696:  while (0)
        -: 4697:
        -: 4698:
        -: 4699:/* This converts PTR, a pointer into one of the search strings `string1'
        -: 4700:   and `string2' into an offset from the beginning of that string.  */
        -: 4701:#define POINTER_TO_OFFSET(ptr)						\
        -: 4702:  (FIRST_STRING_P (ptr) ? (ptr) - string1 : (ptr) - string2 + size1)
        -: 4703:
        -: 4704:/* Registers are set to a sentinel when they haven't yet matched.  */
        -: 4705:#define REG_UNSET_VALUE ((char *) -1)
        -: 4706:#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)
        -: 4707:
        -: 4708:
        -: 4709:/* Macros for dealing with the split strings in re_match_2.  */
        -: 4710:
        -: 4711:#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)
        -: 4712:
        -: 4713:/* Call before fetching a character with *d.  This switches over to
        -: 4714:   string2 if necessary.  */
        -: 4715:#define PREFETCH()							\
        -: 4716:  while (d == dend)						    	\
        -: 4717:    {									\
        -: 4718:      /* End of string2 => fail.  */					\
        -: 4719:      if (dend == end_match_2) 						\
        -: 4720:        goto fail;							\
        -: 4721:      /* End of string1 => advance to string2.  */ 			\
        -: 4722:      d = string2;						        \
        -: 4723:      dend = end_match_2;						\
        -: 4724:    }
        -: 4725:
        -: 4726:
        -: 4727:/* Test if at very beginning or at very end of the virtual concatenation
        -: 4728:   of `string1' and `string2'.  If only one string, it's `string2'.  */
        -: 4729:#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
        -: 4730:#define AT_STRINGS_END(d) ((d) == end2)	
        -: 4731:
        -: 4732:
        -: 4733:/* Test if D points to a character which is word-constituent.  We have
        -: 4734:   two special cases to check for: if past the end of string1, look at
        -: 4735:   the first character in string2; and if before the beginning of
        -: 4736:   string2, look at the last character in string1.  */
        -: 4737:#define WORDCHAR_P(d)							\
        -: 4738:  (SYNTAX ((d) == end1 ? *string2					\
        -: 4739:           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
        -: 4740:   == Sword)
        -: 4741:
        -: 4742:/* Test if the character before D and the one at D differ with respect
        -: 4743:   to being word-constituent.  */
        -: 4744:#define AT_WORD_BOUNDARY(d)						\
        -: 4745:  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
        -: 4746:   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))
        -: 4747:
        -: 4748:
        -: 4749:/* Free everything we malloc.  */
        -: 4750:#ifdef REGEX_MALLOC
        -: 4751:#define FREE_VAR(var) if (var) free (var); var = NULL
        -: 4752:#define FREE_VARIABLES()						\
        -: 4753:  do {									\
        -: 4754:    FREE_VAR (fail_stack.stack);					\
        -: 4755:    FREE_VAR (regstart);						\
        -: 4756:    FREE_VAR (regend);							\
        -: 4757:    FREE_VAR (old_regstart);						\
        -: 4758:    FREE_VAR (old_regend);						\
        -: 4759:    FREE_VAR (best_regstart);						\
        -: 4760:    FREE_VAR (best_regend);						\
        -: 4761:    FREE_VAR (reg_info);						\
        -: 4762:    FREE_VAR (reg_dummy);						\
        -: 4763:    FREE_VAR (reg_info_dummy);						\
        -: 4764:  } while (0)
        -: 4765:#else /* not REGEX_MALLOC */
        -: 4766:/* Some MIPS systems (at least) want this to free alloca'd storage.  */
        -: 4767:#define FREE_VARIABLES() alloca (0)
        -: 4768:#endif /* not REGEX_MALLOC */
        -: 4769:
        -: 4770:
        -: 4771:/* These values must meet several constraints.  They must not be valid
        -: 4772:   register values; since we have a limit of 255 registers (because
        -: 4773:   we use only one byte in the pattern for the register number), we can
        -: 4774:   use numbers larger than 255.  They must differ by 1, because of
        -: 4775:   NUM_FAILURE_ITEMS above.  And the value for the lowest register must
        -: 4776:   be larger than the value for the highest register, so we do not try
        -: 4777:   to actually save any registers when none are active.  */
        -: 4778:#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
        -: 4779:#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)
        -: 4780:
        -: 4781:/* Matching routines.  */
        -: 4782:
        -: 4783:#ifndef emacs   /* Emacs never uses this.  */
        -: 4784:/* re_match is like re_match_2 except it takes only a single string.  */
        -: 4785:
        -: 4786:int
function re_match called 0 returned 0% blocks executed 0%
    #####: 4787:re_match (bufp, string, size, pos, regs)
        -: 4788:     struct re_pattern_buffer *bufp;
        -: 4789:     const char *string;
        -: 4790:     int size, pos;
        -: 4791:     struct re_registers *regs;
        -: 4792: {
    #####: 4793:  return re_match_2 (bufp, NULL, 0, string, size, pos, regs, size); 
    $$$$$: 4793-block  0
        -: 4794:}
        -: 4795:#endif /* not emacs */
        -: 4796:
        -: 4797:
        -: 4798:/* re_match_2 matches the compiled pattern in BUFP against the
        -: 4799:   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1
        -: 4800:   and SIZE2, respectively).  We start matching at POS, and stop
        -: 4801:   matching at STOP.
        -: 4802:   
        -: 4803:   If REGS is non-null and the `no_sub' field of BUFP is nonzero, we
        -: 4804:   store offsets for the substring each group matched in REGS.  See the
        -: 4805:   documentation for exactly how many groups we fill.
        -: 4806:
        -: 4807:   We return -1 if no match, -2 if an internal error (such as the
        -: 4808:   failure stack overflowing).  Otherwise, we return the length of the
        -: 4809:   matched substring.  */
        -: 4810:
        -: 4811:int
function re_match_2 called 0 returned 0% blocks executed 0%
    #####: 4812:re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
        -: 4813:     struct re_pattern_buffer *bufp;
        -: 4814:     const char *string1, *string2;
        -: 4815:     int size1, size2;
        -: 4816:     int pos;
        -: 4817:     struct re_registers *regs;
        -: 4818:     int stop;
        -: 4819:{
        -: 4820:  /* General temporaries.  */
        -: 4821:  int mcnt;
        -: 4822:  unsigned char *p1;
        -: 4823:
        -: 4824:  /* Just past the end of the corresponding string.  */
        -: 4825:  const char *end1, *end2;
        -: 4826:
        -: 4827:  /* Pointers into string1 and string2, just past the last characters in
        -: 4828:     each to consider matching.  */
        -: 4829:  const char *end_match_1, *end_match_2;
        -: 4830:
        -: 4831:  /* Where we are in the data, and the end of the current string.  */
        -: 4832:  const char *d, *dend;
        -: 4833:  
        -: 4834:  /* Where we are in the pattern, and the end of the pattern.  */
    #####: 4835:  unsigned char *p = bufp->buffer;
    #####: 4836:  register unsigned char *pend = p + bufp->used;
        -: 4837:
        -: 4838:  /* We use this to map every character in the string.  */
    #####: 4839:  char *translate = bufp->translate;
        -: 4840:
        -: 4841:  /* Failure point stack.  Each place that can handle a failure further
        -: 4842:     down the line pushes a failure point on this stack.  It consists of
        -: 4843:     restart, regend, and reg_info for all registers corresponding to
        -: 4844:     the subexpressions we're currently inside, plus the number of such
        -: 4845:     registers, and, finally, two char *'s.  The first char * is where
        -: 4846:     to resume scanning the pattern; the second one is where to resume
        -: 4847:     scanning the strings.  If the latter is zero, the failure point is
        -: 4848:     a ``dummy''; if a failure happens and the failure point is a dummy,
        -: 4849:     it gets discarded and the next next one is tried.  */
        -: 4850:  fail_stack_type fail_stack;
        -: 4851:#ifdef DEBUG
        -: 4852:  static unsigned failure_id = 0;
        -: 4853:  unsigned nfailure_points_pushed = 0, nfailure_points_popped = 0;
        -: 4854:#endif
        -: 4855:
        -: 4856:  /* We fill all the registers internally, independent of what we
        -: 4857:     return, for use in backreferences.  The number here includes
        -: 4858:     an element for register zero.  */
    #####: 4859:  unsigned num_regs = bufp->re_nsub + 1;
        -: 4860:  
        -: 4861:  /* The currently active registers.  */
    #####: 4862:  unsigned lowest_active_reg = NO_LOWEST_ACTIVE_REG;
    #####: 4863:  unsigned highest_active_reg = NO_HIGHEST_ACTIVE_REG;
        -: 4864:
        -: 4865:  /* Information on the contents of registers. These are pointers into
        -: 4866:     the input strings; they record just what was matched (on this
        -: 4867:     attempt) by a subexpression part of the pattern, that is, the
        -: 4868:     regnum-th regstart pointer points to where in the pattern we began
        -: 4869:     matching and the regnum-th regend points to right after where we
        -: 4870:     stopped matching the regnum-th subexpression.  (The zeroth register
        -: 4871:     keeps track of what the whole pattern matches.)  */
        -: 4872:  const char **regstart, **regend;
        -: 4873:
        -: 4874:  /* If a group that's operated upon by a repetition operator fails to
        -: 4875:     match anything, then the register for its start will need to be
        -: 4876:     restored because it will have been set to wherever in the string we
        -: 4877:     are when we last see its open-group operator.  Similarly for a
        -: 4878:     register's end.  */
        -: 4879:  const char **old_regstart, **old_regend;
        -: 4880:
        -: 4881:  /* The is_active field of reg_info helps us keep track of which (possibly
        -: 4882:     nested) subexpressions we are currently in. The matched_something
        -: 4883:     field of reg_info[reg_num] helps us tell whether or not we have
        -: 4884:     matched any of the pattern so far this time through the reg_num-th
        -: 4885:     subexpression.  These two fields get reset each time through any
        -: 4886:     loop their register is in.  */
        -: 4887:  register_info_type *reg_info; 
        -: 4888:
        -: 4889:  /* The following record the register info as found in the above
        -: 4890:     variables when we find a match better than any we've seen before. 
        -: 4891:     This happens as we backtrack through the failure points, which in
        -: 4892:     turn happens only if we have not yet matched the entire string. */
    #####: 4893:  unsigned best_regs_set = false;
        -: 4894:  const char **best_regstart, **best_regend;
        -: 4895:  
        -: 4896:  /* Logically, this is `best_regend[0]'.  But we don't want to have to
        -: 4897:     allocate space for that if we're not allocating space for anything
        -: 4898:     else (see below).  Also, we never need info about register 0 for
        -: 4899:     any of the other register vectors, and it seems rather a kludge to
        -: 4900:     treat `best_regend' differently than the rest.  So we keep track of
        -: 4901:     the end of the best match so far in a separate variable.  We
        -: 4902:     initialize this to NULL so that when we backtrack the first time
        -: 4903:     and need to test it, it's not garbage.  */
    #####: 4904:  const char *match_end = NULL;
        -: 4905:
        -: 4906:  /* Used when we pop values we don't care about.  */
        -: 4907:  const char **reg_dummy;
        -: 4908:  register_info_type *reg_info_dummy;
        -: 4909:
        -: 4910:#ifdef DEBUG
        -: 4911:  /* Counts the total number of registers pushed.  */
        -: 4912:  unsigned num_regs_pushed = 0; 	
        -: 4913:#endif
        -: 4914:
        -: 4915:  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
        -: 4916:  
    #####: 4917:  INIT_FAIL_STACK ();
    $$$$$: 4917-block  0
    $$$$$: 4917-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4917-block  2
    $$$$$: 4917-block  3
        -: 4918:  
        -: 4919:  /* Do not bother to initialize all the register variables if there are
        -: 4920:     no groups in the pattern, as it takes a fair amount of time.  If
        -: 4921:     there are groups, we include space for register 0 (the whole
        -: 4922:     pattern), even though we never use it, since it simplifies the
        -: 4923:     array indexing.  We should fix this.  */
    #####: 4924:  if (bufp->re_nsub)
    $$$$$: 4924-block  0
branch  0 never executed
branch  1 never executed
        -: 4925:    {
    #####: 4926:      regstart = REGEX_TALLOC (num_regs, const char *);
    #####: 4927:      regend = REGEX_TALLOC (num_regs, const char *);
    #####: 4928:      old_regstart = REGEX_TALLOC (num_regs, const char *);
    #####: 4929:      old_regend = REGEX_TALLOC (num_regs, const char *);
    #####: 4930:      best_regstart = REGEX_TALLOC (num_regs, const char *);
    #####: 4931:      best_regend = REGEX_TALLOC (num_regs, const char *);
    #####: 4932:      reg_info = REGEX_TALLOC (num_regs, register_info_type);
    #####: 4933:      reg_dummy = REGEX_TALLOC (num_regs, const char *);
    #####: 4934:      reg_info_dummy = REGEX_TALLOC (num_regs, register_info_type);
        -: 4935:
    #####: 4936:      if (!(regstart && regend && old_regstart && old_regend && reg_info 
    $$$$$: 4936-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4936-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4936-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 4936-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 4936-block  4
branch  8 never executed
branch  9 never executed
    #####: 4937:            && best_regstart && best_regend && reg_dummy && reg_info_dummy)) 
    $$$$$: 4937-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4937-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4937-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 4937-block  3
branch  6 never executed
branch  7 never executed
        -: 4938:        {
    #####: 4939:          FREE_VARIABLES ();
    #####: 4940:          return -2;
    $$$$$: 4940-block  0
        -: 4941:        }
    #####: 4942:    }
    $$$$$: 4942-block  0
        -: 4943:#ifdef REGEX_MALLOC
        -: 4944:  else
        -: 4945:    {
        -: 4946:      /* We must initialize all our variables to NULL, so that
        -: 4947:         `FREE_VARIABLES' doesn't try to free them.  */
        -: 4948:      regstart = regend = old_regstart = old_regend = best_regstart
        -: 4949:        = best_regend = reg_dummy = NULL;
        -: 4950:      reg_info = reg_info_dummy = (register_info_type *) NULL;
        -: 4951:    }
        -: 4952:#endif /* REGEX_MALLOC */
        -: 4953:
        -: 4954:  /* The starting position is bogus.  */
    #####: 4955:  if (pos < 0 || pos > size1 + size2)
    $$$$$: 4955-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4955-block  1
branch  2 never executed
branch  3 never executed
        -: 4956:    {
    #####: 4957:      FREE_VARIABLES ();
    #####: 4958:      return -1;
    $$$$$: 4958-block  0
        -: 4959:    }
        -: 4960:    
        -: 4961:  /* Initialize subexpression text positions to -1 to mark ones that no
        -: 4962:     start_memory/stop_memory has been seen for. Also initialize the
        -: 4963:     register information struct.  */
    #####: 4964:  for (mcnt = 1; mcnt < num_regs; mcnt++)
    $$$$$: 4964-block  0
    $$$$$: 4964-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4964-block  2
        -: 4965:    {
    #####: 4966:      regstart[mcnt] = regend[mcnt] 
    #####: 4967:        = old_regstart[mcnt] = old_regend[mcnt] = REG_UNSET_VALUE;
        -: 4968:        
    #####: 4969:      REG_MATCH_NULL_STRING_P (reg_info[mcnt]) = MATCH_NULL_UNSET_VALUE;
    #####: 4970:      IS_ACTIVE (reg_info[mcnt]) = 0;
    #####: 4971:      MATCHED_SOMETHING (reg_info[mcnt]) = 0;
    #####: 4972:      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 0;
    #####: 4973:    }
    $$$$$: 4973-block  0
        -: 4974:  
        -: 4975:  /* We move `string1' into `string2' if the latter's empty -- but not if
        -: 4976:     `string1' is null.  */
    #####: 4977:  if (size2 == 0 && string1 != NULL)
    $$$$$: 4977-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4977-block  1
branch  2 never executed
branch  3 never executed
        -: 4978:    {
    #####: 4979:      string2 = string1;
    #####: 4980:      size2 = size1;
    #####: 4981:      string1 = 0;
    #####: 4982:      size1 = 0;
    #####: 4983:    }
    $$$$$: 4983-block  0
    #####: 4984:  end1 = string1 + size1;
    #####: 4985:  end2 = string2 + size2;
        -: 4986:
        -: 4987:  /* Compute where to stop matching, within the two strings.  */
    #####: 4988:  if (stop <= size1)
    $$$$$: 4988-block  0
branch  0 never executed
branch  1 never executed
        -: 4989:    {
    #####: 4990:      end_match_1 = string1 + stop;
    #####: 4991:      end_match_2 = string2;
    #####: 4992:    }
    $$$$$: 4992-block  0
        -: 4993:  else
        -: 4994:    {
    #####: 4995:      end_match_1 = end1;
    #####: 4996:      end_match_2 = string2 + stop - size1;
    $$$$$: 4996-block  0
        -: 4997:    }
        -: 4998:
        -: 4999:  /* `p' scans through the pattern as `d' scans through the data. 
        -: 5000:     `dend' is the end of the input string that `d' points within.  `d'
        -: 5001:     is advanced into the following input string whenever necessary, but
        -: 5002:     this happens before fetching; therefore, at the beginning of the
        -: 5003:     loop, `d' can be pointing at the end of a string, but it cannot
        -: 5004:     equal `string2'.  */
    #####: 5005:  if (size1 > 0 && pos <= size1)
    $$$$$: 5005-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5005-block  1
branch  2 never executed
branch  3 never executed
        -: 5006:    {
    #####: 5007:      d = string1 + pos;
    #####: 5008:      dend = end_match_1;
    #####: 5009:    }
    $$$$$: 5009-block  0
        -: 5010:  else
        -: 5011:    {
    #####: 5012:      d = string2 + pos - size1;
    #####: 5013:      dend = end_match_2;
    $$$$$: 5013-block  0
        -: 5014:    }
        -: 5015:
        -: 5016:  DEBUG_PRINT1 ("The compiled pattern is: ");
        -: 5017:  DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend);
        -: 5018:  DEBUG_PRINT1 ("The string to match is: `");
        -: 5019:  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
        -: 5020:  DEBUG_PRINT1 ("'\n");
        -: 5021:  
        -: 5022:  /* This loops over pattern commands.  It exits by returning from the
        -: 5023:     function if the match is complete, or it drops through if the match
        -: 5024:     fails at this starting point in the input data.  */
    #####: 5025:  for (;;)
    $$$$$: 5025-block  0
    $$$$$: 5025-block  1
        -: 5026:    {
        -: 5027:      DEBUG_PRINT2 ("\n0x%x: ", p);
        -: 5028:
    #####: 5029:      if (p == pend)
    $$$$$: 5029-block  0
branch  0 never executed
branch  1 never executed
        -: 5030:	{ /* End of pattern means we might have succeeded.  */
        -: 5031:          DEBUG_PRINT1 ("end of pattern ... ");
        -: 5032:          
        -: 5033:	  /* If we haven't matched the entire string, and we want the
        -: 5034:             longest match, try backtracking.  */
    #####: 5035:          if (d != end_match_2)
    $$$$$: 5035-block  0
branch  0 never executed
branch  1 never executed
        -: 5036:	    {
        -: 5037:              DEBUG_PRINT1 ("backtracking.\n");
        -: 5038:              
    #####: 5039:              if (!FAIL_STACK_EMPTY ())
    $$$$$: 5039-block  0
branch  0 never executed
branch  1 never executed
        -: 5040:                { /* More failure points to try.  */
    #####: 5041:                  boolean same_str_p = (FIRST_STRING_P (match_end) 
    $$$$$: 5041-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5041-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5041-block  2
    #####: 5042:	        	                == MATCHING_IN_FIRST_STRING);
        -: 5043:
        -: 5044:                  /* If exceeds best match so far, save it.  */
    #####: 5045:                  if (!best_regs_set
    $$$$$: 5045-block  0
    $$$$$: 5045-block  1
    #####: 5046:                      || (same_str_p && d > match_end)
    $$$$$: 5046-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5046-block  1
branch  2 never executed
branch  3 never executed
    #####: 5047:                      || (!same_str_p && !MATCHING_IN_FIRST_STRING))
    $$$$$: 5047-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5047-block  1
branch  2 never executed
branch  3 never executed
        -: 5048:                    {
    #####: 5049:                      best_regs_set = true;
    #####: 5050:                      match_end = d;
        -: 5051:                      
        -: 5052:                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
        -: 5053:                      
    #####: 5054:                      for (mcnt = 1; mcnt < num_regs; mcnt++)
    $$$$$: 5054-block  0
    $$$$$: 5054-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5054-block  2
        -: 5055:                        {
    #####: 5056:                          best_regstart[mcnt] = regstart[mcnt];
    #####: 5057:                          best_regend[mcnt] = regend[mcnt];
    #####: 5058:                        }
    $$$$$: 5058-block  0
    #####: 5059:                    }
    $$$$$: 5059-block  0
    #####: 5060:                  goto fail;	       
    $$$$$: 5060-block  0
        -: 5061:                }
        -: 5062:
        -: 5063:              /* If no failure points, don't restore garbage.  */
    #####: 5064:              else if (best_regs_set)   
    $$$$$: 5064-block  0
branch  0 never executed
branch  1 never executed
    #####: 5065:                {
    $$$$$: 5065-block  0
        -: 5066:  	        restore_best_regs:
        -: 5067:                  /* Restore best match.  It may happen that `dend ==
        -: 5068:                     end_match_1' while the restored d is in string2.
        -: 5069:                     For example, the pattern `x.*y.*z' against the
        -: 5070:                     strings `x-' and `y-z-', if the two strings are
        -: 5071:                     not consecutive in memory.  */
        -: 5072:                  DEBUG_PRINT1 ("Restoring best registers.\n");
        -: 5073:                  
    #####: 5074:                  d = match_end;
    #####: 5075:                  dend = ((d >= string1 && d <= end1)
    $$$$$: 5075-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5075-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5075-block  2
    $$$$$: 5075-block  3
    #####: 5076:		           ? end_match_1 : end_match_2);
        -: 5077:
    #####: 5078:		  for (mcnt = 1; mcnt < num_regs; mcnt++)
    $$$$$: 5078-block  0
    $$$$$: 5078-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5078-block  2
        -: 5079:		    {
    #####: 5080:		      regstart[mcnt] = best_regstart[mcnt];
    #####: 5081:		      regend[mcnt] = best_regend[mcnt];
    #####: 5082:		    }
    $$$$$: 5082-block  0
    #####: 5083:                }
    $$$$$: 5083-block  0
    #####: 5084:            } /* d != end_match_2 */
    $$$$$: 5084-block  0
        -: 5085:
        -: 5086:          DEBUG_PRINT1 ("Accepting match.\n");
        -: 5087:
        -: 5088:          /* If caller wants register contents data back, do it.  */
    #####: 5089:          if (regs && !bufp->no_sub)
    $$$$$: 5089-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5089-block  1
branch  2 never executed
branch  3 never executed
        -: 5090:	    {
        -: 5091:              /* Have the register data arrays been allocated?  */
    #####: 5092:              if (bufp->regs_allocated == REGS_UNALLOCATED)
    $$$$$: 5092-block  0
branch  0 never executed
branch  1 never executed
        -: 5093:                { /* No.  So allocate them with malloc.  We need one
        -: 5094:                     extra element beyond `num_regs' for the `-1' marker
        -: 5095:                     GNU code uses.  */
    #####: 5096:                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
    $$$$$: 5096-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5096-block  1
    $$$$$: 5096-block  2
    #####: 5097:                  regs->start = TALLOC (regs->num_regs, regoff_t);
    #####: 5098:                  regs->end = TALLOC (regs->num_regs, regoff_t);
    #####: 5099:                  if (regs->start == NULL || regs->end == NULL)
    $$$$$: 5099-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5099-block  1
branch  2 never executed
branch  3 never executed
    #####: 5100:                    return -2;
    $$$$$: 5100-block  0
    #####: 5101:                  bufp->regs_allocated = REGS_REALLOCATE;
    #####: 5102:                }
    $$$$$: 5102-block  0
    #####: 5103:              else if (bufp->regs_allocated == REGS_REALLOCATE)
    $$$$$: 5103-block  0
branch  0 never executed
branch  1 never executed
        -: 5104:                { /* Yes.  If we need more elements than were already
        -: 5105:                     allocated, reallocate them.  If we need fewer, just
        -: 5106:                     leave it alone.  */
    #####: 5107:                  if (regs->num_regs < num_regs + 1)
    $$$$$: 5107-block  0
branch  0 never executed
branch  1 never executed
        -: 5108:                    {
    #####: 5109:                      regs->num_regs = num_regs + 1;
    #####: 5110:                      RETALLOC (regs->start, regs->num_regs, regoff_t);
    #####: 5111:                      RETALLOC (regs->end, regs->num_regs, regoff_t);
    #####: 5112:                      if (regs->start == NULL || regs->end == NULL)
    $$$$$: 5112-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5112-block  1
branch  2 never executed
branch  3 never executed
    #####: 5113:                        return -2;
    $$$$$: 5113-block  0
    #####: 5114:                    }
    $$$$$: 5114-block  0
    #####: 5115:                }
    $$$$$: 5115-block  0
        -: 5116:              else
        -: 5117:		{
        -: 5118:		  /* These braces fend off a "empty body in an else-statement"
        -: 5119:		     warning under GCC when assert expands to nothing.  */
        -: 5120:		  assert (bufp->regs_allocated == REGS_FIXED);
        -: 5121:		}
        -: 5122:
        -: 5123:              /* Convert the pointer data in `regstart' and `regend' to
        -: 5124:                 indices.  Register zero has to be set differently,
        -: 5125:                 since we haven't kept track of any info for it.  */
    #####: 5126:              if (regs->num_regs > 0)
    $$$$$: 5126-block  0
branch  0 never executed
branch  1 never executed
        -: 5127:                {
    #####: 5128:                  regs->start[0] = pos;
    #####: 5129:                  regs->end[0] = (MATCHING_IN_FIRST_STRING ? d - string1
    $$$$$: 5129-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5129-block  1
    $$$$$: 5129-block  2
    #####: 5130:			          : d - string2 + size1);
    #####: 5131:                }
    $$$$$: 5131-block  0
        -: 5132:              
        -: 5133:              /* Go through the first `min (num_regs, regs->num_regs)'
        -: 5134:                 registers, since that is all we initialized.  */
    #####: 5135:	      for (mcnt = 1; mcnt < MIN (num_regs, regs->num_regs); mcnt++)
    $$$$$: 5135-block  0
    $$$$$: 5135-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5135-block  2
    $$$$$: 5135-block  3
    $$$$$: 5135-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 5135-block  5
        -: 5136:		{
    #####: 5137:                  if (REG_UNSET (regstart[mcnt]) || REG_UNSET (regend[mcnt]))
    $$$$$: 5137-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5137-block  1
branch  2 never executed
branch  3 never executed
    #####: 5138:                    regs->start[mcnt] = regs->end[mcnt] = -1;
    $$$$$: 5138-block  0
        -: 5139:                  else
        -: 5140:                    {
    #####: 5141:		      regs->start[mcnt] = POINTER_TO_OFFSET (regstart[mcnt]);
    $$$$$: 5141-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5141-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5141-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5141-block  3
    $$$$$: 5141-block  4
    #####: 5142:                      regs->end[mcnt] = POINTER_TO_OFFSET (regend[mcnt]);
    $$$$$: 5142-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5142-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5142-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5142-block  3
    $$$$$: 5142-block  4
    $$$$$: 5142-block  5
        -: 5143:                    }
    #####: 5144:		}
    $$$$$: 5144-block  0
        -: 5145:              
        -: 5146:              /* If the regs structure we return has more elements than
        -: 5147:                 were in the pattern, set the extra elements to -1.  If
        -: 5148:                 we (re)allocated the registers, this is the case,
        -: 5149:                 because we always allocate enough to have at least one
        -: 5150:                 -1 at the end.  */
    #####: 5151:              for (mcnt = num_regs; mcnt < regs->num_regs; mcnt++)
    $$$$$: 5151-block  0
    $$$$$: 5151-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5151-block  2
    #####: 5152:                regs->start[mcnt] = regs->end[mcnt] = -1;
    $$$$$: 5152-block  0
    #####: 5153:	    } /* regs && !bufp->no_sub */
    $$$$$: 5153-block  0
        -: 5154:
    #####: 5155:          FREE_VARIABLES ();
        -: 5156:          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
        -: 5157:                        nfailure_points_pushed, nfailure_points_popped,
        -: 5158:                        nfailure_points_pushed - nfailure_points_popped);
        -: 5159:          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
        -: 5160:
    #####: 5161:          mcnt = d - pos - (MATCHING_IN_FIRST_STRING 
    $$$$$: 5161-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5161-block  1
    $$$$$: 5161-block  2
    #####: 5162:			    ? string1 
    #####: 5163:			    : string2 - size1);
        -: 5164:
        -: 5165:          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
        -: 5166:
    #####: 5167:          return mcnt;
    $$$$$: 5167-block  0
        -: 5168:        }
        -: 5169:
        -: 5170:      /* Otherwise match next pattern command.  */
        -: 5171:#ifdef SWITCH_ENUM_BUG
        -: 5172:      switch ((int) ((re_opcode_t) *p++))
        -: 5173:#else
    #####: 5174:      switch ((re_opcode_t) *p++)
    $$$$$: 5174-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
    $$$$$: 5174-block  1
        -: 5175:#endif
        -: 5176:	{
        -: 5177:        /* Ignore these.  Used to ignore the n of succeed_n's which
        -: 5178:           currently have n == 0.  */
        -: 5179:        case no_op:
        -: 5180:          DEBUG_PRINT1 ("EXECUTING no_op.\n");
    #####: 5181:          break;
    $$$$$: 5181-block  0
        -: 5182:
        -: 5183:
        -: 5184:        /* Match the next n pattern characters exactly.  The following
        -: 5185:           byte in the pattern defines n, and the n bytes after that
        -: 5186:           are the characters to match.  */
        -: 5187:	case exactn:
    #####: 5188:	  mcnt = *p++;
        -: 5189:          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
        -: 5190:
        -: 5191:          /* This is written out as an if-else so we don't waste time
        -: 5192:             testing `translate' inside the loop.  */
    #####: 5193:          if (translate)
    $$$$$: 5193-block  0
branch  0 never executed
branch  1 never executed
        -: 5194:	    {
    #####: 5195:	      do
    $$$$$: 5195-block  0
        -: 5196:		{
    #####: 5197:		  PREFETCH ();
    $$$$$: 5197-block  0
    $$$$$: 5197-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5197-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5197-block  3
    $$$$$: 5197-block  4
    #####: 5198:		  if (translate[(unsigned char) *d++] != (char) *p++)
    $$$$$: 5198-block  0
branch  0 never executed
branch  1 never executed
    #####: 5199:                    goto fail;
    $$$$$: 5199-block  0
    #####: 5200:		}
    $$$$$: 5200-block  0
    $$$$$: 5200-block  1
branch  0 never executed
branch  1 never executed
    #####: 5201:	      while (--mcnt);
    #####: 5202:	    }
    $$$$$: 5202-block  0
        -: 5203:	  else
        -: 5204:	    {
    #####: 5205:	      do
    $$$$$: 5205-block  0
        -: 5206:		{
    #####: 5207:		  PREFETCH ();
    $$$$$: 5207-block  0
    $$$$$: 5207-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5207-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5207-block  3
    $$$$$: 5207-block  4
    #####: 5208:		  if (*d++ != (char) *p++) goto fail;
    $$$$$: 5208-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5208-block  1
    #####: 5209:		}
    $$$$$: 5209-block  0
    $$$$$: 5209-block  1
branch  0 never executed
branch  1 never executed
    #####: 5210:	      while (--mcnt);
        -: 5211:	    }
    #####: 5212:	  SET_REGS_MATCHED ();
    $$$$$: 5212-block  0
    $$$$$: 5212-block  1
    $$$$$: 5212-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5212-block  3
    $$$$$: 5212-block  4
    $$$$$: 5212-block  5
    #####: 5213:          break;
    $$$$$: 5213-block  0
        -: 5214:
        -: 5215:
        -: 5216:        /* Match any character except possibly a newline or a null.  */
        -: 5217:	case anychar:
        -: 5218:          DEBUG_PRINT1 ("EXECUTING anychar.\n");
        -: 5219:
    #####: 5220:          PREFETCH ();
    $$$$$: 5220-block  0
    $$$$$: 5220-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5220-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5220-block  3
    $$$$$: 5220-block  4
        -: 5221:
    #####: 5222:          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
    $$$$$: 5222-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5222-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5222-block  2
    $$$$$: 5222-block  3
    $$$$$: 5222-block  4
    $$$$$: 5222-block  5
    #####: 5223:              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
    $$$$$: 5223-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5223-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5223-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5223-block  3
    $$$$$: 5223-block  4
    #####: 5224:	    goto fail;
    $$$$$: 5224-block  0
        -: 5225:
    #####: 5226:          SET_REGS_MATCHED ();
    $$$$$: 5226-block  0
    $$$$$: 5226-block  1
    $$$$$: 5226-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5226-block  3
    $$$$$: 5226-block  4
    $$$$$: 5226-block  5
        -: 5227:          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
    #####: 5228:          d++;
    #####: 5229:	  break;
    $$$$$: 5229-block  0
        -: 5230:
        -: 5231:
        -: 5232:	case charset:
        -: 5233:	case charset_not:
        -: 5234:	  {
        -: 5235:	    register unsigned char c;
    #####: 5236:	    boolean not = (re_opcode_t) *(p - 1) == charset_not;
        -: 5237:
        -: 5238:            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
        -: 5239:
    #####: 5240:	    PREFETCH ();
    $$$$$: 5240-block  0
    $$$$$: 5240-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5240-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5240-block  3
    $$$$$: 5240-block  4
    #####: 5241:	    c = TRANSLATE (*d); /* The character to match.  */
    $$$$$: 5241-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5241-block  1
    $$$$$: 5241-block  2
        -: 5242:
        -: 5243:            /* Cast to `unsigned' instead of `unsigned char' in case the
        -: 5244:               bit list is a full 32 bytes long.  */
    #####: 5245:	    if (c < (unsigned) (*p * BYTEWIDTH)
    $$$$$: 5245-block  0
branch  0 never executed
branch  1 never executed
    #####: 5246:		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
    $$$$$: 5246-block  0
branch  0 never executed
branch  1 never executed
    #####: 5247:	      not = !not;
    $$$$$: 5247-block  0
        -: 5248:
    #####: 5249:	    p += 1 + *p;
        -: 5250:
    #####: 5251:	    if (!not) goto fail;
    $$$$$: 5251-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5251-block  1
        -: 5252:            
    #####: 5253:	    SET_REGS_MATCHED ();
    $$$$$: 5253-block  0
    $$$$$: 5253-block  1
    $$$$$: 5253-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5253-block  3
    $$$$$: 5253-block  4
    $$$$$: 5253-block  5
    #####: 5254:            d++;
    #####: 5255:	    break;
    $$$$$: 5255-block  0
        -: 5256:	  }
        -: 5257:
        -: 5258:
        -: 5259:        /* The beginning of a group is represented by start_memory.
        -: 5260:           The arguments are the register number in the next byte, and the
        -: 5261:           number of groups inner to this one in the next.  The text
        -: 5262:           matched within the group is recorded (in the internal
        -: 5263:           registers data structure) under the register number.  */
        -: 5264:        case start_memory:
        -: 5265:	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
        -: 5266:
        -: 5267:          /* Find out if this group can match the empty string.  */
    #####: 5268:	  p1 = p;		/* To send to group_match_null_string_p.  */
        -: 5269:          
    #####: 5270:          if (REG_MATCH_NULL_STRING_P (reg_info[*p]) == MATCH_NULL_UNSET_VALUE)
    $$$$$: 5270-block  0
branch  0 never executed
branch  1 never executed
    #####: 5271:            REG_MATCH_NULL_STRING_P (reg_info[*p]) 
    $$$$$: 5271-block  0
    $$$$$: 5271-block  1
    #####: 5272:              = group_match_null_string_p (&p1, pend, reg_info);
        -: 5273:
        -: 5274:          /* Save the position in the string where we were the last time
        -: 5275:             we were at this open-group operator in case the group is
        -: 5276:             operated upon by a repetition operator, e.g., with `(a*)*b'
        -: 5277:             against `ab'; then we want to ignore where we are now in
        -: 5278:             the string in case this attempt to match fails.  */
    #####: 5279:          old_regstart[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
    $$$$$: 5279-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5279-block  1
    $$$$$: 5279-block  2
    #####: 5280:                             ? REG_UNSET (regstart[*p]) ? d : regstart[*p]
    $$$$$: 5280-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5280-block  1
    $$$$$: 5280-block  2
    #####: 5281:                             : regstart[*p];
        -: 5282:	  DEBUG_PRINT2 ("  old_regstart: %d\n", 
        -: 5283:			 POINTER_TO_OFFSET (old_regstart[*p]));
        -: 5284:
    #####: 5285:          regstart[*p] = d;
        -: 5286:	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
        -: 5287:
    #####: 5288:          IS_ACTIVE (reg_info[*p]) = 1;
    #####: 5289:          MATCHED_SOMETHING (reg_info[*p]) = 0;
        -: 5290:          
        -: 5291:          /* This is the new highest active register.  */
    #####: 5292:          highest_active_reg = *p;
        -: 5293:          
        -: 5294:          /* If nothing was active before, this is the new lowest active
        -: 5295:             register.  */
    #####: 5296:          if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
    $$$$$: 5296-block  0
branch  0 never executed
branch  1 never executed
    #####: 5297:            lowest_active_reg = *p;
    $$$$$: 5297-block  0
        -: 5298:
        -: 5299:          /* Move past the register number and inner group count.  */
    #####: 5300:          p += 2;
    #####: 5301:          break;
    $$$$$: 5301-block  0
        -: 5302:
        -: 5303:
        -: 5304:        /* The stop_memory opcode represents the end of a group.  Its
        -: 5305:           arguments are the same as start_memory's: the register
        -: 5306:           number, and the number of inner groups.  */
        -: 5307:	case stop_memory:
        -: 5308:	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
        -: 5309:             
        -: 5310:          /* We need to save the string position the last time we were at
        -: 5311:             this close-group operator in case the group is operated
        -: 5312:             upon by a repetition operator, e.g., with `((a*)*(b*)*)*'
        -: 5313:             against `aba'; then we want to ignore where we are now in
        -: 5314:             the string in case this attempt to match fails.  */
    #####: 5315:          old_regend[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
    $$$$$: 5315-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5315-block  1
    $$$$$: 5315-block  2
    #####: 5316:                           ? REG_UNSET (regend[*p]) ? d : regend[*p]
    $$$$$: 5316-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5316-block  1
    $$$$$: 5316-block  2
    #####: 5317:			   : regend[*p];
        -: 5318:	  DEBUG_PRINT2 ("      old_regend: %d\n", 
        -: 5319:			 POINTER_TO_OFFSET (old_regend[*p]));
        -: 5320:
    #####: 5321:          regend[*p] = d;
        -: 5322:	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
        -: 5323:
        -: 5324:          /* This register isn't active anymore.  */
    #####: 5325:          IS_ACTIVE (reg_info[*p]) = 0;
        -: 5326:          
        -: 5327:          /* If this was the only register active, nothing is active
        -: 5328:             anymore.  */
    #####: 5329:          if (lowest_active_reg == highest_active_reg)
    $$$$$: 5329-block  0
branch  0 never executed
branch  1 never executed
        -: 5330:            {
    #####: 5331:              lowest_active_reg = NO_LOWEST_ACTIVE_REG;
    #####: 5332:              highest_active_reg = NO_HIGHEST_ACTIVE_REG;
    #####: 5333:            }
    $$$$$: 5333-block  0
        -: 5334:          else
        -: 5335:            { /* We must scan for the new highest active register, since
        -: 5336:                 it isn't necessarily one less than now: consider
        -: 5337:                 (a(b)c(d(e)f)g).  When group 3 ends, after the f), the
        -: 5338:                 new highest active register is 1.  */
    #####: 5339:              unsigned char r = *p - 1;
    #####: 5340:              while (r > 0 && !IS_ACTIVE (reg_info[r]))
    $$$$$: 5340-block  0
    $$$$$: 5340-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5340-block  2
    $$$$$: 5340-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5340-block  4
    #####: 5341:                r--;
        -: 5342:              
        -: 5343:              /* If we end up at register zero, that means that we saved
        -: 5344:                 the registers as the result of an `on_failure_jump', not
        -: 5345:                 a `start_memory', and we jumped to past the innermost
        -: 5346:                 `stop_memory'.  For example, in ((.)*) we save
        -: 5347:                 registers 1 and 2 as a result of the *, but when we pop
        -: 5348:                 back to the second ), we are at the stop_memory 1.
        -: 5349:                 Thus, nothing is active.  */
    #####: 5350:	      if (r == 0)
    $$$$$: 5350-block  0
branch  0 never executed
branch  1 never executed
        -: 5351:                {
    #####: 5352:                  lowest_active_reg = NO_LOWEST_ACTIVE_REG;
    #####: 5353:                  highest_active_reg = NO_HIGHEST_ACTIVE_REG;
    #####: 5354:                }
    $$$$$: 5354-block  0
        -: 5355:              else
    #####: 5356:                highest_active_reg = r;
    $$$$$: 5356-block  0
        -: 5357:            }
        -: 5358:          
        -: 5359:          /* If just failed to match something this time around with a
        -: 5360:             group that's operated on by a repetition operator, try to
        -: 5361:             force exit from the ``loop'', and restore the register
        -: 5362:             information for this group that we had before trying this
        -: 5363:             last match.  */
    #####: 5364:          if ((!MATCHED_SOMETHING (reg_info[*p])
    $$$$$: 5364-block  0
branch  0 never executed
branch  1 never executed
    #####: 5365:               || (re_opcode_t) p[-3] == start_memory)
    $$$$$: 5365-block  0
branch  0 never executed
branch  1 never executed
    #####: 5366:	      && (p + 2) < pend)              
    $$$$$: 5366-block  0
    $$$$$: 5366-block  1
        -: 5367:            {
    #####: 5368:              boolean is_a_jump_n = false;
        -: 5369:              
    #####: 5370:              p1 = p + 2;
    #####: 5371:              mcnt = 0;
    #####: 5372:              switch ((re_opcode_t) *p1++)
    $$$$$: 5372-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5372-block  1
    $$$$$: 5372-block  2
    $$$$$: 5372-block  3
        -: 5373:                {
        -: 5374:                  case jump_n:
    #####: 5375:		    is_a_jump_n = true;
    $$$$$: 5375-block  0
        -: 5376:                  case pop_failure_jump:
        -: 5377:		  case maybe_pop_jump:
        -: 5378:		  case jump:
        -: 5379:		  case dummy_failure_jump:
    #####: 5380:                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 5380-block  0
    $$$$$: 5380-block  1
    $$$$$: 5380-block  2
    $$$$$: 5380-block  3
    #####: 5381:		    if (is_a_jump_n)
    $$$$$: 5381-block  0
branch  0 never executed
branch  1 never executed
    #####: 5382:		      p1 += 2;
    $$$$$: 5382-block  0
    #####: 5383:                    break;
    $$$$$: 5383-block  0
        -: 5384:                  
        -: 5385:                  default:
        -: 5386:                    /* do nothing */ ;
    #####: 5387:                }
    $$$$$: 5387-block  0
    #####: 5388:	      p1 += mcnt;
        -: 5389:        
        -: 5390:              /* If the next operation is a jump backwards in the pattern
        -: 5391:	         to an on_failure_jump right before the start_memory
        -: 5392:                 corresponding to this stop_memory, exit from the loop
        -: 5393:                 by forcing a failure after pushing on the stack the
        -: 5394:                 on_failure_jump's jump in the pattern, and d.  */
    #####: 5395:              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
    $$$$$: 5395-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5395-block  1
branch  2 never executed
branch  3 never executed
    #####: 5396:                  && (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
    $$$$$: 5396-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5396-block  1
branch  2 never executed
branch  3 never executed
        -: 5397:		{
        -: 5398:                  /* If this group ever matched anything, then restore
        -: 5399:                     what its registers were before trying this last
        -: 5400:                     failed match, e.g., with `(a*)*b' against `ab' for
        -: 5401:                     regstart[1], and, e.g., with `((a*)*(b*)*)*'
        -: 5402:                     against `aba' for regend[3].
        -: 5403:                     
        -: 5404:                     Also restore the registers for inner groups for,
        -: 5405:                     e.g., `((a*)(b*))*' against `aba' (register 3 would
        -: 5406:                     otherwise get trashed).  */
        -: 5407:                     
    #####: 5408:                  if (EVER_MATCHED_SOMETHING (reg_info[*p]))
    $$$$$: 5408-block  0
branch  0 never executed
branch  1 never executed
        -: 5409:		    {
        -: 5410:		      unsigned r; 
        -: 5411:        
    #####: 5412:                      EVER_MATCHED_SOMETHING (reg_info[*p]) = 0;
        -: 5413:                      
        -: 5414:		      /* Restore this and inner groups' (if any) registers.  */
    #####: 5415:                      for (r = *p; r < *p + *(p + 1); r++)
    $$$$$: 5415-block  0
    $$$$$: 5415-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5415-block  2
        -: 5416:                        {
    #####: 5417:                          regstart[r] = old_regstart[r];
        -: 5418:
        -: 5419:                          /* xx why this test?  */
    #####: 5420:                          if ((int) old_regend[r] >= (int) regstart[r])
    $$$$$: 5420-block  0
branch  0 never executed
branch  1 never executed
    #####: 5421:                            regend[r] = old_regend[r];
    $$$$$: 5421-block  0
    #####: 5422:                        }     
    $$$$$: 5422-block  0
    #####: 5423:                    }
    $$$$$: 5423-block  0
    #####: 5424:		  p1++;
    #####: 5425:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 5425-block  0
    $$$$$: 5425-block  1
    $$$$$: 5425-block  2
    $$$$$: 5425-block  3
    #####: 5426:                  PUSH_FAILURE_POINT (p1 + mcnt, d, -2);
    $$$$$: 5426-block  0
    $$$$$: 5426-block  1
    $$$$$: 5426-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5426-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5426-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5426-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 5426-block  6
    $$$$$: 5426-block  7
    $$$$$: 5426-block  8
    $$$$$: 5426-block  9
    $$$$$: 5426-block 10
    $$$$$: 5426-block 11
    $$$$$: 5426-block 12
    $$$$$: 5426-block 13
branch  8 never executed
branch  9 never executed
    $$$$$: 5426-block 14
    $$$$$: 5426-block 15
    $$$$$: 5426-block 16
        -: 5427:
    #####: 5428:                  goto fail;
    $$$$$: 5428-block  0
        -: 5429:                }
    #####: 5430:            }
    $$$$$: 5430-block  0
        -: 5431:          
        -: 5432:          /* Move past the register number and the inner group count.  */
    #####: 5433:          p += 2;
    #####: 5434:          break;
    $$$$$: 5434-block  0
        -: 5435:
        -: 5436:
        -: 5437:	/* \<digit> has been turned into a `duplicate' command which is
        -: 5438:           followed by the numeric value of <digit> as the register number.  */
        -: 5439:        case duplicate:
        -: 5440:	  {
        -: 5441:	    register const char *d2, *dend2;
    #####: 5442:	    int regno = *p++;   /* Get which register to match against.  */
        -: 5443:	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
        -: 5444:
        -: 5445:	    /* Can't back reference a group which we've never matched.  */
    #####: 5446:            if (REG_UNSET (regstart[regno]) || REG_UNSET (regend[regno]))
    $$$$$: 5446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5446-block  1
branch  2 never executed
branch  3 never executed
    #####: 5447:              goto fail;
    $$$$$: 5447-block  0
        -: 5448:              
        -: 5449:            /* Where in input to try to start matching.  */
    #####: 5450:            d2 = regstart[regno];
        -: 5451:            
        -: 5452:            /* Where to stop matching; if both the place to start and
        -: 5453:               the place to stop matching are in the same string, then
        -: 5454:               set to the place to stop, otherwise, for now have to use
        -: 5455:               the end of the first string.  */
        -: 5456:
    #####: 5457:            dend2 = ((FIRST_STRING_P (regstart[regno]) 
    $$$$$: 5457-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5457-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5457-block  2
    $$$$$: 5457-block  3
branch  4 never executed
branch  5 never executed
    $$$$$: 5457-block  4
    $$$$$: 5457-block  5
    #####: 5458:		      == FIRST_STRING_P (regend[regno]))
    $$$$$: 5458-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5458-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5458-block  2
    #####: 5459:		     ? regend[regno] : end_match_1);
    #####: 5460:	    for (;;)
    $$$$$: 5460-block  0
    $$$$$: 5460-block  1
        -: 5461:	      {
        -: 5462:		/* If necessary, advance to next segment in register
        -: 5463:                   contents.  */
    #####: 5464:		while (d2 == dend2)
    $$$$$: 5464-block  0
    $$$$$: 5464-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5464-block  2
        -: 5465:		  {
    #####: 5466:		    if (dend2 == end_match_2) break;
    $$$$$: 5466-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5466-block  1
    #####: 5467:		    if (dend2 == regend[regno]) break;
    $$$$$: 5467-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5467-block  1
        -: 5468:
        -: 5469:                    /* End of string1 => advance to string2. */
    #####: 5470:                    d2 = string2;
    #####: 5471:                    dend2 = regend[regno];
        -: 5472:		  }
        -: 5473:		/* At end of register contents => success */
    #####: 5474:		if (d2 == dend2) break;
    $$$$$: 5474-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5474-block  1
        -: 5475:
        -: 5476:		/* If necessary, advance to next segment in data.  */
    #####: 5477:		PREFETCH ();
    $$$$$: 5477-block  0
    $$$$$: 5477-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5477-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5477-block  3
    $$$$$: 5477-block  4
        -: 5478:
        -: 5479:		/* How many characters left in this segment to match.  */
    #####: 5480:		mcnt = dend - d;
        -: 5481:                
        -: 5482:		/* Want how many consecutive characters we can match in
        -: 5483:                   one shot, so, if necessary, adjust the count.  */
    #####: 5484:                if (mcnt > dend2 - d2)
    $$$$$: 5484-block  0
branch  0 never executed
branch  1 never executed
    #####: 5485:		  mcnt = dend2 - d2;
    $$$$$: 5485-block  0
        -: 5486:                  
        -: 5487:		/* Compare that many; failure if mismatch, else move
        -: 5488:                   past them.  */
    #####: 5489:		if (translate 
    $$$$$: 5489-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5489-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5489-block  2
    $$$$$: 5489-block  3
    #####: 5490:                    ? bcmp_translate (d, d2, mcnt, translate) 
    #####: 5491:                    : bcmp (d, d2, mcnt))
    #####: 5492:		  goto fail;
    $$$$$: 5492-block  0
    #####: 5493:		d += mcnt, d2 += mcnt;
        -: 5494:	      }
        -: 5495:	  }
    #####: 5496:	  break;
    $$$$$: 5496-block  0
        -: 5497:
        -: 5498:
        -: 5499:        /* begline matches the empty string at the beginning of the string
        -: 5500:           (unless `not_bol' is set in `bufp'), and, if
        -: 5501:           `newline_anchor' is set, after newlines.  */
        -: 5502:	case begline:
        -: 5503:          DEBUG_PRINT1 ("EXECUTING begline.\n");
        -: 5504:          
    #####: 5505:          if (AT_STRINGS_BEG (d))
    $$$$$: 5505-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5505-block  1
    $$$$$: 5505-block  2
    $$$$$: 5505-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5505-block  4
branch  4 never executed
branch  5 never executed
        -: 5506:            {
    #####: 5507:              if (!bufp->not_bol) break;
    $$$$$: 5507-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5507-block  1
    #####: 5508:            }
    $$$$$: 5508-block  0
    #####: 5509:          else if (d[-1] == '\n' && bufp->newline_anchor)
    $$$$$: 5509-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5509-block  1
branch  2 never executed
branch  3 never executed
        -: 5510:            {
    #####: 5511:              break;
    $$$$$: 5511-block  0
        -: 5512:            }
        -: 5513:          /* In all other cases, we fail.  */
    #####: 5514:          goto fail;
    $$$$$: 5514-block  0
        -: 5515:
        -: 5516:
        -: 5517:        /* endline is the dual of begline.  */
        -: 5518:	case endline:
        -: 5519:          DEBUG_PRINT1 ("EXECUTING endline.\n");
        -: 5520:
    #####: 5521:          if (AT_STRINGS_END (d))
    $$$$$: 5521-block  0
branch  0 never executed
branch  1 never executed
        -: 5522:            {
    #####: 5523:              if (!bufp->not_eol) break;
    $$$$$: 5523-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5523-block  1
    #####: 5524:            }
    $$$$$: 5524-block  0
        -: 5525:          
        -: 5526:          /* We have to ``prefetch'' the next character.  */
    #####: 5527:          else if ((d == end1 ? *string2 : *d) == '\n'
    $$$$$: 5527-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5527-block  1
    $$$$$: 5527-block  2
    $$$$$: 5527-block  3
branch  2 never executed
branch  3 never executed
    #####: 5528:                   && bufp->newline_anchor)
    $$$$$: 5528-block  0
branch  0 never executed
branch  1 never executed
        -: 5529:            {
    #####: 5530:              break;
    $$$$$: 5530-block  0
        -: 5531:            }
    #####: 5532:          goto fail;
    $$$$$: 5532-block  0
        -: 5533:
        -: 5534:
        -: 5535:	/* Match at the very beginning of the data.  */
        -: 5536:        case begbuf:
        -: 5537:          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
    #####: 5538:          if (AT_STRINGS_BEG (d))
    $$$$$: 5538-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5538-block  1
    $$$$$: 5538-block  2
    $$$$$: 5538-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5538-block  4
branch  4 never executed
branch  5 never executed
    #####: 5539:            break;
    $$$$$: 5539-block  0
    #####: 5540:          goto fail;
    $$$$$: 5540-block  0
        -: 5541:
        -: 5542:
        -: 5543:	/* Match at the very end of the data.  */
        -: 5544:        case endbuf:
        -: 5545:          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
    #####: 5546:	  if (AT_STRINGS_END (d))
    $$$$$: 5546-block  0
branch  0 never executed
branch  1 never executed
    #####: 5547:	    break;
    $$$$$: 5547-block  0
    #####: 5548:          goto fail;
    $$$$$: 5548-block  0
        -: 5549:
        -: 5550:
        -: 5551:        /* on_failure_keep_string_jump is used to optimize `.*\n'.  It
        -: 5552:           pushes NULL as the value for the string on the stack.  Then
        -: 5553:           `pop_failure_point' will keep the current value for the
        -: 5554:           string, instead of restoring it.  To see why, consider
        -: 5555:           matching `foo\nbar' against `.*\n'.  The .* matches the foo;
        -: 5556:           then the . fails against the \n.  But the next thing we want
        -: 5557:           to do is match the \n against the \n; if we restored the
        -: 5558:           string value, we would be back at the foo.
        -: 5559:           
        -: 5560:           Because this is used only in specific cases, we don't need to
        -: 5561:           check all the things that `on_failure_jump' does, to make
        -: 5562:           sure the right things get saved on the stack.  Hence we don't
        -: 5563:           share its code.  The only reason to push anything on the
        -: 5564:           stack at all is that otherwise we would have to change
        -: 5565:           `anychar's code to do something besides goto fail in this
        -: 5566:           case; that seems worse than this.  */
        -: 5567:        case on_failure_keep_string_jump:
        -: 5568:          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
        -: 5569:          
    #####: 5570:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
    $$$$$: 5570-block  0
    $$$$$: 5570-block  1
    $$$$$: 5570-block  2
    $$$$$: 5570-block  3
        -: 5571:          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
        -: 5572:
    #####: 5573:          PUSH_FAILURE_POINT (p + mcnt, NULL, -2);
    $$$$$: 5573-block  0
    $$$$$: 5573-block  1
    $$$$$: 5573-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5573-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5573-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5573-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 5573-block  6
    $$$$$: 5573-block  7
    $$$$$: 5573-block  8
    $$$$$: 5573-block  9
    $$$$$: 5573-block 10
    $$$$$: 5573-block 11
    $$$$$: 5573-block 12
    $$$$$: 5573-block 13
branch  8 never executed
branch  9 never executed
    $$$$$: 5573-block 14
    $$$$$: 5573-block 15
    $$$$$: 5573-block 16
    #####: 5574:          break;
    $$$$$: 5574-block  0
    $$$$$: 5574-block  1
        -: 5575:
        -: 5576:
        -: 5577:	/* Uses of on_failure_jump:
        -: 5578:        
        -: 5579:           Each alternative starts with an on_failure_jump that points
        -: 5580:           to the beginning of the next alternative.  Each alternative
        -: 5581:           except the last ends with a jump that in effect jumps past
        -: 5582:           the rest of the alternatives.  (They really jump to the
        -: 5583:           ending jump of the following alternative, because tensioning
        -: 5584:           these jumps is a hassle.)
        -: 5585:
        -: 5586:           Repeats start with an on_failure_jump that points past both
        -: 5587:           the repetition text and either the following jump or
        -: 5588:           pop_failure_jump back to this on_failure_jump.  */
        -: 5589:	case on_failure_jump:
        -: 5590:        on_failure:
        -: 5591:          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
        -: 5592:
    #####: 5593:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
    $$$$$: 5593-block  0
    $$$$$: 5593-block  1
    $$$$$: 5593-block  2
    $$$$$: 5593-block  3
        -: 5594:          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p + mcnt);
        -: 5595:
        -: 5596:          /* If this on_failure_jump comes right before a group (i.e.,
        -: 5597:             the original * applied to a group), save the information
        -: 5598:             for that group and all inner ones, so that if we fail back
        -: 5599:             to this point, the group's information will be correct.
        -: 5600:             For example, in \(a*\)*\1, we need the preceding group,
        -: 5601:             and in \(\(a*\)b*\)\2, we need the inner group.  */
        -: 5602:
        -: 5603:          /* We can't use `p' to check ahead because we push
        -: 5604:             a failure point to `p + mcnt' after we do this.  */
    #####: 5605:          p1 = p;
        -: 5606:
        -: 5607:          /* We need to skip no_op's before we look for the
        -: 5608:             start_memory in case this on_failure_jump is happening as
        -: 5609:             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
        -: 5610:             against aba.  */
    #####: 5611:          while (p1 < pend && (re_opcode_t) *p1 == no_op)
    $$$$$: 5611-block  0
    $$$$$: 5611-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5611-block  2
    $$$$$: 5611-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5611-block  4
    #####: 5612:            p1++;
        -: 5613:
    #####: 5614:          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
    $$$$$: 5614-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5614-block  1
branch  2 never executed
branch  3 never executed
        -: 5615:            {
        -: 5616:              /* We have a new highest active register now.  This will
        -: 5617:                 get reset at the start_memory we are about to get to,
        -: 5618:                 but we will have saved all the registers relevant to
        -: 5619:                 this repetition op, as described above.  */
    #####: 5620:              highest_active_reg = *(p1 + 1) + *(p1 + 2);
    #####: 5621:              if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
    $$$$$: 5621-block  0
branch  0 never executed
branch  1 never executed
    #####: 5622:                lowest_active_reg = *(p1 + 1);
    $$$$$: 5622-block  0
    #####: 5623:            }
    $$$$$: 5623-block  0
        -: 5624:
        -: 5625:          DEBUG_PRINT1 (":\n");
    #####: 5626:          PUSH_FAILURE_POINT (p + mcnt, d, -2);
    $$$$$: 5626-block  0
    $$$$$: 5626-block  1
    $$$$$: 5626-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5626-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5626-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5626-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 5626-block  6
    $$$$$: 5626-block  7
    $$$$$: 5626-block  8
    $$$$$: 5626-block  9
    $$$$$: 5626-block 10
    $$$$$: 5626-block 11
    $$$$$: 5626-block 12
    $$$$$: 5626-block 13
branch  8 never executed
branch  9 never executed
    $$$$$: 5626-block 14
    $$$$$: 5626-block 15
    $$$$$: 5626-block 16
    #####: 5627:          break;
    $$$$$: 5627-block  0
        -: 5628:
        -: 5629:
        -: 5630:        /* A smart repeat ends with `maybe_pop_jump'.
        -: 5631:	   We change it to either `pop_failure_jump' or `jump'.  */
        -: 5632:        case maybe_pop_jump:
    #####: 5633:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
    $$$$$: 5633-block  0
    $$$$$: 5633-block  1
    $$$$$: 5633-block  2
    $$$$$: 5633-block  3
        -: 5634:          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
        -: 5635:          {
    #####: 5636:	    register unsigned char *p2 = p;
        -: 5637:
        -: 5638:            /* Compare the beginning of the repeat with what in the
        -: 5639:               pattern follows its end. If we can establish that there
        -: 5640:               is nothing that they would both match, i.e., that we
        -: 5641:               would have to backtrack because of (as in, e.g., `a*a')
        -: 5642:               then we can change to pop_failure_jump, because we'll
        -: 5643:               never have to backtrack.
        -: 5644:               
        -: 5645:               This is not true in the case of alternatives: in
        -: 5646:               `(a|ab)*' we do need to backtrack to the `ab' alternative
        -: 5647:               (e.g., if the string was `ab').  But instead of trying to
        -: 5648:               detect that here, the alternative has put on a dummy
        -: 5649:               failure point which is what we will end up popping.  */
        -: 5650:
        -: 5651:	    /* Skip over open/close-group commands.  */
    #####: 5652:	    while (p2 + 2 < pend
    $$$$$: 5652-block  0
    $$$$$: 5652-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5652-block  2
    #####: 5653:		   && ((re_opcode_t) *p2 == stop_memory
    $$$$$: 5653-block  0
branch  0 never executed
branch  1 never executed
    #####: 5654:		       || (re_opcode_t) *p2 == start_memory))
    $$$$$: 5654-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5654-block  1
    #####: 5655:	      p2 += 3;			/* Skip over args, too.  */
        -: 5656:
        -: 5657:            /* If we're at the end of the pattern, we can change.  */
    #####: 5658:            if (p2 == pend)
    $$$$$: 5658-block  0
branch  0 never executed
branch  1 never executed
        -: 5659:	      {
        -: 5660:		/* Consider what happens when matching ":\(.*\)"
        -: 5661:		   against ":/".  I don't really understand this code
        -: 5662:		   yet.  */
    #####: 5663:  	        p[-3] = (unsigned char) pop_failure_jump;
        -: 5664:                DEBUG_PRINT1
        -: 5665:                  ("  End of pattern: change to `pop_failure_jump'.\n");
    #####: 5666:              }
    $$$$$: 5666-block  0
        -: 5667:
    #####: 5668:            else if ((re_opcode_t) *p2 == exactn
    $$$$$: 5668-block  0
branch  0 never executed
branch  1 never executed
    #####: 5669:		     || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
    $$$$$: 5669-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5669-block  1
branch  2 never executed
branch  3 never executed
        -: 5670:	      {
    #####: 5671:		register unsigned char c
    #####: 5672:                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
    $$$$$: 5672-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5672-block  1
    $$$$$: 5672-block  2
    #####: 5673:		p1 = p + mcnt;
        -: 5674:
        -: 5675:                /* p1[0] ... p1[2] are the `on_failure_jump' corresponding
        -: 5676:                   to the `maybe_finalize_jump' of this case.  Examine what 
        -: 5677:                   follows.  */
    #####: 5678:                if ((re_opcode_t) p1[3] == exactn && p1[5] != c)
    $$$$$: 5678-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5678-block  1
branch  2 never executed
branch  3 never executed
        -: 5679:                  {
    #####: 5680:  		    p[-3] = (unsigned char) pop_failure_jump;
        -: 5681:                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
        -: 5682:                                  c, p1[5]);
    #####: 5683:                  }
    $$$$$: 5683-block  0
        -: 5684:                  
    #####: 5685:		else if ((re_opcode_t) p1[3] == charset
    $$$$$: 5685-block  0
branch  0 never executed
branch  1 never executed
    #####: 5686:			 || (re_opcode_t) p1[3] == charset_not)
    $$$$$: 5686-block  0
branch  0 never executed
branch  1 never executed
        -: 5687:		  {
    #####: 5688:		    int not = (re_opcode_t) p1[3] == charset_not;
        -: 5689:                    
    #####: 5690:		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
    $$$$$: 5690-block  0
branch  0 never executed
branch  1 never executed
    #####: 5691:			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
    $$$$$: 5691-block  0
branch  0 never executed
branch  1 never executed
    #####: 5692:		      not = !not;
    $$$$$: 5692-block  0
        -: 5693:
        -: 5694:                    /* `not' is equal to 1 if c would match, which means
        -: 5695:                        that we can't change to pop_failure_jump.  */
    #####: 5696:		    if (!not)
    $$$$$: 5696-block  0
branch  0 never executed
branch  1 never executed
        -: 5697:                      {
    #####: 5698:  		        p[-3] = (unsigned char) pop_failure_jump;
        -: 5699:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
    #####: 5700:                      }
    $$$$$: 5700-block  0
    #####: 5701:		  }
    $$$$$: 5701-block  0
    #####: 5702:	      }
    $$$$$: 5702-block  0
        -: 5703:	  }
    #####: 5704:	  p -= 2;		/* Point at relative address again.  */
    #####: 5705:	  if ((re_opcode_t) p[-1] != pop_failure_jump)
    $$$$$: 5705-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5705-block  1
        -: 5706:	    {
    #####: 5707:	      p[-1] = (unsigned char) jump;
        -: 5708:              DEBUG_PRINT1 ("  Match => jump.\n");
    #####: 5709:	      goto unconditional_jump;
    $$$$$: 5709-block  0
        -: 5710:	    }
        -: 5711:        /* Note fall through.  */
        -: 5712:
        -: 5713:
        -: 5714:	/* The end of a simple repeat has a pop_failure_jump back to
        -: 5715:           its matching on_failure_jump, where the latter will push a
        -: 5716:           failure point.  The pop_failure_jump takes off failure
        -: 5717:           points put on by this pop_failure_jump's matching
        -: 5718:           on_failure_jump; we got through the pattern to here from the
        -: 5719:           matching on_failure_jump, so didn't fail.  */
        -: 5720:        case pop_failure_jump:
        -: 5721:          {
        -: 5722:            /* We need to pass separate storage for the lowest and
        -: 5723:               highest registers, even though we don't care about the
        -: 5724:               actual values.  Otherwise, we will restore only one
        -: 5725:               register from the stack, since lowest will == highest in
        -: 5726:               `pop_failure_point'.  */
        -: 5727:            unsigned dummy_low_reg, dummy_high_reg;
        -: 5728:            unsigned char *pdummy;
        -: 5729:            const char *sdummy;
        -: 5730:
        -: 5731:            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
    #####: 5732:            POP_FAILURE_POINT (sdummy, pdummy,
    $$$$$: 5732-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5732-block  1
    $$$$$: 5732-block  2
    $$$$$: 5732-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5732-block  4
    $$$$$: 5732-block  5
        -: 5733:                               dummy_low_reg, dummy_high_reg,
        -: 5734:                               reg_dummy, reg_dummy, reg_info_dummy);
    #####: 5735:          }
    $$$$$: 5735-block  0
    $$$$$: 5735-block  1
        -: 5736:          /* Note fall through.  */
        -: 5737:
        -: 5738:          
        -: 5739:        /* Unconditionally jump (without popping any failure points).  */
        -: 5740:        case jump:
        -: 5741:	unconditional_jump:
    #####: 5742:	  EXTRACT_NUMBER_AND_INCR (mcnt, p);	/* Get the amount to jump.  */
    $$$$$: 5742-block  0
    $$$$$: 5742-block  1
    $$$$$: 5742-block  2
    $$$$$: 5742-block  3
        -: 5743:          DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt);
    #####: 5744:	  p += mcnt;				/* Do the jump.  */
        -: 5745:          DEBUG_PRINT2 ("(to 0x%x).\n", p);
    #####: 5746:	  break;
    $$$$$: 5746-block  0
        -: 5747:
        -: 5748:	
        -: 5749:        /* We need this opcode so we can detect where alternatives end
        -: 5750:           in `group_match_null_string_p' et al.  */
        -: 5751:        case jump_past_alt:
        -: 5752:          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
    #####: 5753:          goto unconditional_jump;
    $$$$$: 5753-block  0
        -: 5754:
        -: 5755:
        -: 5756:        /* Normally, the on_failure_jump pushes a failure point, which
        -: 5757:           then gets popped at pop_failure_jump.  We will end up at
        -: 5758:           pop_failure_jump, also, and with a pattern of, say, `a+', we
        -: 5759:           are skipping over the on_failure_jump, so we have to push
        -: 5760:           something meaningless for pop_failure_jump to pop.  */
        -: 5761:        case dummy_failure_jump:
        -: 5762:          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
        -: 5763:          /* It doesn't matter what we push for the string here.  What
        -: 5764:             the code at `fail' tests is the value for the pattern.  */
    #####: 5765:          PUSH_FAILURE_POINT (0, 0, -2);
    $$$$$: 5765-block  0
    $$$$$: 5765-block  1
    $$$$$: 5765-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5765-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5765-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5765-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 5765-block  6
    $$$$$: 5765-block  7
    $$$$$: 5765-block  8
    $$$$$: 5765-block  9
    $$$$$: 5765-block 10
    $$$$$: 5765-block 11
    $$$$$: 5765-block 12
    $$$$$: 5765-block 13
branch  8 never executed
branch  9 never executed
    $$$$$: 5765-block 14
    $$$$$: 5765-block 15
    $$$$$: 5765-block 16
    #####: 5766:          goto unconditional_jump;
    $$$$$: 5766-block  0
        -: 5767:
        -: 5768:
        -: 5769:        /* At the end of an alternative, we need to push a dummy failure
        -: 5770:           point in case we are followed by a `pop_failure_jump', because
        -: 5771:           we don't want the failure point for the alternative to be
        -: 5772:           popped.  For example, matching `(a|ab)*' against `aab'
        -: 5773:           requires that we match the `ab' alternative.  */
        -: 5774:        case push_dummy_failure:
        -: 5775:          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
        -: 5776:          /* See comments just above at `dummy_failure_jump' about the
        -: 5777:             two zeroes.  */
    #####: 5778:          PUSH_FAILURE_POINT (0, 0, -2);
    $$$$$: 5778-block  0
    $$$$$: 5778-block  1
    $$$$$: 5778-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5778-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5778-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5778-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 5778-block  6
    $$$$$: 5778-block  7
    $$$$$: 5778-block  8
    $$$$$: 5778-block  9
    $$$$$: 5778-block 10
    $$$$$: 5778-block 11
    $$$$$: 5778-block 12
    $$$$$: 5778-block 13
branch  8 never executed
branch  9 never executed
    $$$$$: 5778-block 14
    $$$$$: 5778-block 15
    $$$$$: 5778-block 16
    #####: 5779:          break;
    $$$$$: 5779-block  0
        -: 5780:
        -: 5781:        /* Have to succeed matching what follows at least n times.
        -: 5782:           After that, handle like `on_failure_jump'.  */
        -: 5783:        case succeed_n: 
    #####: 5784:          EXTRACT_NUMBER (mcnt, p + 2);
    $$$$$: 5784-block  0
    $$$$$: 5784-block  1
        -: 5785:          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
        -: 5786:
        -: 5787:          assert (mcnt >= 0);
        -: 5788:          /* Originally, this is how many times we HAVE to succeed.  */
    #####: 5789:          if (mcnt > 0)
    $$$$$: 5789-block  0
branch  0 never executed
branch  1 never executed
        -: 5790:            {
    #####: 5791:               mcnt--;
    #####: 5792:	       p += 2;
    #####: 5793:               STORE_NUMBER_AND_INCR (p, mcnt);
    $$$$$: 5793-block  0
    $$$$$: 5793-block  1
    $$$$$: 5793-block  2
    $$$$$: 5793-block  3
        -: 5794:               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p, mcnt);
    #####: 5795:            }
    $$$$$: 5795-block  0
    #####: 5796:	  else if (mcnt == 0)
    $$$$$: 5796-block  0
branch  0 never executed
branch  1 never executed
        -: 5797:            {
        -: 5798:              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
    #####: 5799:	      p[2] = (unsigned char) no_op;
    #####: 5800:              p[3] = (unsigned char) no_op;
    #####: 5801:              goto on_failure;
    $$$$$: 5801-block  0
        -: 5802:            }
    #####: 5803:          break;
    $$$$$: 5803-block  0
        -: 5804:        
        -: 5805:        case jump_n: 
    #####: 5806:          EXTRACT_NUMBER (mcnt, p + 2);
    $$$$$: 5806-block  0
    $$$$$: 5806-block  1
        -: 5807:          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
        -: 5808:
        -: 5809:          /* Originally, this is how many times we CAN jump.  */
    #####: 5810:          if (mcnt)
    $$$$$: 5810-block  0
branch  0 never executed
branch  1 never executed
        -: 5811:            {
    #####: 5812:               mcnt--;
    #####: 5813:               STORE_NUMBER (p + 2, mcnt);
    $$$$$: 5813-block  0
    $$$$$: 5813-block  1
    #####: 5814:	       goto unconditional_jump;	     
    $$$$$: 5814-block  0
        -: 5815:            }
        -: 5816:          /* If don't have to jump any more, skip over the rest of command.  */
        -: 5817:	  else      
    #####: 5818:	    p += 4;		     
    $$$$$: 5818-block  0
    #####: 5819:          break;
    $$$$$: 5819-block  0
        -: 5820:        
        -: 5821:	case set_number_at:
        -: 5822:	  {
        -: 5823:            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
        -: 5824:
    #####: 5825:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
    $$$$$: 5825-block  0
    $$$$$: 5825-block  1
    $$$$$: 5825-block  2
    $$$$$: 5825-block  3
    #####: 5826:            p1 = p + mcnt;
    #####: 5827:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
    $$$$$: 5827-block  0
    $$$$$: 5827-block  1
    $$$$$: 5827-block  2
    $$$$$: 5827-block  3
        -: 5828:            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
    #####: 5829:	    STORE_NUMBER (p1, mcnt);
    $$$$$: 5829-block  0
    $$$$$: 5829-block  1
    #####: 5830:            break;
    $$$$$: 5830-block  0
        -: 5831:          }
        -: 5832:
        -: 5833:        case wordbound:
        -: 5834:          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
    #####: 5835:          if (AT_WORD_BOUNDARY (d))
    $$$$$: 5835-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5835-block  1
    $$$$$: 5835-block  2
    $$$$$: 5835-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5835-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5835-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 5835-block  6
branch  8 never executed
branch  9 never executed
    $$$$$: 5835-block  7
    $$$$$: 5835-block  8
branch 10 never executed
branch 11 never executed
    $$$$$: 5835-block  9
    $$$$$: 5835-block 10
    $$$$$: 5835-block 11
    $$$$$: 5835-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 5835-block 13
    $$$$$: 5835-block 14
branch 14 never executed
branch 15 never executed
    $$$$$: 5835-block 15
    $$$$$: 5835-block 16
    $$$$$: 5835-block 17
    $$$$$: 5835-block 18
branch 16 never executed
branch 17 never executed
    #####: 5836:	    break;
    $$$$$: 5836-block  0
    #####: 5837:          goto fail;
    $$$$$: 5837-block  0
        -: 5838:
        -: 5839:	case notwordbound:
        -: 5840:          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
    #####: 5841:	  if (AT_WORD_BOUNDARY (d))
    $$$$$: 5841-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5841-block  1
    $$$$$: 5841-block  2
    $$$$$: 5841-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5841-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5841-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 5841-block  6
branch  8 never executed
branch  9 never executed
    $$$$$: 5841-block  7
    $$$$$: 5841-block  8
branch 10 never executed
branch 11 never executed
    $$$$$: 5841-block  9
    $$$$$: 5841-block 10
    $$$$$: 5841-block 11
    $$$$$: 5841-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 5841-block 13
    $$$$$: 5841-block 14
branch 14 never executed
branch 15 never executed
    $$$$$: 5841-block 15
    $$$$$: 5841-block 16
    $$$$$: 5841-block 17
    $$$$$: 5841-block 18
branch 16 never executed
branch 17 never executed
    #####: 5842:	    goto fail;
    $$$$$: 5842-block  0
    #####: 5843:          break;
    $$$$$: 5843-block  0
        -: 5844:
        -: 5845:	case wordbeg:
        -: 5846:          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
    #####: 5847:	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
    $$$$$: 5847-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5847-block  1
    $$$$$: 5847-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5847-block  3
    $$$$$: 5847-block  4
    $$$$$: 5847-block  5
    $$$$$: 5847-block  6
branch  4 never executed
branch  5 never executed
    $$$$$: 5847-block  7
branch  6 never executed
branch  7 never executed
    $$$$$: 5847-block  8
    $$$$$: 5847-block  9
    $$$$$: 5847-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 5847-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 5847-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 5847-block 13
    $$$$$: 5847-block 14
branch 14 never executed
branch 15 never executed
    $$$$$: 5847-block 15
    $$$$$: 5847-block 16
    $$$$$: 5847-block 17
    $$$$$: 5847-block 18
branch 16 never executed
branch 17 never executed
    #####: 5848:	    break;
    $$$$$: 5848-block  0
    #####: 5849:          goto fail;
    $$$$$: 5849-block  0
        -: 5850:
        -: 5851:	case wordend:
        -: 5852:          DEBUG_PRINT1 ("EXECUTING wordend.\n");
    #####: 5853:	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
    $$$$$: 5853-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5853-block  1
    $$$$$: 5853-block  2
    $$$$$: 5853-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5853-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5853-block  5
branch  6 never executed
branch  7 never executed
    $$$$$: 5853-block  6
    $$$$$: 5853-block  7
branch  8 never executed
branch  9 never executed
    $$$$$: 5853-block  8
    $$$$$: 5853-block  9
    $$$$$: 5853-block 10
    $$$$$: 5853-block 11
branch 10 never executed
branch 11 never executed
    #####: 5854:              && (!WORDCHAR_P (d) || AT_STRINGS_END (d)))
    $$$$$: 5854-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5854-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5854-block  2
    $$$$$: 5854-block  3
branch  4 never executed
branch  5 never executed
    $$$$$: 5854-block  4
    $$$$$: 5854-block  5
    $$$$$: 5854-block  6
    $$$$$: 5854-block  7
branch  6 never executed
branch  7 never executed
    #####: 5855:	    break;
    $$$$$: 5855-block  0
    #####: 5856:          goto fail;
    $$$$$: 5856-block  0
        -: 5857:
        -: 5858:#ifdef emacs
        -: 5859:#ifdef emacs19
        -: 5860:  	case before_dot:
        -: 5861:          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
        -: 5862: 	  if (PTR_CHAR_POS ((unsigned char *) d) >= point)
        -: 5863:  	    goto fail;
        -: 5864:  	  break;
        -: 5865:  
        -: 5866:  	case at_dot:
        -: 5867:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
        -: 5868: 	  if (PTR_CHAR_POS ((unsigned char *) d) != point)
        -: 5869:  	    goto fail;
        -: 5870:  	  break;
        -: 5871:  
        -: 5872:  	case after_dot:
        -: 5873:          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
        -: 5874:          if (PTR_CHAR_POS ((unsigned char *) d) <= point)
        -: 5875:  	    goto fail;
        -: 5876:  	  break;
        -: 5877:#else /* not emacs19 */
        -: 5878:	case at_dot:
        -: 5879:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
        -: 5880:	  if (PTR_CHAR_POS ((unsigned char *) d) + 1 != point)
        -: 5881:	    goto fail;
        -: 5882:	  break;
        -: 5883:#endif /* not emacs19 */
        -: 5884:
        -: 5885:	case syntaxspec:
        -: 5886:          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
        -: 5887:	  mcnt = *p++;
        -: 5888:	  goto matchsyntax;
        -: 5889:
        -: 5890:        case wordchar:
        -: 5891:          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
        -: 5892:	  mcnt = (int) Sword;
        -: 5893:        matchsyntax:
        -: 5894:	  PREFETCH ();
        -: 5895:	  if (SYNTAX (*d++) != (enum syntaxcode) mcnt)
        -: 5896:            goto fail;
        -: 5897:          SET_REGS_MATCHED ();
        -: 5898:	  break;
        -: 5899:
        -: 5900:	case notsyntaxspec:
        -: 5901:          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
        -: 5902:	  mcnt = *p++;
        -: 5903:	  goto matchnotsyntax;
        -: 5904:
        -: 5905:        case notwordchar:
        -: 5906:          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
        -: 5907:	  mcnt = (int) Sword;
        -: 5908:        matchnotsyntax:
        -: 5909:	  PREFETCH ();
        -: 5910:	  if (SYNTAX (*d++) == (enum syntaxcode) mcnt)
        -: 5911:            goto fail;
        -: 5912:	  SET_REGS_MATCHED ();
        -: 5913:          break;
        -: 5914:
        -: 5915:#else /* not emacs */
        -: 5916:	case wordchar:
        -: 5917:          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
    #####: 5918:	  PREFETCH ();
    $$$$$: 5918-block  0
    $$$$$: 5918-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5918-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5918-block  3
    $$$$$: 5918-block  4
    #####: 5919:          if (!WORDCHAR_P (d))
    $$$$$: 5919-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5919-block  1
    $$$$$: 5919-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5919-block  3
    $$$$$: 5919-block  4
    $$$$$: 5919-block  5
    $$$$$: 5919-block  6
branch  4 never executed
branch  5 never executed
    #####: 5920:            goto fail;
    $$$$$: 5920-block  0
    #####: 5921:	  SET_REGS_MATCHED ();
    $$$$$: 5921-block  0
    $$$$$: 5921-block  1
    $$$$$: 5921-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5921-block  3
    $$$$$: 5921-block  4
    $$$$$: 5921-block  5
    #####: 5922:          d++;
    #####: 5923:	  break;
    $$$$$: 5923-block  0
        -: 5924:	  
        -: 5925:	case notwordchar:
        -: 5926:          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
    #####: 5927:	  PREFETCH ();
    $$$$$: 5927-block  0
    $$$$$: 5927-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5927-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5927-block  3
    $$$$$: 5927-block  4
    #####: 5928:	  if (WORDCHAR_P (d))
    $$$$$: 5928-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5928-block  1
    $$$$$: 5928-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5928-block  3
    $$$$$: 5928-block  4
    $$$$$: 5928-block  5
    $$$$$: 5928-block  6
branch  4 never executed
branch  5 never executed
    #####: 5929:            goto fail;
    $$$$$: 5929-block  0
    #####: 5930:          SET_REGS_MATCHED ();
    $$$$$: 5930-block  0
    $$$$$: 5930-block  1
    $$$$$: 5930-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 5930-block  3
    $$$$$: 5930-block  4
    $$$$$: 5930-block  5
    #####: 5931:          d++;
    #####: 5932:	  break;
    $$$$$: 5932-block  0
        -: 5933:#endif /* not emacs */
        -: 5934:          
        -: 5935:        default:
    #####: 5936:          abort ();
    $$$$$: 5936-block  0
        -: 5937:	}
    #####: 5938:      continue;  /* Successfully executed one pattern command; keep going.  */
    $$$$$: 5938-block  0
        -: 5939:
        -: 5940:
        -: 5941:    /* We goto here if a matching operation fails. */
        -: 5942:    fail:
    #####: 5943:      if (!FAIL_STACK_EMPTY ())
    $$$$$: 5943-block  0
branch  0 never executed
branch  1 never executed
        -: 5944:	{ /* A restart point is known.  Restore to that state.  */
        -: 5945:          DEBUG_PRINT1 ("\nFAIL:\n");
    #####: 5946:          POP_FAILURE_POINT (d, p,
    $$$$$: 5946-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5946-block  1
    $$$$$: 5946-block  2
    $$$$$: 5946-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 5946-block  4
    $$$$$: 5946-block  5
        -: 5947:                             lowest_active_reg, highest_active_reg,
        -: 5948:                             regstart, regend, reg_info);
        -: 5949:
        -: 5950:          /* If this failure point is a dummy, try the next one.  */
    #####: 5951:          if (!p)
    $$$$$: 5951-block  0
branch  0 never executed
branch  1 never executed
    #####: 5952:	    goto fail;
    $$$$$: 5952-block  0
        -: 5953:
        -: 5954:          /* If we failed to the end of the pattern, don't examine *p.  */
        -: 5955:	  assert (p <= pend);
    #####: 5956:          if (p < pend)
    $$$$$: 5956-block  0
branch  0 never executed
branch  1 never executed
        -: 5957:            {
    #####: 5958:              boolean is_a_jump_n = false;
        -: 5959:              
        -: 5960:              /* If failed to a backwards jump that's part of a repetition
        -: 5961:                 loop, need to pop this failure point and use the next one.  */
    #####: 5962:              switch ((re_opcode_t) *p)
    $$$$$: 5962-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5962-block  1
    $$$$$: 5962-block  2
        -: 5963:                {
        -: 5964:                case jump_n:
    #####: 5965:                  is_a_jump_n = true;
    $$$$$: 5965-block  0
        -: 5966:                case maybe_pop_jump:
        -: 5967:                case pop_failure_jump:
        -: 5968:                case jump:
    #####: 5969:                  p1 = p + 1;
    #####: 5970:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 5970-block  0
    $$$$$: 5970-block  1
    $$$$$: 5970-block  2
    $$$$$: 5970-block  3
    #####: 5971:                  p1 += mcnt;	
        -: 5972:
    #####: 5973:                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
    $$$$$: 5973-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5973-block  1
    $$$$$: 5973-block  2
    #####: 5974:                      || (!is_a_jump_n
    $$$$$: 5974-block  0
branch  0 never executed
branch  1 never executed
    #####: 5975:                          && (re_opcode_t) *p1 == on_failure_jump))
    $$$$$: 5975-block  0
branch  0 never executed
branch  1 never executed
    #####: 5976:                    goto fail;
    $$$$$: 5976-block  0
    #####: 5977:                  break;
    $$$$$: 5977-block  0
        -: 5978:                default:
        -: 5979:                  /* do nothing */ ;
    #####: 5980:                }
    $$$$$: 5980-block  0
    #####: 5981:            }
    $$$$$: 5981-block  0
        -: 5982:
    #####: 5983:          if (d >= string1 && d <= end1)
    $$$$$: 5983-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5983-block  1
branch  2 never executed
branch  3 never executed
    #####: 5984:	    dend = end_match_1;
    $$$$$: 5984-block  0
    #####: 5985:        }
    $$$$$: 5985-block  0
        -: 5986:      else
    #####: 5987:        break;   /* Matching at this starting point really fails.  */
    $$$$$: 5987-block  0
        -: 5988:    } /* for (;;) */
        -: 5989:
    #####: 5990:  if (best_regs_set)
    $$$$$: 5990-block  0
branch  0 never executed
branch  1 never executed
    #####: 5991:    goto restore_best_regs;
    $$$$$: 5991-block  0
        -: 5992:
    #####: 5993:  FREE_VARIABLES ();
        -: 5994:
    #####: 5995:  return -1;         			/* Failure to match.  */
    $$$$$: 5995-block  0
    #####: 5996:} /* re_match_2 */
    $$$$$: 5996-block  0
        -: 5997:
        -: 5998:/* Subroutine definitions for re_match_2.  */
        -: 5999:
        -: 6000:
        -: 6001:/* We are passed P pointing to a register number after a start_memory.
        -: 6002:   
        -: 6003:   Return true if the pattern up to the corresponding stop_memory can
        -: 6004:   match the empty string, and false otherwise.
        -: 6005:   
        -: 6006:   If we find the matching stop_memory, sets P to point to one past its number.
        -: 6007:   Otherwise, sets P to an undefined byte less than or equal to END.
        -: 6008:
        -: 6009:   We don't handle duplicates properly (yet).  */
        -: 6010:
        -: 6011:static boolean
function group_match_null_string_p called 0 returned 0% blocks executed 0%
    #####: 6012:group_match_null_string_p (p, end, reg_info)
        -: 6013:    unsigned char **p, *end;
        -: 6014:    register_info_type *reg_info;
        -: 6015:{
        -: 6016:  int mcnt;
        -: 6017:  /* Point to after the args to the start_memory.  */
    #####: 6018:  unsigned char *p1 = *p + 2;
        -: 6019:  
    #####: 6020:  while (p1 < end)
    $$$$$: 6020-block  0
    $$$$$: 6020-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6020-block  2
        -: 6021:    {
        -: 6022:      /* Skip over opcodes that can match nothing, and return true or
        -: 6023:	 false, as appropriate, when we get to one that can't, or to the
        -: 6024:         matching stop_memory.  */
        -: 6025:      
    #####: 6026:      switch ((re_opcode_t) *p1)
    $$$$$: 6026-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 6027:        {
        -: 6028:        /* Could be either a loop or a series of alternatives.  */
        -: 6029:        case on_failure_jump:
    #####: 6030:          p1++;
    #####: 6031:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 6031-block  0
    $$$$$: 6031-block  1
    $$$$$: 6031-block  2
    $$$$$: 6031-block  3
        -: 6032:          
        -: 6033:          /* If the next operation is not a jump backwards in the
        -: 6034:	     pattern.  */
        -: 6035:
    #####: 6036:	  if (mcnt >= 0)
    $$$$$: 6036-block  0
branch  0 never executed
branch  1 never executed
        -: 6037:	    {
        -: 6038:              /* Go through the on_failure_jumps of the alternatives,
        -: 6039:                 seeing if any of the alternatives cannot match nothing.
        -: 6040:                 The last alternative starts with only a jump,
        -: 6041:                 whereas the rest start with on_failure_jump and end
        -: 6042:                 with a jump, e.g., here is the pattern for `a|b|c':
        -: 6043:
        -: 6044:                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
        -: 6045:                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
        -: 6046:                 /exactn/1/c						
        -: 6047:
        -: 6048:                 So, we have to first go through the first (n-1)
        -: 6049:                 alternatives and then deal with the last one separately.  */
        -: 6050:
        -: 6051:
        -: 6052:              /* Deal with the first (n-1) alternatives, which start
        -: 6053:                 with an on_failure_jump (see above) that jumps to right
        -: 6054:                 past a jump_past_alt.  */
        -: 6055:
    #####: 6056:              while ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
    $$$$$: 6056-block  0
    $$$$$: 6056-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6056-block  2
        -: 6057:                {
        -: 6058:                  /* `mcnt' holds how many bytes long the alternative
        -: 6059:                     is, including the ending `jump_past_alt' and
        -: 6060:                     its number.  */
        -: 6061:
    #####: 6062:                  if (!alt_match_null_string_p (p1, p1 + mcnt - 3, 
    $$$$$: 6062-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6062-block  1
branch  2 never executed
branch  3 never executed
    #####: 6063:				                      reg_info))
    #####: 6064:                    return false;
    $$$$$: 6064-block  0
        -: 6065:
        -: 6066:                  /* Move to right after this alternative, including the
        -: 6067:		     jump_past_alt.  */
    #####: 6068:                  p1 += mcnt;	
        -: 6069:
        -: 6070:                  /* Break if it's the beginning of an n-th alternative
        -: 6071:                     that doesn't begin with an on_failure_jump.  */
    #####: 6072:                  if ((re_opcode_t) *p1 != on_failure_jump)
    $$$$$: 6072-block  0
branch  0 never executed
branch  1 never executed
    #####: 6073:                    break;
    $$$$$: 6073-block  0
        -: 6074:		
        -: 6075:		  /* Still have to check that it's not an n-th
        -: 6076:		     alternative that starts with an on_failure_jump.  */
    #####: 6077:		  p1++;
    #####: 6078:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 6078-block  0
    $$$$$: 6078-block  1
    $$$$$: 6078-block  2
    $$$$$: 6078-block  3
    #####: 6079:                  if ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
    $$$$$: 6079-block  0
branch  0 never executed
branch  1 never executed
        -: 6080:                    {
        -: 6081:		      /* Get to the beginning of the n-th alternative.  */
    #####: 6082:                      p1 -= 3;
    #####: 6083:                      break;
    $$$$$: 6083-block  0
        -: 6084:                    }
        -: 6085:                }
        -: 6086:
        -: 6087:              /* Deal with the last alternative: go back and get number
        -: 6088:                 of the `jump_past_alt' just before it.  `mcnt' contains
        -: 6089:                 the length of the alternative.  */
    #####: 6090:              EXTRACT_NUMBER (mcnt, p1 - 2);
    $$$$$: 6090-block  0
    $$$$$: 6090-block  1
        -: 6091:
    #####: 6092:              if (!alt_match_null_string_p (p1, p1 + mcnt, reg_info))
    $$$$$: 6092-block  0
branch  0 never executed
branch  1 never executed
    #####: 6093:                return false;
    $$$$$: 6093-block  0
        -: 6094:
    #####: 6095:              p1 += mcnt;	/* Get past the n-th alternative.  */
    #####: 6096:            } /* if mcnt > 0 */
    $$$$$: 6096-block  0
    #####: 6097:          break;
    $$$$$: 6097-block  0
        -: 6098:
        -: 6099:          
        -: 6100:        case stop_memory:
        -: 6101:	  assert (p1[1] == **p);
    #####: 6102:          *p = p1 + 2;
    #####: 6103:          return true;
    $$$$$: 6103-block  0
        -: 6104:
        -: 6105:        
        -: 6106:        default: 
    #####: 6107:          if (!common_op_match_null_string_p (&p1, end, reg_info))
    $$$$$: 6107-block  0
branch  0 never executed
branch  1 never executed
    #####: 6108:            return false;
    $$$$$: 6108-block  0
    #####: 6109:        }
    $$$$$: 6109-block  0
        -: 6110:    } /* while p1 < end */
        -: 6111:
    #####: 6112:  return false;
    $$$$$: 6112-block  0
    #####: 6113:} /* group_match_null_string_p */
    $$$$$: 6113-block  0
        -: 6114:
        -: 6115:
        -: 6116:/* Similar to group_match_null_string_p, but doesn't deal with alternatives:
        -: 6117:   It expects P to be the first byte of a single alternative and END one
        -: 6118:   byte past the last. The alternative can contain groups.  */
        -: 6119:   
        -: 6120:static boolean
function alt_match_null_string_p called 0 returned 0% blocks executed 0%
    #####: 6121:alt_match_null_string_p (p, end, reg_info)
        -: 6122:    unsigned char *p, *end;
        -: 6123:    register_info_type *reg_info;
        -: 6124:{
        -: 6125:  int mcnt;
    #####: 6126:  unsigned char *p1 = p;
        -: 6127:  
    #####: 6128:  while (p1 < end)
    $$$$$: 6128-block  0
    $$$$$: 6128-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6128-block  2
        -: 6129:    {
        -: 6130:      /* Skip over opcodes that can match nothing, and break when we get 
        -: 6131:         to one that can't.  */
        -: 6132:      
    #####: 6133:      switch ((re_opcode_t) *p1)
    $$$$$: 6133-block  0
branch  0 never executed
branch  1 never executed
        -: 6134:        {
        -: 6135:	/* It's a loop.  */
        -: 6136:        case on_failure_jump:
    #####: 6137:          p1++;
    #####: 6138:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 6138-block  0
    $$$$$: 6138-block  1
    $$$$$: 6138-block  2
    $$$$$: 6138-block  3
    #####: 6139:          p1 += mcnt;
    #####: 6140:          break;
    $$$$$: 6140-block  0
        -: 6141:          
        -: 6142:	default: 
    #####: 6143:          if (!common_op_match_null_string_p (&p1, end, reg_info))
    $$$$$: 6143-block  0
branch  0 never executed
branch  1 never executed
    #####: 6144:            return false;
    $$$$$: 6144-block  0
    #####: 6145:        }
    $$$$$: 6145-block  0
        -: 6146:    }  /* while p1 < end */
        -: 6147:
    #####: 6148:  return true;
    $$$$$: 6148-block  0
    #####: 6149:} /* alt_match_null_string_p */
    $$$$$: 6149-block  0
        -: 6150:
        -: 6151:
        -: 6152:/* Deals with the ops common to group_match_null_string_p and
        -: 6153:   alt_match_null_string_p.  
        -: 6154:   
        -: 6155:   Sets P to one after the op and its arguments, if any.  */
        -: 6156:
        -: 6157:static boolean
function common_op_match_null_string_p called 0 returned 0% blocks executed 0%
    #####: 6158:common_op_match_null_string_p (p, end, reg_info)
        -: 6159:    unsigned char **p, *end;
        -: 6160:    register_info_type *reg_info;
        -: 6161:{
        -: 6162:  int mcnt;
        -: 6163:  boolean ret;
        -: 6164:  int reg_no;
    #####: 6165:  unsigned char *p1 = *p;
        -: 6166:
    #####: 6167:  switch ((re_opcode_t) *p1++)
    $$$$$: 6167-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$: 6167-block  1
    $$$$$: 6167-block  2
    $$$$$: 6167-block  3
    $$$$$: 6167-block  4
    $$$$$: 6167-block  5
    $$$$$: 6167-block  6
    $$$$$: 6167-block  7
    $$$$$: 6167-block  8
        -: 6168:    {
        -: 6169:    case no_op:
        -: 6170:    case begline:
        -: 6171:    case endline:
        -: 6172:    case begbuf:
        -: 6173:    case endbuf:
        -: 6174:    case wordbeg:
        -: 6175:    case wordend:
        -: 6176:    case wordbound:
        -: 6177:    case notwordbound:
        -: 6178:#ifdef emacs
        -: 6179:    case before_dot:
        -: 6180:    case at_dot:
        -: 6181:    case after_dot:
        -: 6182:#endif
    #####: 6183:      break;
    $$$$$: 6183-block  0
        -: 6184:
        -: 6185:    case start_memory:
    #####: 6186:      reg_no = *p1;
        -: 6187:      assert (reg_no > 0 && reg_no <= MAX_REGNUM);
    #####: 6188:      ret = group_match_null_string_p (&p1, end, reg_info);
        -: 6189:      
        -: 6190:      /* Have to set this here in case we're checking a group which
        -: 6191:         contains a group and a back reference to it.  */
        -: 6192:
    #####: 6193:      if (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) == MATCH_NULL_UNSET_VALUE)
    $$$$$: 6193-block  0
branch  0 never executed
branch  1 never executed
    #####: 6194:        REG_MATCH_NULL_STRING_P (reg_info[reg_no]) = ret;
    $$$$$: 6194-block  0
        -: 6195:
    #####: 6196:      if (!ret)
    $$$$$: 6196-block  0
branch  0 never executed
branch  1 never executed
    #####: 6197:        return false;
    $$$$$: 6197-block  0
    #####: 6198:      break;
    $$$$$: 6198-block  0
        -: 6199:          
        -: 6200:    /* If this is an optimized succeed_n for zero times, make the jump.  */
        -: 6201:    case jump:
    #####: 6202:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 6202-block  0
    $$$$$: 6202-block  1
    $$$$$: 6202-block  2
    $$$$$: 6202-block  3
    #####: 6203:      if (mcnt >= 0)
    $$$$$: 6203-block  0
branch  0 never executed
branch  1 never executed
    #####: 6204:        p1 += mcnt;
    $$$$$: 6204-block  0
        -: 6205:      else
    #####: 6206:        return false;
    $$$$$: 6206-block  0
    #####: 6207:      break;
    $$$$$: 6207-block  0
        -: 6208:
        -: 6209:    case succeed_n:
        -: 6210:      /* Get to the number of times to succeed.  */
    #####: 6211:      p1 += 2;		
    #####: 6212:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 6212-block  0
    $$$$$: 6212-block  1
    $$$$$: 6212-block  2
    $$$$$: 6212-block  3
        -: 6213:
    #####: 6214:      if (mcnt == 0)
    $$$$$: 6214-block  0
branch  0 never executed
branch  1 never executed
        -: 6215:        {
    #####: 6216:          p1 -= 4;
    #####: 6217:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
    $$$$$: 6217-block  0
    $$$$$: 6217-block  1
    $$$$$: 6217-block  2
    $$$$$: 6217-block  3
    #####: 6218:          p1 += mcnt;
    #####: 6219:        }
    $$$$$: 6219-block  0
        -: 6220:      else
    #####: 6221:        return false;
    $$$$$: 6221-block  0
    #####: 6222:      break;
    $$$$$: 6222-block  0
        -: 6223:
        -: 6224:    case duplicate: 
    #####: 6225:      if (!REG_MATCH_NULL_STRING_P (reg_info[*p1]))
    $$$$$: 6225-block  0
branch  0 never executed
branch  1 never executed
    #####: 6226:        return false;
    $$$$$: 6226-block  0
    #####: 6227:      break;
    $$$$$: 6227-block  0
        -: 6228:
        -: 6229:    case set_number_at:
    #####: 6230:      p1 += 4;
    $$$$$: 6230-block  0
        -: 6231:
        -: 6232:    default:
        -: 6233:      /* All other opcodes mean we cannot match the empty string.  */
    #####: 6234:      return false;
    $$$$$: 6234-block  0
        -: 6235:  }
        -: 6236:
    #####: 6237:  *p = p1;
    #####: 6238:  return true;
    $$$$$: 6238-block  0
    #####: 6239:} /* common_op_match_null_string_p */
    $$$$$: 6239-block  0
        -: 6240:
        -: 6241:
        -: 6242:/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN
        -: 6243:   bytes; nonzero otherwise.  */
        -: 6244:   
        -: 6245:static int
function bcmp_translate called 0 returned 0% blocks executed 0%
    #####: 6246:bcmp_translate (s1, s2, len, translate)
        -: 6247:     unsigned char *s1, *s2;
        -: 6248:     register int len;
        -: 6249:     char *translate;
        -: 6250:{
    #####: 6251:  register unsigned char *p1 = s1, *p2 = s2;
    #####: 6252:  while (len)
    $$$$$: 6252-block  0
    $$$$$: 6252-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6252-block  2
        -: 6253:    {
    #####: 6254:      if (translate[*p1++] != translate[*p2++]) return 1;
    $$$$$: 6254-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6254-block  1
    #####: 6255:      len--;
        -: 6256:    }
    #####: 6257:  return 0;
    $$$$$: 6257-block  0
    #####: 6258:}
    $$$$$: 6258-block  0
        -: 6259:
        -: 6260:/* Entry points for GNU code.  */
        -: 6261:
        -: 6262:/* re_compile_pattern is the GNU regular expression compiler: it
        -: 6263:   compiles PATTERN (of length SIZE) and puts the result in BUFP.
        -: 6264:   Returns 0 if the pattern was valid, otherwise an error string.
        -: 6265:   
        -: 6266:   Assumes the `allocated' (and perhaps `buffer') and `translate' fields
        -: 6267:   are set in BUFP on entry.
        -: 6268:   
        -: 6269:   We call regex_compile to do the actual compilation.  */
        -: 6270:
        -: 6271:const char *
function re_compile_pattern called 3 returned 100% blocks executed 100%
        3: 6272:re_compile_pattern (pattern, length, bufp)
        -: 6273:     const char *pattern;
        -: 6274:     int length;
        -: 6275:     struct re_pattern_buffer *bufp;
        -: 6276:{
        -: 6277:  reg_errcode_t ret;
        -: 6278:  
        -: 6279:  /* GNU code is written to assume at least RE_NREGS registers will be set
        -: 6280:     (and at least one extra will be -1).  */
        3: 6281:  bufp->regs_allocated = REGS_UNALLOCATED;
        -: 6282:  
        -: 6283:  /* And GNU code determines whether or not to get register information
        -: 6284:     by passing null for the REGS argument to re_match, etc., not by
        -: 6285:     setting no_sub.  */
        3: 6286:  bufp->no_sub = 0;
        -: 6287:  
        -: 6288:  /* Match anchors at newline.  */
        3: 6289:  bufp->newline_anchor = 1;
        -: 6290:  
        3: 6291:  ret = regex_compile (pattern, length, re_syntax_options, bufp);
        -: 6292:
        3: 6293:  return re_error_msg[(int) ret];
        3: 6293-block  0
        -: 6294:}     
        -: 6295:
        -: 6296:/* Entry points compatible with 4.2 BSD regex library.  We don't define
        -: 6297:   them if this is an Emacs or POSIX compilation.  */
        -: 6298:
        -: 6299:#if !defined (emacs) && !defined (_POSIX_SOURCE)
        -: 6300:
        -: 6301:/* BSD has one and only one pattern buffer.  */
        -: 6302:static struct re_pattern_buffer re_comp_buf;
        -: 6303:
        -: 6304:char *
function re_comp called 0 returned 0% blocks executed 0%
    #####: 6305:re_comp (s)
        -: 6306:    const char *s;
        -: 6307:{
        -: 6308:  reg_errcode_t ret;
        -: 6309:  
    #####: 6310:  if (!s)
    $$$$$: 6310-block  0
branch  0 never executed
branch  1 never executed
        -: 6311:    {
    #####: 6312:      if (!re_comp_buf.buffer)
    $$$$$: 6312-block  0
branch  0 never executed
branch  1 never executed
    #####: 6313:	return "No previous regular expression";
    $$$$$: 6313-block  0
    #####: 6314:      return 0;
    $$$$$: 6314-block  0
        -: 6315:    }
        -: 6316:
    #####: 6317:  if (!re_comp_buf.buffer)
    $$$$$: 6317-block  0
branch  0 never executed
branch  1 never executed
        -: 6318:    {
    #####: 6319:      re_comp_buf.buffer = (unsigned char *) malloc (200);
    #####: 6320:      if (re_comp_buf.buffer == NULL)
    $$$$$: 6320-block  0
branch  0 never executed
branch  1 never executed
    #####: 6321:        return "Memory exhausted";
    $$$$$: 6321-block  0
    #####: 6322:      re_comp_buf.allocated = 200;
        -: 6323:
    #####: 6324:      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
    #####: 6325:      if (re_comp_buf.fastmap == NULL)
    $$$$$: 6325-block  0
branch  0 never executed
branch  1 never executed
    #####: 6326:	return "Memory exhausted";
    $$$$$: 6326-block  0
    #####: 6327:    }
    $$$$$: 6327-block  0
        -: 6328:
        -: 6329:  /* Since `re_exec' always passes NULL for the `regs' argument, we
        -: 6330:     don't need to initialize the pattern buffer fields which affect it.  */
        -: 6331:
        -: 6332:  /* Match anchors at newlines.  */
    #####: 6333:  re_comp_buf.newline_anchor = 1;
        -: 6334:
    #####: 6335:  ret = regex_compile (s, strlen (s), re_syntax_options, &re_comp_buf);
        -: 6336:  
        -: 6337:  /* Yes, we're discarding `const' here.  */
    #####: 6338:  return (char *) re_error_msg[(int) ret];
    $$$$$: 6338-block  0
    #####: 6339:}
    $$$$$: 6339-block  0
        -: 6340:
        -: 6341:
        -: 6342:int
function re_exec called 0 returned 0% blocks executed 0%
    #####: 6343:re_exec (s)
        -: 6344:    const char *s;
        -: 6345:{
    #####: 6346:  const int len = strlen (s);
    #####: 6347:  return
    $$$$$: 6347-block  0
    #####: 6348:    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
        -: 6349:}
        -: 6350:#endif /* not emacs and not _POSIX_SOURCE */
        -: 6351:
        -: 6352:/* POSIX.2 functions.  Don't define these for Emacs.  */
        -: 6353:
        -: 6354:#ifndef emacs
        -: 6355:
        -: 6356:/* regcomp takes a regular expression as a string and compiles it.
        -: 6357:
        -: 6358:   PREG is a regex_t *.  We do not expect any fields to be initialized,
        -: 6359:   since POSIX says we shouldn't.  Thus, we set
        -: 6360:
        -: 6361:     `buffer' to the compiled pattern;
        -: 6362:     `used' to the length of the compiled pattern;
        -: 6363:     `syntax' to RE_SYNTAX_POSIX_EXTENDED if the
        -: 6364:       REG_EXTENDED bit in CFLAGS is set; otherwise, to
        -: 6365:       RE_SYNTAX_POSIX_BASIC;
        -: 6366:     `newline_anchor' to REG_NEWLINE being set in CFLAGS;
        -: 6367:     `fastmap' and `fastmap_accurate' to zero;
        -: 6368:     `re_nsub' to the number of subexpressions in PATTERN.
        -: 6369:
        -: 6370:   PATTERN is the address of the pattern string.
        -: 6371:
        -: 6372:   CFLAGS is a series of bits which affect compilation.
        -: 6373:
        -: 6374:     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
        -: 6375:     use POSIX basic syntax.
        -: 6376:
        -: 6377:     If REG_NEWLINE is set, then . and [^...] don't match newline.
        -: 6378:     Also, regexec will try a match beginning after every newline.
        -: 6379:
        -: 6380:     If REG_ICASE is set, then we considers upper- and lowercase
        -: 6381:     versions of letters to be equivalent when matching.
        -: 6382:
        -: 6383:     If REG_NOSUB is set, then when PREG is passed to regexec, that
        -: 6384:     routine will report only success or failure, and nothing about the
        -: 6385:     registers.
        -: 6386:
        -: 6387:   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for
        -: 6388:   the return codes and their meanings.)  */
        -: 6389:
        -: 6390:int
function regcomp called 0 returned 0% blocks executed 0%
    #####: 6391:regcomp (preg, pattern, cflags)
        -: 6392:    regex_t *preg;
        -: 6393:    const char *pattern; 
        -: 6394:    int cflags;
        -: 6395:{
        -: 6396:  reg_errcode_t ret;
    #####: 6397:  unsigned syntax
    #####: 6398:    = (cflags & REG_EXTENDED) ?
        -: 6399:      RE_SYNTAX_POSIX_EXTENDED : RE_SYNTAX_POSIX_BASIC;
        -: 6400:
        -: 6401:  /* regex_compile will allocate the space for the compiled pattern.  */
    #####: 6402:  preg->buffer = 0;
    #####: 6403:  preg->allocated = 0;
    #####: 6404:  preg->used = 0;
        -: 6405:  
        -: 6406:  /* Don't bother to use a fastmap when searching.  This simplifies the
        -: 6407:     REG_NEWLINE case: if we used a fastmap, we'd have to put all the
        -: 6408:     characters after newlines into the fastmap.  This way, we just try
        -: 6409:     every character.  */
    #####: 6410:  preg->fastmap = 0;
        -: 6411:  
    #####: 6412:  if (cflags & REG_ICASE)
    $$$$$: 6412-block  0
branch  0 never executed
branch  1 never executed
        -: 6413:    {
        -: 6414:      unsigned i;
        -: 6415:      
    #####: 6416:      preg->translate = (char *) malloc (CHAR_SET_SIZE);
    #####: 6417:      if (preg->translate == NULL)
    $$$$$: 6417-block  0
branch  0 never executed
branch  1 never executed
    #####: 6418:        return (int) REG_ESPACE;
    $$$$$: 6418-block  0
        -: 6419:
        -: 6420:      /* Map uppercase characters to corresponding lowercase ones.  */
    #####: 6421:      for (i = 0; i < CHAR_SET_SIZE; i++)
    $$$$$: 6421-block  0
    $$$$$: 6421-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6421-block  2
    #####: 6422:        preg->translate[i] = ISUPPER (i) ? tolower (i) : i;
    $$$$$: 6422-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6422-block  1
    $$$$$: 6422-block  2
    $$$$$: 6422-block  3
    #####: 6423:    }
    $$$$$: 6423-block  0
        -: 6424:  else
    #####: 6425:    preg->translate = NULL;
    $$$$$: 6425-block  0
        -: 6426:
        -: 6427:  /* If REG_NEWLINE is set, newlines are treated differently.  */
    #####: 6428:  if (cflags & REG_NEWLINE)
    $$$$$: 6428-block  0
branch  0 never executed
branch  1 never executed
        -: 6429:    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */
    #####: 6430:      syntax &= ~RE_DOT_NEWLINE;
    #####: 6431:      syntax |= RE_HAT_LISTS_NOT_NEWLINE;
        -: 6432:      /* It also changes the matching behavior.  */
    #####: 6433:      preg->newline_anchor = 1;
    #####: 6434:    }
    $$$$$: 6434-block  0
        -: 6435:  else
    #####: 6436:    preg->newline_anchor = 0;
    $$$$$: 6436-block  0
        -: 6437:
    #####: 6438:  preg->no_sub = !!(cflags & REG_NOSUB);
        -: 6439:
        -: 6440:  /* POSIX says a null character in the pattern terminates it, so we 
        -: 6441:     can use strlen here in compiling the pattern.  */
    #####: 6442:  ret = regex_compile (pattern, strlen (pattern), syntax, preg);
        -: 6443:  
        -: 6444:  /* POSIX doesn't distinguish between an unmatched open-group and an
        -: 6445:     unmatched close-group: both are REG_EPAREN.  */
    #####: 6446:  if (ret == REG_ERPAREN) ret = REG_EPAREN;
    $$$$$: 6446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6446-block  1
        -: 6447:  
    #####: 6448:  return (int) ret;
    $$$$$: 6448-block  0
    #####: 6449:}
    $$$$$: 6449-block  0
        -: 6450:
        -: 6451:
        -: 6452:/* regexec searches for a given pattern, specified by PREG, in the
        -: 6453:   string STRING.
        -: 6454:   
        -: 6455:   If NMATCH is zero or REG_NOSUB was set in the cflags argument to
        -: 6456:   `regcomp', we ignore PMATCH.  Otherwise, we assume PMATCH has at
        -: 6457:   least NMATCH elements, and we set them to the offsets of the
        -: 6458:   corresponding matched substrings.
        -: 6459:   
        -: 6460:   EFLAGS specifies `execution flags' which affect matching: if
        -: 6461:   REG_NOTBOL is set, then ^ does not match at the beginning of the
        -: 6462:   string; if REG_NOTEOL is set, then $ does not match at the end.
        -: 6463:   
        -: 6464:   We return 0 if we find a match and REG_NOMATCH if not.  */
        -: 6465:
        -: 6466:int
function regexec called 0 returned 0% blocks executed 0%
    #####: 6467:regexec (preg, string, nmatch, pmatch, eflags)
        -: 6468:    const regex_t *preg;
        -: 6469:    const char *string; 
        -: 6470:    size_t nmatch; 
        -: 6471:    regmatch_t pmatch[]; 
        -: 6472:    int eflags;
        -: 6473:{
        -: 6474:  int ret;
        -: 6475:  struct re_registers regs;
        -: 6476:  regex_t private_preg;
    #####: 6477:  int len = strlen (string);
    #####: 6478:  boolean want_reg_info = !preg->no_sub && nmatch > 0;
    $$$$$: 6478-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6478-block  1
        -: 6479:
    #####: 6480:  private_preg = *preg;
        -: 6481:  
    #####: 6482:  private_preg.not_bol = !!(eflags & REG_NOTBOL);
    #####: 6483:  private_preg.not_eol = !!(eflags & REG_NOTEOL);
        -: 6484:  
        -: 6485:  /* The user has told us exactly how many registers to return
        -: 6486:     information about, via `nmatch'.  We have to pass that on to the
        -: 6487:     matching routines.  */
    #####: 6488:  private_preg.regs_allocated = REGS_FIXED;
        -: 6489:  
    #####: 6490:  if (want_reg_info)
    $$$$$: 6490-block  0
branch  0 never executed
branch  1 never executed
        -: 6491:    {
    #####: 6492:      regs.num_regs = nmatch;
    #####: 6493:      regs.start = TALLOC (nmatch, regoff_t);
    #####: 6494:      regs.end = TALLOC (nmatch, regoff_t);
    #####: 6495:      if (regs.start == NULL || regs.end == NULL)
    $$$$$: 6495-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6495-block  1
branch  2 never executed
branch  3 never executed
    #####: 6496:        return (int) REG_NOMATCH;
    $$$$$: 6496-block  0
    #####: 6497:    }
    $$$$$: 6497-block  0
        -: 6498:
        -: 6499:  /* Perform the searching operation.  */
    #####: 6500:  ret = re_search (&private_preg, string, len,
    #####: 6501:                   /* start: */ 0, /* range: */ len,
    #####: 6502:                   want_reg_info ? &regs : (struct re_registers *) 0);
    $$$$$: 6502-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6502-block  1
    $$$$$: 6502-block  2
        -: 6503:  
        -: 6504:  /* Copy the register information to the POSIX structure.  */
    #####: 6505:  if (want_reg_info)
    $$$$$: 6505-block  0
branch  0 never executed
branch  1 never executed
        -: 6506:    {
    #####: 6507:      if (ret >= 0)
    $$$$$: 6507-block  0
branch  0 never executed
branch  1 never executed
        -: 6508:        {
        -: 6509:          unsigned r;
        -: 6510:
    #####: 6511:          for (r = 0; r < nmatch; r++)
    $$$$$: 6511-block  0
    $$$$$: 6511-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6511-block  2
        -: 6512:            {
    #####: 6513:              pmatch[r].rm_so = regs.start[r];
    #####: 6514:              pmatch[r].rm_eo = regs.end[r];
    #####: 6515:            }
    $$$$$: 6515-block  0
    #####: 6516:        }
    $$$$$: 6516-block  0
        -: 6517:
        -: 6518:      /* If we needed the temporary register info, free the space now.  */
    #####: 6519:      free (regs.start);
    #####: 6520:      free (regs.end);
    #####: 6521:    }
    $$$$$: 6521-block  0
        -: 6522:
        -: 6523:  /* We want zero return to mean success, unlike `re_search'.  */
    #####: 6524:  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
    $$$$$: 6524-block  0
    #####: 6525:}
    $$$$$: 6525-block  0
        -: 6526:
        -: 6527:
        -: 6528:/* Returns a message corresponding to an error code, ERRCODE, returned
        -: 6529:   from either regcomp or regexec.   We don't use PREG here.  */
        -: 6530:
        -: 6531:size_t
function regerror called 0 returned 0% blocks executed 0%
    #####: 6532:regerror (errcode, preg, errbuf, errbuf_size)
        -: 6533:    int errcode;
        -: 6534:    const regex_t *preg;
        -: 6535:    char *errbuf;
        -: 6536:    size_t errbuf_size;
        -: 6537:{
        -: 6538:  const char *msg;
        -: 6539:  size_t msg_size;
        -: 6540:
    #####: 6541:  if (errcode < 0
    $$$$$: 6541-block  0
    $$$$$: 6541-block  1
    #####: 6542:      || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0])))
    $$$$$: 6542-block  0
branch  0 never executed
branch  1 never executed
        -: 6543:    /* Only error codes returned by the rest of the code should be passed 
        -: 6544:       to this routine.  If we are given anything else, or if other regex
        -: 6545:       code generates an invalid error code, then the program has a bug.
        -: 6546:       Dump core so we can fix it.  */
    #####: 6547:    abort ();
    $$$$$: 6547-block  0
        -: 6548:
    #####: 6549:  msg = re_error_msg[errcode];
        -: 6550:
        -: 6551:  /* POSIX doesn't require that we do anything in this case, but why
        -: 6552:     not be nice.  */
    #####: 6553:  if (! msg)
    $$$$$: 6553-block  0
branch  0 never executed
branch  1 never executed
    #####: 6554:    msg = "Success";
    $$$$$: 6554-block  0
        -: 6555:
    #####: 6556:  msg_size = strlen (msg) + 1; /* Includes the null.  */
        -: 6557:  
    #####: 6558:  if (errbuf_size != 0)
    $$$$$: 6558-block  0
branch  0 never executed
branch  1 never executed
        -: 6559:    {
    #####: 6560:      if (msg_size > errbuf_size)
    $$$$$: 6560-block  0
branch  0 never executed
branch  1 never executed
        -: 6561:        {
    #####: 6562:          strncpy (errbuf, msg, errbuf_size - 1);
    #####: 6563:          errbuf[errbuf_size - 1] = 0;
    #####: 6564:        }
    $$$$$: 6564-block  0
        -: 6565:      else
    #####: 6566:        strcpy (errbuf, msg);
    $$$$$: 6566-block  0
    #####: 6567:    }
    $$$$$: 6567-block  0
        -: 6568:
    #####: 6569:  return msg_size;
    $$$$$: 6569-block  0
        -: 6570:}
        -: 6571:
        -: 6572:
        -: 6573:/* Free dynamically allocated space used by PREG.  */
        -: 6574:
        -: 6575:void
function regfree called 0 returned 0% blocks executed 0%
    #####: 6576:regfree (preg)
        -: 6577:    regex_t *preg;
        -: 6578:{
    #####: 6579:  if (preg->buffer != NULL)
    $$$$$: 6579-block  0
branch  0 never executed
branch  1 never executed
    #####: 6580:    free (preg->buffer);
    $$$$$: 6580-block  0
    #####: 6581:  preg->buffer = NULL;
        -: 6582:  
    #####: 6583:  preg->allocated = 0;
    #####: 6584:  preg->used = 0;
        -: 6585:
    #####: 6586:  if (preg->fastmap != NULL)
    $$$$$: 6586-block  0
branch  0 never executed
branch  1 never executed
    #####: 6587:    free (preg->fastmap);
    $$$$$: 6587-block  0
    #####: 6588:  preg->fastmap = NULL;
    #####: 6589:  preg->fastmap_accurate = 0;
        -: 6590:
    #####: 6591:  if (preg->translate != NULL)
    $$$$$: 6591-block  0
branch  0 never executed
branch  1 never executed
    #####: 6592:    free (preg->translate);
    $$$$$: 6592-block  0
    #####: 6593:  preg->translate = NULL;
    #####: 6594:}
    $$$$$: 6594-block  0
        -: 6595:
        -: 6596:#endif /* not emacs  */
        -: 6597:
        -: 6598:/*
        -: 6599:Local variables:
        -: 6600:make-backup-files: t
        -: 6601:version-control: t
        -: 6602:trim-versions-without-asking: nil
        -: 6603:End:
        -: 6604:*/
        -: 6605:/* dfa.c - deterministic extended regexp routines for GNU
        -: 6606:   Copyright (C) 1988 Free Software Foundation, Inc.
        -: 6607:
        -: 6608:   This program is free software; you can redistribute it and/or modify
        -: 6609:   it under the terms of the GNU General Public License as published by
        -: 6610:   the Free Software Foundation; either version 2, or (at your option)
        -: 6611:   any later version.
        -: 6612:
        -: 6613:   This program is distributed in the hope that it will be useful,
        -: 6614:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 6615:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 6616:   GNU General Public License for more details.
        -: 6617:
        -: 6618:   You should have received a copy of the GNU General Public License
        -: 6619:   along with this program; if not, write to the Free Software
        -: 6620:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 6621:
        -: 6622:/* Written June, 1988 by Mike Haertel
        -: 6623:   Modified July, 1988 by Arthur David Olson to assist BMG speedups  */
        -: 6624:
        -: 6625:/*#include <assert.h> */
        -: 6626:/*#include <ctype.h> */
        -: 6627:/*#include <stdio.h> */
        -: 6628:
        -: 6629:#ifdef STDC_HEADERS
        -: 6630:#if flag_stdlib==0
        -: 6631:#include <stdlib.h>
        -: 6632:#define flag_stdlib 1
        -: 6633:#endif
        -: 6634:#else
        -: 6635:#if flag_systypes==0 
        -: 6636:#include <sys/types.h>
        -: 6637:#define flag_systypes 1
        -: 6638:#endif
        -: 6639:extern char *calloc(), *malloc(), *realloc();
        -: 6640:extern void free();
        -: 6641:#endif
        -: 6642:
        -: 6643:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
        -: 6644:#if flag_string==0
        -: 6645:#include <string.h>
        -: 6646:#define flag_string 1
        -: 6647:#endif
        -: 6648:#undef index
        -: 6649:#define index strchr
        -: 6650:#else
        -: 6651:#if flag_strings==0
        -: 6652:#include <strings.h>
        -: 6653:#define flag_strings 1
        -: 6654:#endif
        -: 6655:#endif
        -: 6656:
        -: 6657:#ifndef isgraph
        -: 6658:#define isgraph(C) (isprint(C) && !isspace(C))
        -: 6659:#endif
        -: 6660:
        -: 6661:#undef ISALPHA
        -: 6662:#undef ISUPPER
        -: 6663:#undef ISLOWER
        -: 6664:#undef ISDIGIT
        -: 6665:#undef ISXDIGIT
        -: 6666:#undef ISSPACE
        -: 6667:#undef ISPUNCT
        -: 6668:#undef ISALNUM
        -: 6669:#undef ISPRINT
        -: 6670:#undef ISGRAPH
        -: 6671:#undef ISCNTRL
        -: 6672:
        -: 6673:
        -: 6674:#ifdef isascii
        -: 6675:#define ISALPHA(C) (isascii(C) && isalpha(C))
        -: 6676:#define ISUPPER(C) (isascii(C) && isupper(C))
        -: 6677:#define ISLOWER(C) (isascii(C) && islower(C))
        -: 6678:#define ISDIGIT(C) (isascii(C) && isdigit(C))
        -: 6679:#define ISXDIGIT(C) (isascii(C) && isxdigit(C))
        -: 6680:#define ISSPACE(C) (isascii(C) && isspace(C))
        -: 6681:#define ISPUNCT(C) (isascii(C) && ispunct(C))
        -: 6682:#define ISALNUM(C) (isascii(C) && isalnum(C))
        -: 6683:#define ISPRINT(C) (isascii(C) && isprint(C))
        -: 6684:#define ISGRAPH(C) (isascii(C) && isgraph(C))
        -: 6685:#define ISCNTRL(C) (isascii(C) && iscntrl(C))
        -: 6686:#else
        -: 6687:#define ISALPHA(C) isalpha(C)
        -: 6688:#define ISUPPER(C) isupper(C)
        -: 6689:#define ISLOWER(C) islower(C)
        -: 6690:#define ISDIGIT(C) isdigit(C)
        -: 6691:#define ISXDIGIT(C) isxdigit(C)
        -: 6692:#define ISSPACE(C) isspace(C)
        -: 6693:#define ISPUNCT(C) ispunct(C)
        -: 6694:#define ISALNUM(C) isalnum(C)
        -: 6695:#define ISPRINT(C) isprint(C)
        -: 6696:#define ISGRAPH(C) isgraph(C)
        -: 6697:#define ISCNTRL(C) iscntrl(C)
        -: 6698:#endif
        -: 6699:
        -: 6700:#include "dfa.h"
        -: 6701:/*#include "regex.h"*/
        -: 6702:
        -: 6703:#if __STDC__
        -: 6704:typedef void *ptr_t;
        -: 6705:#else
        -: 6706:typedef char *ptr_t;
        -: 6707:#endif
        -: 6708:
        -: 6709:static void	dfamust();
        -: 6710:
        -: 6711:static ptr_t
function xcalloc called 5 returned 100% blocks executed 66%
        5: 6712:xcalloc(n, s)
        -: 6713:     int n;
        -: 6714:     size_t s;
        -: 6715:{
        5: 6716:  ptr_t r = calloc(n, s);
        -: 6717:
        5: 6718:  if (!r)
        5: 6718-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 6719:    dfaerror("Memory exhausted");
    $$$$$: 6719-block  0
        5: 6720:  return r;
        5: 6720-block  0
        -: 6721:}
        -: 6722:
        -: 6723:static ptr_t
function xmalloc_1 called 335 returned 100% blocks executed 66%
      335: 6724:xmalloc_1(n)
        -: 6725:     size_t n;
        -: 6726:{
      335: 6727:  ptr_t r = malloc(n);
        -: 6728:
        -: 6729:  assert(n != 0);
      335: 6730:  if (!r)
      335: 6730-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 6731:    dfaerror("Memory exhausted");
    $$$$$: 6731-block  0
      335: 6732:  return r;
      335: 6732-block  0
        -: 6733:}
        -: 6734:
        -: 6735:static ptr_t
function xrealloc_1 called 68 returned 100% blocks executed 66%
       68: 6736:xrealloc_1(p, n)
        -: 6737:     ptr_t p;
        -: 6738:     size_t n;
        -: 6739:{
       68: 6740:  ptr_t r = realloc(p, n);
        -: 6741:
        -: 6742:  assert(n != 0);
       68: 6743:  if (!r)
       68: 6743-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 6744:    dfaerror("Memory exhausted");
    $$$$$: 6744-block  0
       68: 6745:  return r;
       68: 6745-block  0
        -: 6746:}
        -: 6747:
        -: 6748:#define CALLOC(p, t, n) ((p) = (t *) xcalloc((n), sizeof (t)))
        -: 6749:#define MALLOC(p, t, n) ((p) = (t *) xmalloc_1((n) * sizeof (t)))
        -: 6750:#define REALLOC(p, t, n) ((p) = (t *) xrealloc_1((ptr_t) (p), (n) * sizeof (t)))
        -: 6751:
        -: 6752:/* Reallocate an array of type t if nalloc is too small for index. */
        -: 6753:#define REALLOC_IF_NECESSARY(p, t, nalloc, index) \
        -: 6754:  if ((index) >= (nalloc))			  \
        -: 6755:    {						  \
        -: 6756:      while ((index) >= (nalloc))		  \
        -: 6757:	(nalloc) *= 2;				  \
        -: 6758:      REALLOC(p, t, nalloc);			  \
        -: 6759:    }
        -: 6760:
        -: 6761:#ifdef DEBUG
        -: 6762:
        -: 6763:static void
        -: 6764:prtok(t)
        -: 6765:     token t;
        -: 6766:{
        -: 6767:  char *s;
        -: 6768:
        -: 6769:  if (t < 0)
        -: 6770:    fprintf(stderr, "END");
        -: 6771:  else if (t < NOTCHAR)
        -: 6772:    fprintf(stderr, "%c", t);
        -: 6773:  else
        -: 6774:    {
        -: 6775:      switch (t)
        -: 6776:	{
        -: 6777:	case EMPTY: s = "EMPTY"; break;
        -: 6778:	case BACKREF: s = "BACKREF"; break;
        -: 6779:	case BEGLINE: s = "BEGLINE"; break;
        -: 6780:	case ENDLINE: s = "ENDLINE"; break;
        -: 6781:	case BEGWORD: s = "BEGWORD"; break;
        -: 6782:	case ENDWORD: s = "ENDWORD"; break;
        -: 6783:	case LIMWORD: s = "LIMWORD"; break;
        -: 6784:	case NOTLIMWORD: s = "NOTLIMWORD"; break;
        -: 6785:	case QMARK: s = "QMARK"; break;
        -: 6786:	case STAR: s = "STAR"; break;
        -: 6787:	case PLUS: s = "PLUS"; break;
        -: 6788:	case CAT: s = "CAT"; break;
        -: 6789:	case OR: s = "OR"; break;
        -: 6790:	case ORTOP: s = "ORTOP"; break;
        -: 6791:	case LPAREN: s = "LPAREN"; break;
        -: 6792:	case RPAREN: s = "RPAREN"; break;
        -: 6793:	default: s = "CSET"; break;
        -: 6794:	}
        -: 6795:      fprintf(stderr, "%s", s);
        -: 6796:    }
        -: 6797:}
        -: 6798:#endif /* DEBUG */
        -: 6799:
        -: 6800:/* Stuff pertaining to charclasses. */
        -: 6801:
        -: 6802:static int
function tstbit called 37 returned 100% blocks executed 100%
       37: 6803:tstbit(b, c)
        -: 6804:     int b;
        -: 6805:     charclass c;
        -: 6806:{
       37: 6807:  return c[b / INTBITS] & 1 << b % INTBITS;
       37: 6807-block  0
        -: 6808:}
        -: 6809:
        -: 6810:static void
function setbit called 429 returned 100% blocks executed 100%
      429: 6811:setbit(b, c)
        -: 6812:     int b;
        -: 6813:     charclass c;
        -: 6814:{
      429: 6815:  c[b / INTBITS] |= 1 << b % INTBITS;
      429: 6816:}
      429: 6816-block  0
        -: 6817:
        -: 6818:static void
function clrbit called 139 returned 100% blocks executed 100%
      139: 6819:clrbit(b, c)
        -: 6820:     int b;
        -: 6821:     charclass c;
        -: 6822:{
      139: 6823:  c[b / INTBITS] &= ~(1 << b % INTBITS);
      139: 6824:}
      139: 6824-block  0
        -: 6825:
        -: 6826:static void
function copyset called 175 returned 100% blocks executed 100%
      175: 6827:copyset(src, dst)
        -: 6828:     charclass src;
        -: 6829:     charclass dst;
        -: 6830:{
        -: 6831:  int i;
        -: 6832:
     1575: 6833:  for (i = 0; i < CHARCLASS_INTS; ++i)
      175: 6833-block  0
     1575: 6833-block  1
branch  0 taken 89%
branch  1 taken 11%
     1400: 6833-block  2
     1400: 6834:    dst[i] = src[i];
     1400: 6834-block  0
      175: 6835:}
      175: 6835-block  0
        -: 6836:
        -: 6837:static void
function zeroset called 65 returned 100% blocks executed 100%
       65: 6838:zeroset(s)
        -: 6839:     charclass s;
        -: 6840:{
        -: 6841:  int i;
        -: 6842:
      585: 6843:  for (i = 0; i < CHARCLASS_INTS; ++i)
       65: 6843-block  0
      585: 6843-block  1
branch  0 taken 89%
branch  1 taken 11%
      520: 6843-block  2
      520: 6844:    s[i] = 0;
      520: 6844-block  0
       65: 6845:}
       65: 6845-block  0
        -: 6846:
        -: 6847:static void
function notset called 3 returned 100% blocks executed 100%
        3: 6848:notset(s)
        -: 6849:     charclass s;
        -: 6850:{
        -: 6851:  int i;
        -: 6852:
       27: 6853:  for (i = 0; i < CHARCLASS_INTS; ++i)
        3: 6853-block  0
       27: 6853-block  1
branch  0 taken 89%
branch  1 taken 11%
       24: 6853-block  2
       24: 6854:    s[i] = ~s[i];
       24: 6854-block  0
        3: 6855:}
        3: 6855-block  0
        -: 6856:
        -: 6857:static int
function equal called 96 returned 100% blocks executed 100%
       96: 6858:equal(s1, s2)
        -: 6859:     charclass s1;
        -: 6860:     charclass s2;
        -: 6861:{
        -: 6862:  int i;
        -: 6863:
      316: 6864:  for (i = 0; i < CHARCLASS_INTS; ++i)
       96: 6864-block  0
      316: 6864-block  1
branch  0 taken 96%
branch  1 taken 4%
      220: 6864-block  2
      302: 6865:    if (s1[i] != s2[i])
      302: 6865-block  0
branch  0 taken 27%
branch  1 taken 73%
      220: 6865-block  1
       82: 6866:      return 0;
       82: 6866-block  0
       14: 6867:  return 1;
       14: 6867-block  0
       96: 6868:}
       96: 6868-block  0
        -: 6869:
        -: 6870:/* A pointer to the current dfa is kept here during parsing. */
        -: 6871:static struct dfa *dfa;
        -: 6872:
        -: 6873:/* Find the index of charclass s in dfa->charclasses, or allocate a new charclass. */
        -: 6874:static int
function charclass_index called 32 returned 100% blocks executed 100%
       32: 6875:charclass_index(s)
        -: 6876:     charclass s;
        -: 6877:{
        -: 6878:  int i;
        -: 6879:
      114: 6880:  for (i = 0; i < dfa->cindex; ++i)
       32: 6880-block  0
      114: 6880-block  1
branch  0 taken 84%
branch  1 taken 16%
       82: 6880-block  2
       96: 6881:    if (equal(s, dfa->charclasses[i]))
       96: 6881-block  0
branch  0 taken 85%
branch  1 taken 15%
       82: 6881-block  1
       14: 6882:      return i;
       14: 6882-block  0
       24: 6883:  REALLOC_IF_NECESSARY(dfa->charclasses, charclass, dfa->calloc, dfa->cindex);
       18: 6883-block  0
branch  0 taken 67%
branch  1 taken 33%
        6: 6883-block  1
       12: 6883-block  2
branch  2 taken 50%
branch  3 taken 50%
        6: 6883-block  3
        6: 6883-block  4
       18: 6884:  ++dfa->cindex;
       18: 6885:  copyset(s, dfa->charclasses[i]);
       18: 6886:  return i;
       18: 6886-block  0
       32: 6887:}
       32: 6887-block  0
        -: 6888:
        -: 6889:/* Syntax bits controlling the behavior of the lexical analyzer. */
        -: 6890:static int syntax_bits, syntax_bits_set;
        -: 6891:
        -: 6892:/* Flag for case-folding letters into sets. */
        -: 6893:static int case_fold;
        -: 6894:
        -: 6895:/* Entry point to set syntax options. */
        -: 6896:void
function dfasyntax called 3 returned 100% blocks executed 100%
        3: 6897:dfasyntax(bits, fold)
        -: 6898:     int bits;
        -: 6899:     int fold;
        -: 6900:{
        3: 6901:  syntax_bits_set = 1;
        3: 6902:  syntax_bits = bits;
        3: 6903:  case_fold = fold;
        3: 6904:}
        3: 6904-block  0
        -: 6905:
        -: 6906:/* Lexical analyzer.  All the dross that deals with the obnoxious
        -: 6907:   GNU Regex syntax bits is located here.  The poor, suffering
        -: 6908:   reader is referred to the GNU Regex documentation for the
        -: 6909:   meaning of the @#%!@#%^!@ syntax bits. */
        -: 6910:
        -: 6911:static char *lexstart;		/* Pointer to beginning of input string. */
        -: 6912:static char *lexptr;		/* Pointer to next input character. */
        -: 6913:static lexleft;			/* Number of characters remaining. */
        -: 6914:static token lasttok;		/* Previous token returned; initially END. */
        -: 6915:static int laststart;		/* True if we're separated from beginning or (, |
        -: 6916:				   only by zero-width characters. */
        -: 6917:static int parens;		/* Count of outstanding left parens. */
        -: 6918:static int minrep, maxrep;	/* Repeat counts for {m,n}. */
        -: 6919:
        -: 6920:/* Note that characters become unsigned here. */
        -: 6921:#define FETCH(c, eoferr)   	      \
        -: 6922:  {			   	      \
        -: 6923:    if (! lexleft)	   	      \
        -: 6924:      if (eoferr != 0)	   	      \
        -: 6925:	dfaerror(eoferr);  	      \
        -: 6926:      else		   	      \
        -: 6927:	return END;	   	      \
        -: 6928:    (c) = (unsigned char) *lexptr++;  \
        -: 6929:    --lexleft;		   	      \
        -: 6930:  }
        -: 6931:
        -: 6932:#define FUNC(F, P) static int F(c) int c; { return P(c); }
        -: 6933:
function is_alpha called 0 returned 0% blocks executed 0%
    #####: 6934:FUNC(is_alpha, ISALPHA)
    $$$$$: 6934-block  0
function is_upper called 0 returned 0% blocks executed 0%
    #####: 6935:FUNC(is_upper, ISUPPER)
    $$$$$: 6935-block  0
function is_lower called 0 returned 0% blocks executed 0%
    #####: 6936:FUNC(is_lower, ISLOWER)
    $$$$$: 6936-block  0
function is_digit called 0 returned 0% blocks executed 0%
    #####: 6937:FUNC(is_digit, ISDIGIT)
    $$$$$: 6937-block  0
function is_xdigit called 0 returned 0% blocks executed 0%
    #####: 6938:FUNC(is_xdigit, ISXDIGIT)
    $$$$$: 6938-block  0
function is_space called 0 returned 0% blocks executed 0%
    #####: 6939:FUNC(is_space, ISSPACE)
    $$$$$: 6939-block  0
function is_punct called 0 returned 0% blocks executed 0%
    #####: 6940:FUNC(is_punct, ISPUNCT)
    $$$$$: 6940-block  0
function is_alnum called 0 returned 0% blocks executed 0%
    #####: 6941:FUNC(is_alnum, ISALNUM)
    $$$$$: 6941-block  0
function is_print called 0 returned 0% blocks executed 0%
    #####: 6942:FUNC(is_print, ISPRINT)
    $$$$$: 6942-block  0
function is_graph called 0 returned 0% blocks executed 0%
    #####: 6943:FUNC(is_graph, ISGRAPH)
    $$$$$: 6943-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6943-block  1
    $$$$$: 6943-block  2
function is_cntrl called 0 returned 0% blocks executed 0%
    #####: 6944:FUNC(is_cntrl, ISCNTRL)
    $$$$$: 6944-block  0
        -: 6945:
        -: 6946:/* The following list maps the names of the Posix named character classes
        -: 6947:   to predicate functions that determine whether a given character is in
        -: 6948:   the class.  The leading [ has already been eaten by the lexical analyzer. */
        -: 6949:static struct {
        -: 6950:  char *name;
        -: 6951:  int (*pred)();
        -: 6952:} prednames[] = {
        -: 6953:  ":alpha:]", is_alpha,
        -: 6954:  ":upper:]", is_upper,
        -: 6955:  ":lower:]", is_lower,
        -: 6956:  ":digit:]", is_digit,
        -: 6957:  ":xdigit:]", is_xdigit,
        -: 6958:  ":space:]", is_space,
        -: 6959:  ":punct:]", is_punct,
        -: 6960:  ":alnum:]", is_alnum,
        -: 6961:  ":print:]", is_print,
        -: 6962:  ":graph:]", is_graph,
        -: 6963:  ":cntrl:]", is_cntrl,
        -: 6964:  0
        -: 6965:};
        -: 6966:
        -: 6967:static int
function looking_at called 0 returned 0% blocks executed 0%
    #####: 6968:looking_at(s)
        -: 6969:     char *s;
        -: 6970:{
        -: 6971:  int len;
        -: 6972:
    #####: 6973:  len = strlen(s);
    #####: 6974:  if (lexleft < len)
    $$$$$: 6974-block  0
branch  0 never executed
branch  1 never executed
    #####: 6975:    return 0;
    $$$$$: 6975-block  0
    #####: 6976:  return strncmp(s, lexptr, len) == 0;
    $$$$$: 6976-block  0
    #####: 6977:}
    $$$$$: 6977-block  0
        -: 6978:
        -: 6979:static token
function lex called 211 returned 100% blocks executed 49%
      211: 6980:lex()
        -: 6981:{
        -: 6982:  token c, c1, c2;
      211: 6983:  int backslash = 0, invert;
        -: 6984:  charclass ccl;
        -: 6985:  int i;
        -: 6986:
        -: 6987:  /* Basic plan: We fetch a character.  If it's a backslash,
        -: 6988:     we set the backslash flag and go through the loop again.
        -: 6989:     On the plus side, this avoids having a duplicate of the
        -: 6990:     main switch inside the backslash case.  On the minus side,
        -: 6991:     it means that just about every case begins with
        -: 6992:     "if (backslash) ...".  */
      211: 6993:  for (i = 0; i < 2; ++i)
      211: 6993-block  0
      211: 6993-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 6993-block  2
        -: 6994:    {
      211: 6995:      FETCH(c, 0);
      211: 6995-block  0
branch  0 taken 98%
branch  1 taken 2%
        4: 6995-block  1
      207: 6996:      switch (c)
      207: 6996-block  0
branch  0 taken 8%
branch  1 taken 1%
branch  2 taken 0%
branch  3 taken 30%
branch  4 taken 1%
branch  5 taken 1%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 8%
branch  9 taken 0%
branch 10 taken 3%
branch 11 taken 6%
branch 12 taken 4%
branch 13 taken 1%
branch 14 taken 17%
branch 15 taken 0%
branch 16 taken 7%
branch 17 taken 7%
branch 18 taken 1%
branch 19 taken 4%
    $$$$$: 6996-block  1
    $$$$$: 6996-block  2
    $$$$$: 6996-block  3
    $$$$$: 6996-block  4
    $$$$$: 6996-block  5
    $$$$$: 6996-block  6
    $$$$$: 6996-block  7
    $$$$$: 6996-block  8
    $$$$$: 6996-block  9
        -: 6997:	{
        -: 6998:	case '\\':
    #####: 6999:	  if (backslash)
    $$$$$: 6999-block  0
branch  0 never executed
branch  1 never executed
    #####: 7000:	    goto normal_char;
    $$$$$: 7000-block  0
    #####: 7001:	  if (lexleft == 0)
    $$$$$: 7001-block  0
branch  0 never executed
branch  1 never executed
    #####: 7002:	    dfaerror("Unfinished \\ escape");
    $$$$$: 7002-block  0
    #####: 7003:	  backslash = 1;
    #####: 7004:	  break;
    $$$$$: 7004-block  0
        -: 7005:
        -: 7006:	case '^':
        2: 7007:	  if (backslash)
        2: 7007-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7008:	    goto normal_char;
    $$$$$: 7008-block  0
        2: 7009:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
    $$$$$: 7009-block  0
branch  0 never executed
branch  1 never executed
        2: 7010:	      || lasttok == END
        2: 7010-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7011:	      || lasttok == LPAREN
    $$$$$: 7011-block  0
branch  0 never executed
branch  1 never executed
    #####: 7012:	      || lasttok == OR)
    $$$$$: 7012-block  0
branch  0 never executed
branch  1 never executed
        2: 7013:	    return lasttok = BEGLINE;
        2: 7013-block  0
    #####: 7014:	  goto normal_char;
    $$$$$: 7014-block  0
        -: 7015:
        -: 7016:	case '$':
        3: 7017:	  if (backslash)
        3: 7017-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7018:	    goto normal_char;
    $$$$$: 7018-block  0
        4: 7019:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
        1: 7019-block  0
    $$$$$: 7019-block  1
        3: 7020:	      || lexleft == 0
        3: 7020-block  0
branch  0 taken 33%
branch  1 taken 67%
        1: 7021:	      || (syntax_bits & RE_NO_BK_PARENS
        1: 7021-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7021-block  1
branch  2 never executed
branch  3 never executed
    #####: 7022:		  ? lexleft > 0 && *lexptr == ')'
    $$$$$: 7022-block  0
branch  0 never executed
branch  1 never executed
        1: 7023:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
        1: 7023-block  0
branch  0 taken 100%
branch  1 taken 0%
        1: 7023-block  1
branch  2 taken 0%
branch  3 taken 100%
        2: 7024:	      || (syntax_bits & RE_NO_BK_VBAR
        1: 7024-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7024-block  1
    $$$$$: 7024-block  2
        2: 7024-block  3
branch  2 taken 50%
branch  3 taken 50%
    #####: 7025:		  ? lexleft > 0 && *lexptr == '|'
    $$$$$: 7025-block  0
branch  0 never executed
branch  1 never executed
        1: 7026:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
        1: 7026-block  0
branch  0 taken 100%
branch  1 taken 0%
        1: 7026-block  1
branch  2 taken 0%
branch  3 taken 100%
        3: 7027:	      || ((syntax_bits & RE_NEWLINE_ALT)
        1: 7027-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7027-block  1
    $$$$$: 7027-block  2
        2: 7028:	          && lexleft > 0 && *lexptr == '\n'))
        2: 7028-block  0
branch  0 taken 50%
branch  1 taken 50%
        1: 7028-block  1
branch  2 taken 100%
branch  3 taken 0%
        4: 7029:	    return lasttok = ENDLINE;
        4: 7029-block  0
        1: 7030:	  goto normal_char;
        1: 7030-block  0
        -: 7031:
        -: 7032:	case '1':
        -: 7033:	case '2':
        -: 7034:	case '3':
        -: 7035:	case '4':
        -: 7036:	case '5':
        -: 7037:	case '6':
        -: 7038:	case '7':
        -: 7039:	case '8':
        -: 7040:	case '9':
       17: 7041:	  if (backslash && !(syntax_bits & RE_NO_BK_REFS))
       17: 7041-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7041-block  1
branch  2 never executed
branch  3 never executed
        -: 7042:	    {
    #####: 7043:	      laststart = 0;
    #####: 7044:	      return lasttok = BACKREF;
    $$$$$: 7044-block  0
        -: 7045:	    }
       17: 7046:	  goto normal_char;
       17: 7046-block  0
        -: 7047:
        -: 7048:	case '<':
    #####: 7049:	  if (backslash)
    $$$$$: 7049-block  0
branch  0 never executed
branch  1 never executed
    #####: 7050:	    return lasttok = BEGWORD;
    $$$$$: 7050-block  0
    #####: 7051:	  goto normal_char;
    $$$$$: 7051-block  0
        -: 7052:
        -: 7053:	case '>':
    #####: 7054:	  if (backslash)
    $$$$$: 7054-block  0
branch  0 never executed
branch  1 never executed
    #####: 7055:	    return lasttok = ENDWORD;
    $$$$$: 7055-block  0
    #####: 7056:	  goto normal_char;
    $$$$$: 7056-block  0
        -: 7057:
        -: 7058:	case 'b':
       16: 7059:	  if (backslash)
       16: 7059-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7060:	    return lasttok = LIMWORD;
    $$$$$: 7060-block  0
       16: 7061:	  goto normal_char;
       16: 7061-block  0
        -: 7062:
        -: 7063:	case 'B':
    #####: 7064:	  if (backslash)
    $$$$$: 7064-block  0
branch  0 never executed
branch  1 never executed
    #####: 7065:	    return lasttok = NOTLIMWORD;
    $$$$$: 7065-block  0
    #####: 7066:	  goto normal_char;
    $$$$$: 7066-block  0
        -: 7067:
        -: 7068:	case '?':
        6: 7069:	  if (syntax_bits & RE_LIMITED_OPS)
        6: 7069-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7070:	    goto normal_char;
    $$$$$: 7070-block  0
        6: 7071:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
        6: 7071-block  0
branch  0 taken 33%
branch  1 taken 67%
        2: 7072:	    goto normal_char;
        2: 7072-block  0
        4: 7073:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
        4: 7073-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7073-block  1
branch  2 never executed
branch  3 never executed
    #####: 7074:	    goto normal_char;
    $$$$$: 7074-block  0
        4: 7075:	  return lasttok = QMARK;
        4: 7075-block  0
        -: 7076:
        -: 7077:	case '*':
       12: 7078:	  if (backslash)
       12: 7078-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7079:	    goto normal_char;
    $$$$$: 7079-block  0
       12: 7080:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
       12: 7080-block  0
branch  0 taken 33%
branch  1 taken 67%
        4: 7080-block  1
branch  2 taken 100%
branch  3 taken 0%
    #####: 7081:	    goto normal_char;
    $$$$$: 7081-block  0
       12: 7082:	  return lasttok = STAR;
       12: 7082-block  0
        -: 7083:
        -: 7084:	case '+':
        9: 7085:	  if (syntax_bits & RE_LIMITED_OPS)
        9: 7085-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7086:	    goto normal_char;
    $$$$$: 7086-block  0
        9: 7087:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
        9: 7087-block  0
branch  0 taken 33%
branch  1 taken 67%
        3: 7088:	    goto normal_char;
        3: 7088-block  0
        6: 7089:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
        6: 7089-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7089-block  1
branch  2 never executed
branch  3 never executed
    #####: 7090:	    goto normal_char;
    $$$$$: 7090-block  0
        6: 7091:	  return lasttok = PLUS;
        6: 7091-block  0
        -: 7092:
        -: 7093:	case '{':
        3: 7094:	  if (!(syntax_bits & RE_INTERVALS))
        3: 7094-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 7095:	    goto normal_char;
    $$$$$: 7095-block  0
        3: 7096:	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 0))
        3: 7096-block  0
branch  0 taken 33%
branch  1 taken 67%
        1: 7097:	    goto normal_char;
        1: 7097-block  0
        2: 7098:	  minrep = maxrep = 0;
        -: 7099:	  /* Cases:
        -: 7100:	     {M} - exact count
        -: 7101:	     {M,} - minimum count, maximum is infinity
        -: 7102:	     {,M} - 0 through M
        -: 7103:	     {M,N} - M through N */
        2: 7104:	  FETCH(c, "unfinished repeat count");
        2: 7104-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 7104-block  1
        2: 7105:	  if (ISDIGIT(c))
        2: 7105-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 7106:	    {
        2: 7107:	      minrep = c - '0';
        2: 7108:	      for (;;)
        2: 7108-block  0
    $$$$$: 7108-block  1
        -: 7109:		{
        2: 7110:		  FETCH(c, "unfinished repeat count");
        2: 7110-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 7110-block  1
        2: 7111:		  if (!ISDIGIT(c))
        2: 7111-block  0
branch  0 taken 0%
branch  1 taken 100%
        2: 7112:		    break;
        2: 7112-block  0
    #####: 7113:		  minrep = 10 * minrep + c - '0';
        -: 7114:		}
        2: 7115:	    }
        2: 7115-block  0
    #####: 7116:	  else if (c != ',')
    $$$$$: 7116-block  0
branch  0 never executed
branch  1 never executed
    #####: 7117:	    dfaerror("malformed repeat count");
    $$$$$: 7117-block  0
        2: 7118:	  if (c == ',')
        2: 7118-block  0
branch  0 taken 100%
branch  1 taken 0%
        4: 7119:	    for (;;)
        2: 7119-block  0
        2: 7119-block  1
        -: 7120:	      {
        4: 7121:		FETCH(c, "unfinished repeat count");
        4: 7121-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 7121-block  1
        4: 7122:		if (!ISDIGIT(c))
        4: 7122-block  0
branch  0 taken 50%
branch  1 taken 50%
        2: 7123:		  break;
        2: 7123-block  0
        2: 7124:		maxrep = 10 * maxrep + c - '0';
        2: 7125:	      }
        2: 7125-block  0
        -: 7126:	  else
    #####: 7127:	    maxrep = minrep;
    $$$$$: 7127-block  0
        2: 7128:	  if (!(syntax_bits & RE_NO_BK_BRACES))
        2: 7128-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 7129:	    {
    #####: 7130:	      if (c != '\\')
    $$$$$: 7130-block  0
branch  0 never executed
branch  1 never executed
    #####: 7131:		dfaerror("malformed repeat count");
    $$$$$: 7131-block  0
    #####: 7132:	      FETCH(c, "unfinished repeat count");
    $$$$$: 7132-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7132-block  1
    #####: 7133:	    }
    $$$$$: 7133-block  0
        2: 7134:	  if (c != '}')
        2: 7134-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 7135:	    dfaerror("malformed repeat count");
    $$$$$: 7135-block  0
        2: 7136:	  laststart = 0;
        2: 7137:	  return lasttok = REPMN;
        2: 7137-block  0
        -: 7138:
        -: 7139:	case '|':
       36: 7140:	  if (syntax_bits & RE_LIMITED_OPS)
       36: 7140-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7141:	    goto normal_char;
    $$$$$: 7141-block  0
       36: 7142:	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 0))
       36: 7142-block  0
branch  0 taken 33%
branch  1 taken 67%
       12: 7143:	    goto normal_char;
       12: 7143-block  0
       24: 7144:	  laststart = 1;
       24: 7145:	  return lasttok = OR;
       24: 7145-block  0
        -: 7146:
        -: 7147:	case '\n':
    #####: 7148:	  if (syntax_bits & RE_LIMITED_OPS
    $$$$$: 7148-block  0
branch  0 never executed
branch  1 never executed
    #####: 7149:	      || backslash
    $$$$$: 7149-block  0
branch  0 never executed
branch  1 never executed
    #####: 7150:	      || !(syntax_bits & RE_NEWLINE_ALT))
    $$$$$: 7150-block  0
branch  0 never executed
branch  1 never executed
    #####: 7151:	    goto normal_char;
    $$$$$: 7151-block  0
    #####: 7152:	  laststart = 1;
    #####: 7153:	  return lasttok = OR;
    $$$$$: 7153-block  0
        -: 7154:
        -: 7155:	case '(':
       14: 7156:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
       14: 7156-block  0
branch  0 taken 29%
branch  1 taken 71%
        4: 7157:	    goto normal_char;
        4: 7157-block  0
       10: 7158:	  ++parens;
       10: 7159:	  laststart = 1;
       10: 7160:	  return lasttok = LPAREN;
       10: 7160-block  0
        -: 7161:
        -: 7162:	case ')':
       14: 7163:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
       14: 7163-block  0
branch  0 taken 29%
branch  1 taken 71%
        4: 7164:	    goto normal_char;
        4: 7164-block  0
       10: 7165:	  if (parens == 0 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
       10: 7165-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7165-block  1
branch  2 never executed
branch  3 never executed
    #####: 7166:	    goto normal_char;
    $$$$$: 7166-block  0
       10: 7167:	  --parens;
       10: 7168:	  laststart = 0;
       10: 7169:	  return lasttok = RPAREN;
       10: 7169-block  0
        -: 7170:
        -: 7171:	case '.':
        3: 7172:	  if (backslash)
        3: 7172-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7173:	    goto normal_char;
    $$$$$: 7173-block  0
        3: 7174:	  zeroset(ccl);
        3: 7175:	  notset(ccl);
        3: 7176:	  if (!(syntax_bits & RE_DOT_NEWLINE))
        3: 7176-block  0
branch  0 taken 0%
branch  1 taken 100%
        3: 7177:	    clrbit('\n', ccl);
        3: 7177-block  0
        3: 7178:	  if (syntax_bits & RE_DOT_NOT_NULL)
        3: 7178-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 7179:	    clrbit('\0', ccl);
    $$$$$: 7179-block  0
        3: 7180:	  laststart = 0;
        3: 7181:	  return lasttok = CSET + charclass_index(ccl);
        3: 7181-block  0
        -: 7182:
        -: 7183:	case 'w':
        -: 7184:	case 'W':
        1: 7185:	  if (!backslash)
        1: 7185-block  0
branch  0 taken 0%
branch  1 taken 100%
        1: 7186:	    goto normal_char;
        1: 7186-block  0
    #####: 7187:	  zeroset(ccl);
    #####: 7188:	  for (c2 = 0; c2 < NOTCHAR; ++c2)
    $$$$$: 7188-block  0
    $$$$$: 7188-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7188-block  2
    #####: 7189:	    if (ISALNUM(c2))
    $$$$$: 7189-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7189-block  1
    #####: 7190:	      setbit(c2, ccl);
    $$$$$: 7190-block  0
    #####: 7191:	  if (c == 'W')
    $$$$$: 7191-block  0
branch  0 never executed
branch  1 never executed
    #####: 7192:	    notset(ccl);
    $$$$$: 7192-block  0
    #####: 7193:	  laststart = 0;
    #####: 7194:	  return lasttok = CSET + charclass_index(ccl);
    $$$$$: 7194-block  0
        -: 7195:	
        -: 7196:	case '[':
        9: 7197:	  if (backslash)
        9: 7197-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7198:	    goto normal_char;
    $$$$$: 7198-block  0
        9: 7199:	  zeroset(ccl);
        9: 7200:	  FETCH(c, "Unbalanced [");
        9: 7200-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 7200-block  1
        9: 7201:	  if (c == '^')
        9: 7201-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 7202:	    {
    #####: 7203:	      FETCH(c, "Unbalanced [");
    $$$$$: 7203-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7203-block  1
    #####: 7204:	      invert = 1;
    #####: 7205:	    }
    $$$$$: 7205-block  0
        -: 7206:	  else
        9: 7207:	    invert = 0;
        9: 7207-block  0
        9: 7208:	  do
        9: 7208-block  0
        -: 7209:	    {
        -: 7210:	      /* Nobody ever said this had to be fast. :-)
        -: 7211:		 Note that if we're looking at some other [:...:]
        -: 7212:		 construct, we just treat it as a bunch of ordinary
        -: 7213:		 characters.  We can do this because we assume
        -: 7214:		 regex has checked for syntax errors before
        -: 7215:		 dfa is ever called. */
       24: 7216:	      if (c == '[' && (syntax_bits & RE_CHAR_CLASSES))
       24: 7216-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7216-block  1
branch  2 never executed
branch  3 never executed
    #####: 7217:		for (c1 = 0; prednames[c1].name; ++c1)
    $$$$$: 7217-block  0
    $$$$$: 7217-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7217-block  2
    #####: 7218:		  if (looking_at(prednames[c1].name))
    $$$$$: 7218-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7218-block  1
        -: 7219:		    {
    #####: 7220:		      for (c2 = 0; c2 < NOTCHAR; ++c2)
    $$$$$: 7220-block  0
    $$$$$: 7220-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7220-block  2
    #####: 7221:			if ((*prednames[c1].pred)(c2))
    $$$$$: 7221-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7221-block  1
    #####: 7222:			  setbit(c2, ccl);
    $$$$$: 7222-block  0
    #####: 7223:		      lexptr += strlen(prednames[c1].name);
    #####: 7224:		      lexleft -= strlen(prednames[c1].name);
    #####: 7225:		      FETCH(c1, "Unbalanced [");
    $$$$$: 7225-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7225-block  1
    #####: 7226:		      goto skip;
    $$$$$: 7226-block  0
    #####: 7227:		    }
    $$$$$: 7227-block  0
       24: 7228:	      if (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
       24: 7228-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7228-block  1
branch  2 never executed
branch  3 never executed
    #####: 7229:		FETCH(c, "Unbalanced [");
    $$$$$: 7229-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7229-block  1
    $$$$$: 7229-block  2
       24: 7230:	      FETCH(c1, "Unbalanced [");
       24: 7230-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 7230-block  1
       24: 7231:	      if (c1 == '-')
       24: 7231-block  0
branch  0 taken 50%
branch  1 taken 50%
        -: 7232:		{
       12: 7233:		  FETCH(c2, "Unbalanced [");
       12: 7233-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 7233-block  1
       12: 7234:		  if (c2 == ']')
       12: 7234-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 7235:		    {
        -: 7236:		      /* In the case [x-], the - is an ordinary hyphen,
        -: 7237:			 which is left in c1, the lookahead character. */
    #####: 7238:		      --lexptr;
    #####: 7239:		      ++lexleft;
    #####: 7240:		      c2 = c;
    #####: 7241:		    }
    $$$$$: 7241-block  0
        -: 7242:		  else
        -: 7243:		    {
       12: 7244:		      if (c2 == '\\'
    $$$$$: 7244-block  0
branch  0 never executed
branch  1 never executed
       12: 7245:			  && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
       12: 7245-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7246:			FETCH(c2, "Unbalanced [");
    $$$$$: 7246-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7246-block  1
    $$$$$: 7246-block  2
       12: 7247:		      FETCH(c1, "Unbalanced [");
       12: 7247-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 7247-block  1
       12: 7247-block  2
        -: 7248:		    }
       12: 7249:		}
       12: 7249-block  0
        -: 7250:	      else
       12: 7251:		c2 = c;
       12: 7251-block  0
      252: 7252:	      while (c <= c2)
       24: 7252-block  0
      252: 7252-block  1
branch  0 taken 90%
branch  1 taken 10%
      228: 7252-block  2
       24: 7252-block  3
        -: 7253:		{
      228: 7254:		  setbit(c, ccl);
      228: 7255:		  if (case_fold)
      228: 7255-block  0
branch  0 taken 67%
branch  1 taken 33%
      152: 7256:		    if (ISUPPER(c))
       76: 7256-block  0
branch  0 taken 34%
branch  1 taken 66%
       76: 7256-block  1
       26: 7257:		      setbit(tolower(c), ccl);
       26: 7257-block  0
       50: 7258:		    else if (ISLOWER(c))
       50: 7258-block  0
branch  0 taken 42%
branch  1 taken 58%
       29: 7259:		      setbit(toupper(c), ccl);
       29: 7259-block  0
      228: 7260:		  ++c;
        -: 7261:		}
        -: 7262:	    skip:
        -: 7263:	      ;
       24: 7264:	    }
       24: 7264-block  0
       24: 7264-block  1
branch  0 taken 63%
branch  1 taken 38%
       24: 7265:	  while ((c = c1) != ']');
        9: 7266:	  if (invert)
        9: 7266-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 7267:	    {
    #####: 7268:	      notset(ccl);
    #####: 7269:	      if (syntax_bits & RE_HAT_LISTS_NOT_NEWLINE)
    $$$$$: 7269-block  0
branch  0 never executed
branch  1 never executed
    #####: 7270:		clrbit('\n', ccl);
    $$$$$: 7270-block  0
    #####: 7271:	    }
    $$$$$: 7271-block  0
        9: 7272:	  laststart = 0;
       71: 7273:	  return lasttok = CSET + charclass_index(ccl);
        9: 7273-block  0
       62: 7273-block  1
        -: 7274:
        -: 7275:	default:
        -: 7276:	normal_char:
      123: 7277:	  laststart = 0;
      123: 7278:	  if (case_fold && ISALPHA(c))
      123: 7278-block  0
branch  0 taken 24%
branch  1 taken 76%
       29: 7278-block  1
branch  2 taken 31%
branch  3 taken 69%
        -: 7279:	    {
       20: 7280:	      zeroset(ccl);
       20: 7281:	      setbit(c, ccl);
       20: 7282:	      if (isupper(c))
       20: 7282-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7283:		setbit(tolower(c), ccl);
    $$$$$: 7283-block  0
        -: 7284:	      else
       20: 7285:		setbit(toupper(c), ccl);
       20: 7285-block  0
       20: 7286:	      return lasttok = CSET + charclass_index(ccl);
       20: 7286-block  0
        -: 7287:	    }
      103: 7288:	  return c;
      103: 7288-block  0
        -: 7289:	}
    #####: 7290:    }
    $$$$$: 7290-block  0
        -: 7291:
        -: 7292:  /* The above loop should consume at most a backslash
        -: 7293:     and some other character. */
    #####: 7294:  abort();
    $$$$$: 7294-block  0
      213: 7295:}
      213: 7295-block  0
        -: 7296:
        -: 7297:/* Recursive descent parser for regular expressions. */
        -: 7298:
        -: 7299:static token tok;		/* Lookahead token. */
        -: 7300:static depth;			/* Current depth of a hypothetical stack
        -: 7301:				   holding deferred productions.  This is
        -: 7302:				   used to determine the depth that will be
        -: 7303:				   required of the real stack later on in
        -: 7304:				   dfaanalyze(). */
        -: 7305:
        -: 7306:/* Add the given token to the parse tree, maintaining the depth count and
        -: 7307:   updating the maximum depth if necessary. */
        -: 7308:static void
function addtok called 320 returned 100% blocks executed 76%
      320: 7309:addtok(t)
        -: 7310:     token t;
        -: 7311:{
      339: 7312:  REALLOC_IF_NECESSARY(dfa->tokens, token, dfa->talloc, dfa->tindex);
      320: 7312-block  0
branch  0 taken 94%
branch  1 taken 6%
       19: 7312-block  1
       38: 7312-block  2
branch  2 taken 50%
branch  3 taken 50%
       19: 7312-block  3
       19: 7312-block  4
      320: 7313:  dfa->tokens[dfa->tindex++] = t;
        -: 7314:
      320: 7315:  switch (t)
      320: 7315-block  0
branch  0 taken 8%
branch  1 taken 45%
branch  2 taken 0%
branch  3 taken 47%
    $$$$$: 7315-block  1
    $$$$$: 7315-block  2
    $$$$$: 7315-block  3
    $$$$$: 7315-block  4
        -: 7316:    {
        -: 7317:    case QMARK:
        -: 7318:    case STAR:
        -: 7319:    case PLUS:
       26: 7320:      break;
       26: 7320-block  0
        -: 7321:
        -: 7322:    case CAT:
        -: 7323:    case OR:
        -: 7324:    case ORTOP:
      145: 7325:      --depth;
      145: 7326:      break;
      145: 7326-block  0
        -: 7327:
        -: 7328:    default:
      149: 7329:      ++dfa->nleaves;
      149: 7329-block  0
        -: 7330:    case EMPTY:
      149: 7331:      ++depth;
      149: 7332:      break;
      149: 7332-block  0
        -: 7333:    }
      320: 7334:  if (depth > dfa->depth)
      320: 7334-block  0
branch  0 taken 95%
branch  1 taken 5%
       16: 7335:    dfa->depth = depth;
       16: 7335-block  0
      320: 7336:}
      320: 7336-block  0
        -: 7337:
        -: 7338:/* The grammar understood by the parser is as follows.
        -: 7339:
        -: 7340:   regexp:
        -: 7341:     regexp OR branch
        -: 7342:     branch
        -: 7343:
        -: 7344:   branch:
        -: 7345:     branch closure
        -: 7346:     closure
        -: 7347:
        -: 7348:   closure:
        -: 7349:     closure QMARK
        -: 7350:     closure STAR
        -: 7351:     closure PLUS
        -: 7352:     atom
        -: 7353:
        -: 7354:   atom:
        -: 7355:     <normal character>
        -: 7356:     CSET
        -: 7357:     BACKREF
        -: 7358:     BEGLINE
        -: 7359:     ENDLINE
        -: 7360:     BEGWORD
        -: 7361:     ENDWORD
        -: 7362:     LIMWORD
        -: 7363:     NOTLIMWORD
        -: 7364:     <empty>
        -: 7365:
        -: 7366:   The parser builds a parse tree in postfix form in an array of tokens. */
        -: 7367:
        -: 7368:#if __STDC__
        -: 7369:static void regexp(int);
        -: 7370:#else
        -: 7371:static void regexp();
        -: 7372:#endif
        -: 7373:
        -: 7374:static void
function atom called 183 returned 82% blocks executed 84%
      183: 7375:atom()
        -: 7376:{
      193: 7377:  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
      183: 7377-block  0
branch  0 taken 83%
branch  1 taken 17%
      151: 7377-block  1
    $$$$$: 7377-block  2
       32: 7377-block  3
branch  2 taken 50%
branch  3 taken 50%
       10: 7377-block  4
branch  4 taken 0%
branch  5 taken 100%
       16: 7378:      || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD
       16: 7378-block  0
branch  0 taken 100%
branch  1 taken 0%
       16: 7378-block  1
branch  2 taken 88%
branch  3 taken 13%
       14: 7378-block  2
branch  4 taken 71%
branch  5 taken 29%
       10: 7379:      || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD)
       10: 7379-block  0
branch  0 taken 100%
branch  1 taken 0%
       10: 7379-block  1
branch  2 taken 100%
branch  3 taken 0%
       10: 7379-block  2
branch  4 taken 100%
branch  5 taken 0%
        -: 7380:    {
      173: 7381:      addtok(tok);
      173: 7382:      tok = lex();
      173: 7383:    }
      141: 7383-block  0
       10: 7384:  else if (tok == LPAREN)
       10: 7384-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 7385:    {
       10: 7386:      tok = lex();
       10: 7387:      regexp(0);
       10: 7388:      if (tok != RPAREN)
       10: 7388-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 7389:	dfaerror("Unbalanced (");
    $$$$$: 7389-block  0
       10: 7390:      tok = lex();
       10: 7391:    }
       10: 7391-block  0
        -: 7392:  else
    #####: 7393:    addtok(EMPTY);
    $$$$$: 7393-block  0
      151: 7394:}
      151: 7394-block  0
        -: 7395:
        -: 7396:/* Return the number of tokens in the given subexpression. */
        -: 7397:static int
function nsubtoks called 2 returned 100% blocks executed 33%
        2: 7398:nsubtoks(tindex)
        -: 7399:{
        -: 7400:  int ntoks1;
        -: 7401:
        2: 7402:  switch (dfa->tokens[tindex - 1])
        2: 7402-block  0
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
    $$$$$: 7402-block  1
    $$$$$: 7402-block  2
    $$$$$: 7402-block  3
    $$$$$: 7402-block  4
        -: 7403:    {
        -: 7404:    default:
        2: 7405:      return 1;
        2: 7405-block  0
        -: 7406:    case QMARK:
        -: 7407:    case STAR:
        -: 7408:    case PLUS:
    #####: 7409:      return 1 + nsubtoks(tindex - 1);
    $$$$$: 7409-block  0
        -: 7410:    case CAT:
        -: 7411:    case OR:
        -: 7412:    case ORTOP:
    #####: 7413:      ntoks1 = nsubtoks(tindex - 1);
    #####: 7414:      return 1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
    $$$$$: 7414-block  0
        -: 7415:    }
        2: 7416:}
        2: 7416-block  0
        -: 7417:
        -: 7418:/* Copy the given subexpression to the top of the tree. */
        -: 7419:static void
function copytoks called 4 returned 100% blocks executed 100%
        4: 7420:copytoks(tindex, ntokens)
        -: 7421:     int tindex, ntokens;
        -: 7422:{
        -: 7423:  int i;
        -: 7424:
        8: 7425:  for (i = 0; i < ntokens; ++i)
        4: 7425-block  0
        8: 7425-block  1
branch  0 taken 50%
branch  1 taken 50%
        4: 7425-block  2
        4: 7426:    addtok(dfa->tokens[tindex + i]);
        4: 7426-block  0
        4: 7427:}
        4: 7427-block  0
        -: 7428:
        -: 7429:static void
function closure called 151 returned 100% blocks executed 82%
      151: 7430:closure()
        -: 7431:{
        -: 7432:  int tindex, ntokens, i;
        -: 7433:
      151: 7434:  atom();
      175: 7435:  while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)
      151: 7435-block  0
      175: 7435-block  1
branch  0 taken 98%
branch  1 taken 2%
      171: 7435-block  2
branch  2 taken 93%
branch  3 taken 7%
      159: 7435-block  3
branch  4 taken 4%
branch  5 taken 96%
      153: 7435-block  4
      175: 7435-block  5
branch  6 taken 14%
branch  7 taken 86%
       24: 7435-block  6
       24: 7436:    if (tok == REPMN)
       24: 7436-block  0
branch  0 taken 8%
branch  1 taken 92%
        -: 7437:      {
        2: 7438:	ntokens = nsubtoks(dfa->tindex);
        2: 7439:	tindex = dfa->tindex - ntokens;
        2: 7440:	if (maxrep == 0)
        2: 7440-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 7441:	  addtok(PLUS);
    $$$$$: 7441-block  0
        2: 7442:	if (minrep == 0)
        2: 7442-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 7443:	  addtok(QMARK);
    $$$$$: 7443-block  0
        2: 7444:	for (i = 1; i < minrep; ++i)
        2: 7444-block  0
        2: 7444-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7444-block  2
        -: 7445:	  {
    #####: 7446:	    copytoks(tindex, ntokens);
    #####: 7447:	    addtok(CAT);
    #####: 7448:	  }
    $$$$$: 7448-block  0
        6: 7449:	for (; i < maxrep; ++i)
        2: 7449-block  0
        6: 7449-block  1
branch  0 taken 67%
branch  1 taken 33%
        4: 7449-block  2
        -: 7450:	  {
        4: 7451:	    copytoks(tindex, ntokens);
        4: 7452:	    addtok(QMARK);
        4: 7453:	    addtok(CAT);
        4: 7454:	  }
        4: 7454-block  0
        2: 7455:	tok = lex();
        2: 7456:      }
        2: 7456-block  0
        -: 7457:    else
        -: 7458:      {
       22: 7459:	addtok(tok);
       22: 7460:	tok = lex();
       22: 7460-block  0
        -: 7461:      }
      151: 7462:}
      151: 7462-block  0
        -: 7463:
        -: 7464:static void
function branch called 38 returned 100% blocks executed 100%
       38: 7465:branch()
        -: 7466:{
       38: 7467:  closure();
      151: 7468:  while (tok != RPAREN && tok != OR && tok >= 0)
       38: 7468-block  0
      151: 7468-block  1
branch  0 taken 93%
branch  1 taken 7%
      141: 7468-block  2
branch  2 taken 17%
branch  3 taken 83%
      117: 7468-block  3
      151: 7468-block  4
branch  4 taken 75%
branch  5 taken 25%
      113: 7468-block  5
        -: 7469:    {
      113: 7470:      closure();
      113: 7471:      addtok(CAT);
        -: 7472:    }
       38: 7473:}
       38: 7473-block  0
        -: 7474:
        -: 7475:static void
function regexp called 14 returned 100% blocks executed 85%
       14: 7476:regexp(toplevel)
        -: 7477:     int toplevel;
        -: 7478:{
       14: 7479:  branch();
       38: 7480:  while (tok == OR)
       14: 7480-block  0
       38: 7480-block  1
branch  0 taken 63%
branch  1 taken 37%
       24: 7480-block  2
        -: 7481:    {
       24: 7482:      tok = lex();
       24: 7483:      branch();
       24: 7484:      if (toplevel)
       24: 7484-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7485:	addtok(ORTOP);
    $$$$$: 7485-block  0
        -: 7486:      else
       24: 7487:	addtok(OR);
       24: 7487-block  0
        -: 7488:    }
       14: 7489:}
       14: 7489-block  0
        -: 7490:
        -: 7491:/* Main entry point for the parser.  S is a string to be parsed, len is the
        -: 7492:   length of the string, so s can include NUL characters.  D is a pointer to
        -: 7493:   the struct dfa to parse into. */
        -: 7494:void
function dfaparse called 4 returned 100% blocks executed 57%
        4: 7495:dfaparse(s, len, d)
        -: 7496:     char *s;
        -: 7497:     size_t len;
        -: 7498:     struct dfa *d;
        -: 7499:
        -: 7500:{
        4: 7501:  dfa = d;
        4: 7502:  lexstart = lexptr = s;
        4: 7503:  lexleft = len;
        4: 7504:  lasttok = END;
        4: 7505:  laststart = 1;
        4: 7506:  parens = 0;
        -: 7507:
        4: 7508:  if (! syntax_bits_set)
        4: 7508-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 7509:    dfaerror("No syntax specified");
    $$$$$: 7509-block  0
        -: 7510:
        4: 7511:  tok = lex();
        4: 7512:  depth = d->depth;
        -: 7513:
        4: 7514:  regexp(1);
        -: 7515:
        4: 7516:  if (tok != END)
        4: 7516-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 7517:    dfaerror("Unbalanced )");
    $$$$$: 7517-block  0
        -: 7518:
        4: 7519:  addtok(END - d->nregexps);
        4: 7520:  addtok(CAT);
        -: 7521:
        4: 7522:  if (d->nregexps)
        4: 7522-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 7523:    addtok(ORTOP);
    $$$$$: 7523-block  0
        -: 7524:
        4: 7525:  ++d->nregexps;
        4: 7526:}
        4: 7526-block  0
        -: 7527:
        -: 7528:/* Some primitives for operating on sets of positions. */
        -: 7529:
        -: 7530:/* Copy one set to another; the destination must be large enough. */
        -: 7531:static void
function copy called 377 returned 100% blocks executed 100%
      377: 7532:copy(src, dst)
        -: 7533:     position_set *src;
        -: 7534:     position_set *dst;
        -: 7535:{
        -: 7536:  int i;
        -: 7537:
     1248: 7538:  for (i = 0; i < src->nelem; ++i)
      377: 7538-block  0
     1248: 7538-block  1
branch  0 taken 70%
branch  1 taken 30%
      871: 7538-block  2
      871: 7539:    dst->elems[i] = src->elems[i];
      871: 7539-block  0
      377: 7540:  dst->nelem = src->nelem;
      377: 7541:}
      377: 7541-block  0
        -: 7542:
        -: 7543:/* Insert a position in a set.  Position sets are maintained in sorted
        -: 7544:   order according to index.  If position already exists in the set with
        -: 7545:   the same index then their constraints are logically or'd together.
        -: 7546:   S->elems must point to an array large enough to hold the resulting set. */
        -: 7547:static void
function insert called 427 returned 100% blocks executed 100%
      427: 7548:insert(p, s)
        -: 7549:     position p;
        -: 7550:     position_set *s;
        -: 7551:{
        -: 7552:  int i;
        -: 7553:  position t1, t2;
        -: 7554:
     3063: 7555:  for (i = 0; i < s->nelem && p.index < s->elems[i].index; ++i)
      427: 7555-block  0
     3063: 7555-block  1
branch  0 taken 9%
branch  1 taken 91%
     2784: 7555-block  2
     3063: 7555-block  3
branch  2 taken 86%
branch  3 taken 14%
     2636: 7555-block  4
     2636: 7555-block  5
        -: 7556:    ;
      427: 7557:  if (i < s->nelem && p.index == s->elems[i].index)
      427: 7557-block  0
branch  0 taken 35%
branch  1 taken 65%
      148: 7557-block  1
branch  2 taken 25%
branch  3 taken 75%
       37: 7558:    s->elems[i].constraint |= p.constraint;
       37: 7558-block  0
        -: 7559:  else
        -: 7560:    {
      390: 7561:      t1 = p;
      390: 7562:      ++s->nelem;
     1040: 7563:      while (i < s->nelem)
      390: 7563-block  0
     1040: 7563-block  1
branch  0 taken 38%
branch  1 taken 63%
      650: 7563-block  2
        -: 7564:	{
      650: 7565:	  t2 = s->elems[i];
      650: 7566:	  s->elems[i++] = t1;
      650: 7567:	  t1 = t2;
        -: 7568:	}
        -: 7569:    }
      427: 7570:}
      427: 7570-block  0
        -: 7571:
        -: 7572:/* Merge two sets of positions into a third.  The result is exactly as if
        -: 7573:   the positions of both sets were inserted into an initially empty set. */
        -: 7574:static void
function merge called 131 returned 100% blocks executed 77%
      131: 7575:merge(s1, s2, m)
        -: 7576:     position_set *s1;
        -: 7577:     position_set *s2;
        -: 7578:     position_set *m;
        -: 7579:{
      131: 7580:  int i = 0, j = 0;
        -: 7581:
      131: 7582:  m->nelem = 0;
      155: 7583:  while (i < s1->nelem && j < s2->nelem)
      131: 7583-block  0
      155: 7583-block  1
branch  0 taken 15%
branch  1 taken 85%
      131: 7583-block  2
      155: 7583-block  3
branch  2 taken 15%
branch  3 taken 85%
       24: 7583-block  4
       24: 7584:    if (s1->elems[i].index > s2->elems[j].index)
       24: 7584-block  0
branch  0 taken 100%
branch  1 taken 0%
       24: 7585:      m->elems[m->nelem++] = s1->elems[i++];
       24: 7585-block  0
    #####: 7586:    else if (s1->elems[i].index < s2->elems[j].index)
    $$$$$: 7586-block  0
branch  0 never executed
branch  1 never executed
    #####: 7587:      m->elems[m->nelem++] = s2->elems[j++];
    $$$$$: 7587-block  0
        -: 7588:    else
        -: 7589:      {
    #####: 7590:	m->elems[m->nelem] = s1->elems[i++];
    #####: 7591:	m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
    $$$$$: 7591-block  0
        -: 7592:      }
      253: 7593:  while (i < s1->nelem)
      131: 7593-block  0
      253: 7593-block  1
branch  0 taken 48%
branch  1 taken 52%
      122: 7593-block  2
      122: 7594:    m->elems[m->nelem++] = s1->elems[i++];
      170: 7595:  while (j < s2->nelem)
      131: 7595-block  0
      170: 7595-block  1
branch  0 taken 23%
branch  1 taken 77%
       39: 7595-block  2
       39: 7596:    m->elems[m->nelem++] = s2->elems[j++];
      131: 7597:}
      131: 7597-block  0
        -: 7598:
        -: 7599:/* Delete a position from a set. */
        -: 7600:static void
function delete called 15 returned 100% blocks executed 84%
       15: 7601:delete(p, s)
        -: 7602:     position p;
        -: 7603:     position_set *s;
        -: 7604:{
        -: 7605:  int i;
        -: 7606:
       15: 7607:  for (i = 0; i < s->nelem; ++i)
       15: 7607-block  0
       15: 7607-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7607-block  2
       15: 7608:    if (p.index == s->elems[i].index)
       15: 7608-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 7608-block  1
       15: 7609:      break;
       15: 7609-block  0
       15: 7610:  if (i < s->nelem)
       15: 7610-block  0
branch  0 taken 0%
branch  1 taken 100%
       32: 7611:    for (--s->nelem; i < s->nelem; ++i)
       15: 7611-block  0
       32: 7611-block  1
branch  0 taken 53%
branch  1 taken 47%
       17: 7611-block  2
       32: 7612:      s->elems[i] = s->elems[i + 1];
       17: 7612-block  0
       15: 7612-block  1
       15: 7613:}
       15: 7613-block  0
        -: 7614:
        -: 7615:/* Find the index of the state corresponding to the given position set with
        -: 7616:   the given preceding context, or create a new state if there is no such
        -: 7617:   state.  Newline and letter tell whether we got here on a newline or
        -: 7618:   letter, respectively. */
        -: 7619:static int
function state_index called 50 returned 100% blocks executed 86%
       50: 7620:state_index(d, s, newline, letter)
        -: 7621:     struct dfa *d;
        -: 7622:     position_set *s;
        -: 7623:     int newline;
        -: 7624:     int letter;
        -: 7625:{
       50: 7626:  int hash = 0;
        -: 7627:  int constraint;
        -: 7628:  int i, j;
        -: 7629:
       50: 7630:  newline = newline ? 1 : 0;
       50: 7631:  letter = letter ? 1 : 0;
        -: 7632:
      761: 7633:  for (i = 0; i < s->nelem; ++i)
       50: 7633-block  0
      761: 7633-block  1
branch  0 taken 93%
branch  1 taken 7%
      711: 7633-block  2
      711: 7634:    hash ^= s->elems[i].index + s->elems[i].constraint;
      711: 7634-block  0
        -: 7635:
        -: 7636:  /* Try to find a state that exactly matches the proposed one. */
      269: 7637:  for (i = 0; i < d->sindex; ++i)
       50: 7637-block  0
      269: 7637-block  1
branch  0 taken 93%
branch  1 taken 7%
      219: 7637-block  2
        -: 7638:    {
      286: 7639:      if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem
      251: 7639-block  0
branch  0 taken 19%
branch  1 taken 81%
       35: 7639-block  1
branch  2 taken 0%
branch  3 taken 100%
       47: 7640:	  || newline != d->states[i].newline || letter != d->states[i].letter)
       47: 7640-block  0
branch  0 taken 100%
branch  1 taken 0%
       47: 7640-block  1
branch  2 taken 74%
branch  3 taken 26%
      216: 7641:	continue;
      216: 7641-block  0
      502: 7642:      for (j = 0; j < s->nelem; ++j)
       35: 7642-block  0
      502: 7642-block  1
branch  0 taken 6%
branch  1 taken 94%
      467: 7642-block  2
      470: 7643:	if (s->elems[j].constraint
      467: 7643-block  0
branch  0 taken 0%
branch  1 taken 100%
      470: 7644:	    != d->states[i].elems.elems[j].constraint
      470: 7645:	    || s->elems[j].index != d->states[i].elems.elems[j].index)
      470: 7645-block  0
branch  0 taken 99%
branch  1 taken 1%
      467: 7645-block  1
        3: 7646:	  break;
        3: 7646-block  0
       35: 7647:      if (j == s->nelem)
       35: 7647-block  0
branch  0 taken 91%
branch  1 taken 9%
       32: 7648:	return i;
       32: 7648-block  0
        3: 7649:    }
        3: 7649-block  0
        -: 7650:
        -: 7651:  /* We'll have to create a new state. */
       22: 7652:  REALLOC_IF_NECESSARY(d->states, dfa_state, d->salloc, d->sindex);
       18: 7652-block  0
branch  0 taken 78%
branch  1 taken 22%
        4: 7652-block  1
        8: 7652-block  2
branch  2 taken 50%
branch  3 taken 50%
        4: 7652-block  3
        4: 7652-block  4
       18: 7653:  d->states[i].hash = hash;
       18: 7654:  MALLOC(d->states[i].elems.elems, position, s->nelem);
       18: 7655:  copy(s, &d->states[i].elems);
       18: 7656:  d->states[i].newline = newline;
       18: 7657:  d->states[i].letter = letter;
       18: 7658:  d->states[i].backref = 0;
       18: 7659:  d->states[i].constraint = 0;
       18: 7660:  d->states[i].first_end = 0;
      274: 7661:  for (j = 0; j < s->nelem; ++j)
       18: 7661-block  0
      274: 7661-block  1
branch  0 taken 7%
branch  1 taken 93%
      256: 7661-block  2
      512: 7662:    if (d->tokens[s->elems[j].index] < 0)
      256: 7662-block  0
branch  0 taken 94%
branch  1 taken 6%
      256: 7662-block  1
        -: 7663:      {
       16: 7664:	constraint = s->elems[j].constraint;
       16: 7665:	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 0)
       16: 7665-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 7665-block  1
    $$$$$: 7665-block  2
       16: 7666:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
    $$$$$: 7666-block  0
branch  0 never executed
branch  1 never executed
       16: 7666-block  1
branch  2 taken 0%
branch  3 taken 100%
       16: 7667:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
    $$$$$: 7667-block  0
    $$$$$: 7667-block  1
       16: 7667-block  2
branch  0 taken 56%
branch  1 taken 44%
       16: 7668:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1))
        9: 7668-block  0
    $$$$$: 7668-block  1
        7: 7668-block  2
branch  0 taken 0%
branch  1 taken 100%
        9: 7669:	  d->states[i].constraint |= constraint;
        9: 7669-block  0
       16: 7670:	if (! d->states[i].first_end)
       16: 7670-block  0
branch  0 taken 0%
branch  1 taken 100%
       16: 7671:	  d->states[i].first_end = d->tokens[s->elems[j].index];
       16: 7671-block  0
       16: 7672:      }
       16: 7672-block  0
      240: 7673:    else if (d->tokens[s->elems[j].index] == BACKREF)
      240: 7673-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 7674:      {
    #####: 7675:	d->states[i].constraint = NO_CONSTRAINT;
    #####: 7676:	d->states[i].backref = 1;
    #####: 7677:      }
    $$$$$: 7677-block  0
        -: 7678:
       18: 7679:  ++d->sindex;
        -: 7680:
       18: 7681:  return i;
       18: 7681-block  0
       50: 7682:}
       50: 7682-block  0
        -: 7683:
        -: 7684:/* Find the epsilon closure of a set of positions.  If any position of the set
        -: 7685:   contains a symbol that matches the empty string in some context, replace
        -: 7686:   that position with the elements of its follow labeled with an appropriate
        -: 7687:   constraint.  Repeat exhaustively until no funny positions are left.
        -: 7688:   S->elems must be large enough to hold the result. */
        -: 7689:void
function epsclosure called 110 returned 100% blocks executed 77%
      110: 7690:epsclosure(s, d)
        -: 7691:     position_set *s;
        -: 7692:     struct dfa *d;
        -: 7693:{
        -: 7694:  int i, j;
        -: 7695:  int *visited;
        -: 7696:  position p, old;
        -: 7697:
      110: 7698:  MALLOC(visited, int, d->tindex);
    12221: 7699:  for (i = 0; i < d->tindex; ++i)
      110: 7699-block  0
    12221: 7699-block  1
branch  0 taken 99%
branch  1 taken 1%
    12111: 7699-block  2
    12111: 7700:    visited[i] = 0;
    12111: 7700-block  0
        -: 7701:
      271: 7702:  for (i = 0; i < s->nelem; ++i)
      110: 7702-block  0
      271: 7702-block  1
branch  0 taken 59%
branch  1 taken 41%
      161: 7702-block  2
      216: 7703:    if (d->tokens[s->elems[i].index] >= NOTCHAR
       55: 7703-block  0
branch  0 taken 73%
branch  1 taken 27%
      161: 7704:	&& d->tokens[s->elems[i].index] != BACKREF
      161: 7704-block  0
branch  0 taken 34%
branch  1 taken 66%
      176: 7705:	&& d->tokens[s->elems[i].index] < CSET)
       55: 7705-block  0
branch  0 taken 100%
branch  1 taken 0%
      161: 7705-block  1
        -: 7706:      {
       15: 7707:	old = s->elems[i];
       15: 7708:	p.constraint = old.constraint;
       15: 7709:	delete(s->elems[i], s);
       15: 7710:	if (visited[old.index])
       15: 7710-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 7711:	  {
    #####: 7712:	    --i;
    #####: 7713:	    continue;
    $$$$$: 7713-block  0
        -: 7714:	  }
       15: 7715:	visited[old.index] = 1;
       15: 7716:	switch (d->tokens[old.index])
       15: 7716-block  0
branch  0 taken 7%
branch  1 taken 93%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
        -: 7717:	  {
        -: 7718:	  case BEGLINE:
        1: 7719:	    p.constraint &= BEGLINE_CONSTRAINT;
        1: 7720:	    break;
        1: 7720-block  0
        -: 7721:	  case ENDLINE:
       14: 7722:	    p.constraint &= ENDLINE_CONSTRAINT;
       14: 7723:	    break;
       14: 7723-block  0
        -: 7724:	  case BEGWORD:
    #####: 7725:	    p.constraint &= BEGWORD_CONSTRAINT;
    #####: 7726:	    break;
    $$$$$: 7726-block  0
        -: 7727:	  case ENDWORD:
    #####: 7728:	    p.constraint &= ENDWORD_CONSTRAINT;
    #####: 7729:	    break;
    $$$$$: 7729-block  0
        -: 7730:	  case LIMWORD:
    #####: 7731:	    p.constraint &= LIMWORD_CONSTRAINT;
    #####: 7732:	    break;
    $$$$$: 7732-block  0
        -: 7733:	  case NOTLIMWORD:
    #####: 7734:	    p.constraint &= NOTLIMWORD_CONSTRAINT;
    #####: 7735:	    break;
    $$$$$: 7735-block  0
        -: 7736:	  default:
    #####: 7737:	    break;
    $$$$$: 7737-block  0
        -: 7738:	  }
       43: 7739:	for (j = 0; j < d->follows[old.index].nelem; ++j)
       15: 7739-block  0
       43: 7739-block  1
branch  0 taken 65%
branch  1 taken 35%
       28: 7739-block  2
        -: 7740:	  {
       28: 7741:	    p.index = d->follows[old.index].elems[j].index;
       28: 7742:	    insert(p, s);
       28: 7743:	  }
       28: 7743-block  0
        -: 7744:	/* Force rescan to start at the beginning. */
       15: 7745:	i = -1;
       15: 7746:      }
       15: 7746-block  0
        -: 7747:
      110: 7748:  free(visited);
      110: 7749:}
      110: 7749-block  0
        -: 7750:
        -: 7751:/* Perform bottom-up analysis on the parse tree, computing various functions.
        -: 7752:   Note that at this point, we're pretending constructs like \< are real
        -: 7753:   characters rather than constraints on what can follow them.
        -: 7754:
        -: 7755:   Nullable:  A node is nullable if it is at the root of a regexp that can
        -: 7756:   match the empty string.
        -: 7757:   *  EMPTY leaves are nullable.
        -: 7758:   * No other leaf is nullable.
        -: 7759:   * A QMARK or STAR node is nullable.
        -: 7760:   * A PLUS node is nullable if its argument is nullable.
        -: 7761:   * A CAT node is nullable if both its arguments are nullable.
        -: 7762:   * An OR node is nullable if either argument is nullable.
        -: 7763:
        -: 7764:   Firstpos:  The firstpos of a node is the set of positions (nonempty leaves)
        -: 7765:   that could correspond to the first character of a string matching the
        -: 7766:   regexp rooted at the given node.
        -: 7767:   * EMPTY leaves have empty firstpos.
        -: 7768:   * The firstpos of a nonempty leaf is that leaf itself.
        -: 7769:   * The firstpos of a QMARK, STAR, or PLUS node is the firstpos of its
        -: 7770:     argument.
        -: 7771:   * The firstpos of a CAT node is the firstpos of the left argument, union
        -: 7772:     the firstpos of the right if the left argument is nullable.
        -: 7773:   * The firstpos of an OR node is the union of firstpos of each argument.
        -: 7774:
        -: 7775:   Lastpos:  The lastpos of a node is the set of positions that could
        -: 7776:   correspond to the last character of a string matching the regexp at
        -: 7777:   the given node.
        -: 7778:   * EMPTY leaves have empty lastpos.
        -: 7779:   * The lastpos of a nonempty leaf is that leaf itself.
        -: 7780:   * The lastpos of a QMARK, STAR, or PLUS node is the lastpos of its
        -: 7781:     argument.
        -: 7782:   * The lastpos of a CAT node is the lastpos of its right argument, union
        -: 7783:     the lastpos of the left if the right argument is nullable.
        -: 7784:   * The lastpos of an OR node is the union of the lastpos of each argument.
        -: 7785:
        -: 7786:   Follow:  The follow of a position is the set of positions that could
        -: 7787:   correspond to the character following a character matching the node in
        -: 7788:   a string matching the regexp.  At this point we consider special symbols
        -: 7789:   that match the empty string in some context to be just normal characters.
        -: 7790:   Later, if we find that a special symbol is in a follow set, we will
        -: 7791:   replace it with the elements of its follow, labeled with an appropriate
        -: 7792:   constraint.
        -: 7793:   * Every node in the firstpos of the argument of a STAR or PLUS node is in
        -: 7794:     the follow of every node in the lastpos.
        -: 7795:   * Every node in the firstpos of the second argument of a CAT node is in
        -: 7796:     the follow of every node in the lastpos of the first argument.
        -: 7797:
        -: 7798:   Because of the postfix representation of the parse tree, the depth-first
        -: 7799:   analysis is conveniently done by a linear scan with the aid of a stack.
        -: 7800:   Sets are stored as arrays of the elements, obeying a stack-like allocation
        -: 7801:   scheme; the number of elements in each set deeper in the stack can be
        -: 7802:   used to determine the address of a particular set's array. */
        -: 7803:void
function dfaanalyze called 3 returned 100% blocks executed 94%
        3: 7804:dfaanalyze(d, searchflag)
        -: 7805:     struct dfa *d;
        -: 7806:     int searchflag;
        -: 7807:{
        -: 7808:  int *nullable;		/* Nullable stack. */
        -: 7809:  int *nfirstpos;		/* Element count stack for firstpos sets. */
        -: 7810:  position *firstpos;		/* Array where firstpos elements are stored. */
        -: 7811:  int *nlastpos;		/* Element count stack for lastpos sets. */
        -: 7812:  position *lastpos;		/* Array where lastpos elements are stored. */
        -: 7813:  int *nalloc;			/* Sizes of arrays allocated to follow sets. */
        -: 7814:  position_set tmp;		/* Temporary set for merging sets. */
        -: 7815:  position_set merged;		/* Result of merging sets. */
        -: 7816:  int wants_newline;		/* True if some position wants newline info. */
        -: 7817:  int *o_nullable;
        -: 7818:  int *o_nfirst, *o_nlast;
        -: 7819:  position *o_firstpos, *o_lastpos;
        -: 7820:  int i, j;
        -: 7821:  position *pos;
        -: 7822:
        -: 7823:#ifdef DEBUG
        -: 7824:  fprintf(stderr, "dfaanalyze:\n");
        -: 7825:  for (i = 0; i < d->tindex; ++i)
        -: 7826:    {
        -: 7827:      fprintf(stderr, " %d:", i);
        -: 7828:      prtok(d->tokens[i]);
        -: 7829:    }
        -: 7830:  putc('\n', stderr);
        -: 7831:#endif
        -: 7832:
        3: 7833:  d->searchflag = searchflag;
        -: 7834:
        3: 7835:  MALLOC(nullable, int, d->depth);
        3: 7836:  o_nullable = nullable;
        3: 7837:  MALLOC(nfirstpos, int, d->depth);
        3: 7838:  o_nfirst = nfirstpos;
        3: 7839:  MALLOC(firstpos, position, d->nleaves);
        3: 7840:  o_firstpos = firstpos, firstpos += d->nleaves;
        3: 7841:  MALLOC(nlastpos, int, d->depth);
        3: 7842:  o_nlast = nlastpos;
        3: 7843:  MALLOC(lastpos, position, d->nleaves);
        3: 7844:  o_lastpos = lastpos, lastpos += d->nleaves;
        3: 7845:  MALLOC(nalloc, int, d->tindex);
      235: 7846:  for (i = 0; i < d->tindex; ++i)
        3: 7846-block  0
      235: 7846-block  1
branch  0 taken 99%
branch  1 taken 1%
      232: 7846-block  2
      232: 7847:    nalloc[i] = 0;
      232: 7847-block  0
        3: 7848:  MALLOC(merged.elems, position, d->nleaves);
        -: 7849:
        3: 7850:  CALLOC(d->follows, position_set, d->tindex);
        -: 7851:
      235: 7852:  for (i = 0; i < d->tindex; ++i)
        3: 7852-block  0
      235: 7852-block  1
branch  0 taken 99%
branch  1 taken 1%
      232: 7852-block  2
        -: 7853:#ifdef DEBUG
        -: 7854:    {				/* Nonsyntactic #ifdef goo... */
        -: 7855:#endif
      232: 7856:    switch (d->tokens[i])
      232: 7856-block  0
branch  0 taken 5%
branch  1 taken 5%
branch  2 taken 2%
branch  3 taken 47%
branch  4 taken 0%
branch  5 taken 41%
    $$$$$: 7856-block  1
    $$$$$: 7856-block  2
        -: 7857:      {
        -: 7858:      case EMPTY:
        -: 7859:	/* The empty set is nullable. */
    #####: 7860:	*nullable++ = 1;
        -: 7861:
        -: 7862:	/* The firstpos and lastpos of the empty leaf are both empty. */
    #####: 7863:	*nfirstpos++ = *nlastpos++ = 0;
    #####: 7864:	break;
    $$$$$: 7864-block  0
        -: 7865:
        -: 7866:      case STAR:
        -: 7867:      case PLUS:
        -: 7868:	/* Every element in the firstpos of the argument is in the follow
        -: 7869:	   of every element in the lastpos. */
       11: 7870:	tmp.nelem = nfirstpos[-1];
       11: 7871:	tmp.elems = firstpos;
       11: 7872:	pos = lastpos;
       23: 7873:	for (j = 0; j < nlastpos[-1]; ++j)
       11: 7873-block  0
       23: 7873-block  1
branch  0 taken 52%
branch  1 taken 48%
       12: 7873-block  2
        -: 7874:	  {
       12: 7875:	    merge(&tmp, &d->follows[pos[j].index], &merged);
       14: 7876:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
       12: 7876-block  0
branch  0 taken 83%
branch  1 taken 17%
        2: 7876-block  1
        4: 7876-block  2
branch  2 taken 50%
branch  3 taken 50%
        2: 7876-block  3
        2: 7876-block  4
        -: 7877:				 nalloc[pos[j].index], merged.nelem - 1);
       12: 7878:	    copy(&merged, &d->follows[pos[j].index]);
       23: 7879:	  }
       12: 7879-block  0
       11: 7879-block  1
        -: 7880:
        -: 7881:      case QMARK:
        -: 7882:	/* A QMARK or STAR node is automatically nullable. */
       15: 7883:	if (d->tokens[i] != PLUS)
       15: 7883-block  0
branch  0 taken 20%
branch  1 taken 80%
       12: 7884:	  nullable[-1] = 1;
       12: 7884-block  0
       15: 7885:	break;
       15: 7885-block  0
        -: 7886:
        -: 7887:      case CAT:
        -: 7888:	/* Every element in the firstpos of the second argument is in the
        -: 7889:	   follow of every element in the lastpos of the first argument. */
       95: 7890:	tmp.nelem = nfirstpos[-1];
       95: 7891:	tmp.elems = firstpos;
       95: 7892:	pos = lastpos + nlastpos[-1];
      214: 7893:	for (j = 0; j < nlastpos[-2]; ++j)
       95: 7893-block  0
      214: 7893-block  1
branch  0 taken 56%
branch  1 taken 44%
      119: 7893-block  2
        -: 7894:	  {
      119: 7895:	    merge(&tmp, &d->follows[pos[j].index], &merged);
      147: 7896:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
      119: 7896-block  0
branch  0 taken 79%
branch  1 taken 21%
       25: 7896-block  1
       53: 7896-block  2
branch  2 taken 53%
branch  3 taken 47%
       28: 7896-block  3
       25: 7896-block  4
        -: 7897:				 nalloc[pos[j].index], merged.nelem - 1);
      119: 7898:	    copy(&merged, &d->follows[pos[j].index]);
      119: 7899:	  }
      119: 7899-block  0
        -: 7900:
        -: 7901:	/* The firstpos of a CAT node is the firstpos of the first argument,
        -: 7902:	   union that of the second argument if the first is nullable. */
       95: 7903:	if (nullable[-2])
       95: 7903-block  0
branch  0 taken 1%
branch  1 taken 99%
        1: 7904:	  nfirstpos[-2] += nfirstpos[-1];
        1: 7904-block  0
        -: 7905:	else
       94: 7906:	  firstpos += nfirstpos[-1];
       94: 7906-block  0
       95: 7907:	--nfirstpos;
        -: 7908:
        -: 7909:	/* The lastpos of a CAT node is the lastpos of the second argument,
        -: 7910:	   union that of the first argument if the second is nullable. */
       95: 7911:	if (nullable[-1])
       95: 7911-block  0
branch  0 taken 12%
branch  1 taken 88%
       11: 7912:	  nlastpos[-2] += nlastpos[-1];
       11: 7912-block  0
        -: 7913:	else
        -: 7914:	  {
       84: 7915:	    pos = lastpos + nlastpos[-2];
      169: 7916:	    for (j = nlastpos[-1] - 1; j >= 0; --j)
       84: 7916-block  0
      169: 7916-block  1
branch  0 taken 50%
branch  1 taken 50%
       85: 7916-block  2
       85: 7917:	      pos[j] = lastpos[j];
       85: 7917-block  0
       84: 7918:	    lastpos += nlastpos[-2];
       84: 7919:	    nlastpos[-2] = nlastpos[-1];
       84: 7919-block  0
        -: 7920:	  }
       95: 7921:	--nlastpos;
        -: 7922:
        -: 7923:	/* A CAT node is nullable if both arguments are nullable. */
       95: 7924:	nullable[-2] = nullable[-1] && nullable[-2];
       95: 7924-block  0
branch  0 taken 12%
branch  1 taken 88%
       11: 7924-block  1
       95: 7925:	--nullable;
       95: 7926:	break;
       95: 7926-block  0
        -: 7927:
        -: 7928:      case OR:
        -: 7929:      case ORTOP:
        -: 7930:	/* The firstpos is the union of the firstpos of each argument. */
       12: 7931:	nfirstpos[-2] += nfirstpos[-1];
       12: 7932:	--nfirstpos;
        -: 7933:
        -: 7934:	/* The lastpos is the union of the lastpos of each argument. */
       12: 7935:	nlastpos[-2] += nlastpos[-1];
       12: 7936:	--nlastpos;
        -: 7937:
        -: 7938:	/* An OR node is nullable if either argument is nullable. */
       12: 7939:	nullable[-2] = nullable[-1] || nullable[-2];
       12: 7939-block  0
branch  0 taken 8%
branch  1 taken 92%
       11: 7939-block  1
       12: 7940:	--nullable;
       12: 7941:	break;
       12: 7941-block  0
        -: 7942:
        -: 7943:      default:
        -: 7944:	/* Anything else is a nonempty position.  (Note that special
        -: 7945:	   constructs like \< are treated as nonempty strings here;
        -: 7946:	   an "epsilon closure" effectively makes them nullable later.
        -: 7947:	   Backreferences have to get a real position so we can detect
        -: 7948:	   transitions on them later.  But they are nullable. */
      110: 7949:	*nullable++ = d->tokens[i] == BACKREF;
        -: 7950:
        -: 7951:	/* This position is in its own firstpos and lastpos. */
      110: 7952:	*nfirstpos++ = *nlastpos++ = 1;
      110: 7953:	--firstpos, --lastpos;
      110: 7954:	firstpos->index = lastpos->index = i;
      110: 7955:	firstpos->constraint = lastpos->constraint = NO_CONSTRAINT;
        -: 7956:
        -: 7957:	/* Allocate the follow set for this position. */
      110: 7958:	nalloc[i] = 1;
      110: 7959:	MALLOC(d->follows[i].elems, position, nalloc[i]);
      110: 7960:	break;
      110: 7960-block  0
      232: 7961:      }
      232: 7961-block  0
        -: 7962:#ifdef DEBUG
        -: 7963:    /* ... balance the above nonsyntactic #ifdef goo... */
        -: 7964:      fprintf(stderr, "node %d:", i);
        -: 7965:      prtok(d->tokens[i]);
        -: 7966:      putc('\n', stderr);
        -: 7967:      fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n");
        -: 7968:      fprintf(stderr, " firstpos:");
        -: 7969:      for (j = nfirstpos[-1] - 1; j >= 0; --j)
        -: 7970:	{
        -: 7971:	  fprintf(stderr, " %d:", firstpos[j].index);
        -: 7972:	  prtok(d->tokens[firstpos[j].index]);
        -: 7973:	}
        -: 7974:      fprintf(stderr, "\n lastpos:");
        -: 7975:      for (j = nlastpos[-1] - 1; j >= 0; --j)
        -: 7976:	{
        -: 7977:	  fprintf(stderr, " %d:", lastpos[j].index);
        -: 7978:	  prtok(d->tokens[lastpos[j].index]);
        -: 7979:	}
        -: 7980:      putc('\n', stderr);
        -: 7981:    }
        -: 7982:#endif
        -: 7983:
        -: 7984:  /* For each follow set that is the follow set of a real position, replace
        -: 7985:     it with its epsilon closure. */
      235: 7986:  for (i = 0; i < d->tindex; ++i)
        3: 7986-block  0
      235: 7986-block  1
branch  0 taken 99%
branch  1 taken 1%
      232: 7986-block  2
      232: 7987:    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF
      232: 7987-block  0
branch  0 taken 67%
branch  1 taken 33%
      155: 7987-block  1
branch  2 taken 19%
branch  3 taken 81%
      262: 7988:	|| d->tokens[i] >= CSET)
      155: 7988-block  0
branch  0 taken 100%
branch  1 taken 0%
      232: 7988-block  1
        -: 7989:      {
        -: 7990:#ifdef DEBUG
        -: 7991:	fprintf(stderr, "follows(%d:", i);
        -: 7992:	prtok(d->tokens[i]);
        -: 7993:	fprintf(stderr, "):");
        -: 7994:	for (j = d->follows[i].nelem - 1; j >= 0; --j)
        -: 7995:	  {
        -: 7996:	    fprintf(stderr, " %d:", d->follows[i].elems[j].index);
        -: 7997:	    prtok(d->tokens[d->follows[i].elems[j].index]);
        -: 7998:	  }
        -: 7999:	putc('\n', stderr);
        -: 8000:#endif
      107: 8001:	copy(&d->follows[i], &merged);
      107: 8002:	epsclosure(&merged, d);
      107: 8003:	if (d->follows[i].nelem < merged.nelem)
      107: 8003-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8004:	  REALLOC(d->follows[i].elems, position, merged.nelem);
    $$$$$: 8004-block  0
      107: 8005:	copy(&merged, &d->follows[i]);
      107: 8006:      }
      107: 8006-block  0
        -: 8007:
        -: 8008:  /* Get the epsilon closure of the firstpos of the regexp.  The result will
        -: 8009:     be the set of positions of state 0. */
        3: 8010:  merged.nelem = 0;
        6: 8011:  for (i = 0; i < nfirstpos[-1]; ++i)
        3: 8011-block  0
        6: 8011-block  1
branch  0 taken 50%
branch  1 taken 50%
        3: 8011-block  2
        3: 8012:    insert(firstpos[i], &merged);
        3: 8012-block  0
        3: 8013:  epsclosure(&merged, d);
        -: 8014:
        -: 8015:  /* Check if any of the positions of state 0 will want newline context. */
        3: 8016:  wants_newline = 0;
       19: 8017:  for (i = 0; i < merged.nelem; ++i)
        3: 8017-block  0
       19: 8017-block  1
branch  0 taken 84%
branch  1 taken 16%
       16: 8017-block  2
       30: 8018:    if (PREV_NEWLINE_DEPENDENT(merged.elems[i].constraint))
       16: 8018-block  0
branch  0 taken 13%
branch  1 taken 88%
       16: 8018-block  1
       14: 8019:      wants_newline = 1;
       14: 8019-block  0
        -: 8020:
        -: 8021:  /* Build the initial state. */
        3: 8022:  d->salloc = 1;
        3: 8023:  d->sindex = 0;
        3: 8024:  MALLOC(d->states, dfa_state, d->salloc);
        3: 8025:  state_index(d, &merged, wants_newline, 0);
        -: 8026:
        3: 8027:  free(o_nullable);
        3: 8028:  free(o_nfirst);
        3: 8029:  free(o_firstpos);
        3: 8030:  free(o_nlast);
        3: 8031:  free(o_lastpos);
        3: 8032:  free(nalloc);
        3: 8033:  free(merged.elems);
        3: 8034:}
        3: 8034-block  0
        -: 8035:
        -: 8036:/* Find, for each character, the transition out of state s of d, and store
        -: 8037:   it in the appropriate slot of trans.
        -: 8038:
        -: 8039:   We divide the positions of s into groups (positions can appear in more
        -: 8040:   than one group).  Each group is labeled with a set of characters that
        -: 8041:   every position in the group matches (taking into account, if necessary,
        -: 8042:   preceding context information of s).  For each group, find the union
        -: 8043:   of the its elements' follows.  This set is the set of positions of the
        -: 8044:   new state.  For each character in the group's label, set the transition
        -: 8045:   on this character to be to a state corresponding to the set's positions,
        -: 8046:   and its associated backward context information, if necessary.
        -: 8047:
        -: 8048:   If we are building a searching matcher, we include the positions of state
        -: 8049:   0 in every state.
        -: 8050:
        -: 8051:   The collection of groups is constructed by building an equivalence-class
        -: 8052:   partition of the positions of s.
        -: 8053:
        -: 8054:   For each position, find the set of characters C that it matches.  Eliminate
        -: 8055:   any characters from C that fail on grounds of backward context.
        -: 8056:
        -: 8057:   Search through the groups, looking for a group whose label L has nonempty
        -: 8058:   intersection with C.  If L - C is nonempty, create a new group labeled
        -: 8059:   L - C and having the same positions as the current group, and set L to
        -: 8060:   the intersection of L and C.  Insert the position in this group, set
        -: 8061:   C = C - L, and resume scanning.
        -: 8062:
        -: 8063:   If after comparing with every group there are characters remaining in C,
        -: 8064:   create a new group labeled with the characters of C and insert this
        -: 8065:   position in that group. */
        -: 8066:void
function dfastate called 12 returned 100% blocks executed 84%
       12: 8067:dfastate(s, d, trans)
        -: 8068:     int s;
        -: 8069:     struct dfa *d;
        -: 8070:     int trans[];
        -: 8071:{
        -: 8072:  position_set grps[NOTCHAR];	/* As many as will ever be needed. */
        -: 8073:  charclass labels[NOTCHAR];	/* Labels corresponding to the groups. */
       12: 8074:  int ngrps = 0;		/* Number of groups actually used. */
        -: 8075:  position pos;			/* Current position being considered. */
        -: 8076:  charclass matches;		/* Set of matching characters. */
        -: 8077:  int matchesf;			/* True if matches is nonempty. */
        -: 8078:  charclass intersect;		/* Intersection with some label set. */
        -: 8079:  int intersectf;		/* True if intersect is nonempty. */
        -: 8080:  charclass leftovers;		/* Stuff in the label that didn't match. */
        -: 8081:  int leftoversf;		/* True if leftovers is nonempty. */
        -: 8082:  static charclass letters;	/* Set of characters considered letters. */
        -: 8083:  static charclass newline;	/* Set of characters that aren't newline. */
        -: 8084:  position_set follows;		/* Union of the follows of some group. */
        -: 8085:  position_set tmp;		/* Temporary space for merging sets. */
        -: 8086:  int state;			/* New state. */
        -: 8087:  int wants_newline;		/* New state wants to know newline context. */
        -: 8088:  int state_newline;		/* New state on a newline transition. */
        -: 8089:  int wants_letter;		/* New state wants to know letter context. */
        -: 8090:  int state_letter;		/* New state on a letter transition. */
        -: 8091:  static initialized;		/* Flag for static initialization. */
        -: 8092:  int i, j, k;
        -: 8093:
        -: 8094:  /* Initialize the set of letters, if necessary. */
       12: 8095:  if (! initialized)
       12: 8095-block  0
branch  0 taken 92%
branch  1 taken 8%
        -: 8096:    {
        1: 8097:      initialized = 1;
      257: 8098:      for (i = 0; i < NOTCHAR; ++i)
        1: 8098-block  0
      257: 8098-block  1
branch  0 taken 99%
branch  1 taken 1%
      256: 8098-block  2
      318: 8099:	if (ISALNUM(i))
      256: 8099-block  0
branch  0 taken 76%
branch  1 taken 24%
      256: 8099-block  1
       62: 8100:	  setbit(i, letters);
       62: 8100-block  0
        1: 8101:      setbit('\n', newline);
        1: 8102:    }
        1: 8102-block  0
        -: 8103:
       12: 8104:  zeroset(matches);
        -: 8105:
      199: 8106:  for (i = 0; i < d->states[s].elems.nelem; ++i)
       12: 8106-block  0
      199: 8106-block  1
branch  0 taken 94%
branch  1 taken 6%
      187: 8106-block  2
        -: 8107:    {
      187: 8108:      pos = d->states[s].elems.elems[i];
      187: 8109:      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR)
      187: 8109-block  0
branch  0 taken 94%
branch  1 taken 6%
      175: 8109-block  1
branch  2 taken 75%
branch  3 taken 25%
       43: 8110:	setbit(d->tokens[pos.index], matches);
       43: 8110-block  0
      144: 8111:      else if (d->tokens[pos.index] >= CSET)
      144: 8111-block  0
branch  0 taken 92%
branch  1 taken 8%
      132: 8112:	copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
      132: 8112-block  0
        -: 8113:      else
       12: 8114:	continue;
       12: 8114-block  0
        -: 8115:
        -: 8116:      /* Some characters may need to be eliminated from matches because
        -: 8117:	 they fail in the current context. */
      175: 8118:      if (pos.constraint != 0xFF)
      175: 8118-block  0
branch  0 taken 15%
branch  1 taken 85%
        -: 8119:	{
      149: 8120:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
      149: 8120-block  0
branch  0 taken 91%
branch  1 taken 9%
        -: 8121:					 d->states[s].newline, 1))
      136: 8122:	    clrbit('\n', matches);
      136: 8122-block  0
      149: 8123:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
      149: 8123-block  0
branch  0 taken 91%
branch  1 taken 9%
        -: 8124:					 d->states[s].newline, 0))
     1224: 8125:	    for (j = 0; j < CHARCLASS_INTS; ++j)
      136: 8125-block  0
     1224: 8125-block  1
branch  0 taken 89%
branch  1 taken 11%
     1088: 8125-block  2
     1224: 8126:	      matches[j] &= newline[j];
     1088: 8126-block  0
      136: 8126-block  1
      149: 8127:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
      149: 8127-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 8128:					d->states[s].letter, 1))
    #####: 8129:	    for (j = 0; j < CHARCLASS_INTS; ++j)
    $$$$$: 8129-block  0
    $$$$$: 8129-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8129-block  2
    #####: 8130:	      matches[j] &= ~letters[j];
    $$$$$: 8130-block  0
    $$$$$: 8130-block  1
      149: 8131:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
      149: 8131-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 8132:					d->states[s].letter, 0))
    #####: 8133:	    for (j = 0; j < CHARCLASS_INTS; ++j)
    $$$$$: 8133-block  0
    $$$$$: 8133-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8133-block  2
    #####: 8134:	      matches[j] &= letters[j];
    $$$$$: 8134-block  0
    $$$$$: 8134-block  1
        -: 8135:
        -: 8136:	  /* If there are no characters left, there's no point in going on. */
     1258: 8137:	  for (j = 0; j < CHARCLASS_INTS && !matches[j]; ++j)
      149: 8137-block  0
     1258: 8137-block  1
branch  0 taken 11%
branch  1 taken 89%
     1122: 8137-block  2
     1258: 8137-block  3
branch  2 taken 88%
branch  3 taken 12%
     1109: 8137-block  4
     1109: 8137-block  5
        -: 8138:	    ;
      149: 8139:	  if (j == CHARCLASS_INTS)
      149: 8139-block  0
branch  0 taken 91%
branch  1 taken 9%
      136: 8140:	    continue;
      136: 8140-block  0
       13: 8141:	}
       13: 8141-block  0
        -: 8142:
       74: 8143:      for (j = 0; j < ngrps; ++j)
       39: 8143-block  0
       74: 8143-block  1
branch  0 taken 28%
branch  1 taken 72%
       35: 8143-block  2
        -: 8144:	{
        -: 8145:	  /* If matches contains a single character only, and the current
        -: 8146:	     group's label doesn't contain that character, go on to the
        -: 8147:	     next group. */
       53: 8148:	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR
       53: 8148-block  0
branch  0 taken 100%
branch  1 taken 0%
       14: 8148-block  1
branch  2 taken 21%
branch  3 taken 79%
       53: 8149:	      && !tstbit(d->tokens[pos.index], labels[j]))
       53: 8149-block  0
branch  0 taken 26%
branch  1 taken 74%
       11: 8150:	    continue;
       11: 8150-block  0
        -: 8151:
        -: 8152:	  /* Check if this group's label has a nonempty intersection with
        -: 8153:	     matches. */
       42: 8154:	  intersectf = 0;
      378: 8155:	  for (k = 0; k < CHARCLASS_INTS; ++k)
       42: 8155-block  0
      378: 8155-block  1
branch  0 taken 89%
branch  1 taken 11%
      336: 8155-block  2
      336: 8156:	    (intersect[k] = matches[k] & labels[j][k]) ? intersectf = 1 : 0;
      336: 8156-block  0
branch  0 taken 88%
branch  1 taken 12%
       40: 8156-block  1
      296: 8156-block  2
      336: 8156-block  3
       42: 8157:	  if (! intersectf)
       42: 8157-block  0
branch  0 taken 43%
branch  1 taken 57%
       18: 8158:	    continue;
       18: 8158-block  0
        -: 8159:
        -: 8160:	  /* It does; now find the set differences both ways. */
       24: 8161:	  leftoversf = matchesf = 0;
      216: 8162:	  for (k = 0; k < CHARCLASS_INTS; ++k)
       24: 8162-block  0
      216: 8162-block  1
branch  0 taken 89%
branch  1 taken 11%
      192: 8162-block  2
        -: 8163:	    {
        -: 8164:	      /* Even an optimizing compiler can't know this for sure. */
      192: 8165:	      int match = matches[k], label = labels[j][k];
        -: 8166:
      192: 8167:	      (leftovers[k] = ~match & label) ? leftoversf = 1 : 0;
      192: 8167-block  0
branch  0 taken 2%
branch  1 taken 98%
        4: 8167-block  1
      188: 8167-block  2
      192: 8168:	      (matches[k] = match & ~label) ? matchesf = 1 : 0;
      192: 8168-block  0
branch  0 taken 7%
branch  1 taken 93%
       13: 8168-block  1
      179: 8168-block  2
      192: 8169:	    }
      192: 8169-block  0
        -: 8170:
        -: 8171:	  /* If there were leftovers, create a new group labeled with them. */
       24: 8172:	  if (leftoversf)
       24: 8172-block  0
branch  0 taken 92%
branch  1 taken 8%
        -: 8173:	    {
        2: 8174:	      copyset(leftovers, labels[ngrps]);
        2: 8175:	      copyset(intersect, labels[j]);
        2: 8176:	      MALLOC(grps[ngrps].elems, position, d->nleaves);
        2: 8177:	      copy(&grps[j], &grps[ngrps]);
        2: 8178:	      ++ngrps;
        2: 8179:	    }
        2: 8179-block  0
        -: 8180:
        -: 8181:	  /* Put the position in the current group.  Note that there is no
        -: 8182:	     reason to call insert() here. */
       24: 8183:	  grps[j].elems[grps[j].nelem++] = pos;
        -: 8184:
        -: 8185:	  /* If every character matching the current position has been
        -: 8186:	     accounted for, we're done. */
       24: 8187:	  if (! matchesf)
       24: 8187-block  0
branch  0 taken 25%
branch  1 taken 75%
       18: 8188:	    break;
       18: 8188-block  0
        6: 8189:	}
        6: 8189-block  0
        -: 8190:
        -: 8191:      /* If we've passed the last group, and there are still characters
        -: 8192:	 unaccounted for, then we'll have to create a new group. */
       39: 8193:      if (j == ngrps)
       39: 8193-block  0
branch  0 taken 54%
branch  1 taken 46%
        -: 8194:	{
       21: 8195:	  copyset(matches, labels[ngrps]);
       21: 8196:	  zeroset(matches);
       21: 8197:	  MALLOC(grps[ngrps].elems, position, d->nleaves);
       21: 8198:	  grps[ngrps].nelem = 1;
       21: 8199:	  grps[ngrps].elems[0] = pos;
       21: 8200:	  ++ngrps;
       21: 8201:	}
       21: 8201-block  0
       39: 8202:    }
       39: 8202-block  0
        -: 8203:
       12: 8204:  MALLOC(follows.elems, position, d->nleaves);
       12: 8205:  MALLOC(tmp.elems, position, d->nleaves);
        -: 8206:
        -: 8207:  /* If we are a searching matcher, the default transition is to a state
        -: 8208:     containing the positions of state 0, otherwise the default transition
        -: 8209:     is to fail miserably. */
       12: 8210:  if (d->searchflag)
       12: 8210-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 8211:    {
       12: 8212:      wants_newline = 0;
       12: 8213:      wants_letter = 0;
      180: 8214:      for (i = 0; i < d->states[0].elems.nelem; ++i)
       12: 8214-block  0
      180: 8214-block  1
branch  0 taken 93%
branch  1 taken 7%
      168: 8214-block  2
        -: 8215:	{
      168: 8216:	  if (PREV_NEWLINE_DEPENDENT(d->states[0].elems.elems[i].constraint))
      168: 8216-block  0
branch  0 taken 0%
branch  1 taken 100%
      168: 8217:	    wants_newline = 1;
      168: 8217-block  0
      168: 8218:	  if (PREV_LETTER_DEPENDENT(d->states[0].elems.elems[i].constraint))
      168: 8218-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8219:	    wants_letter = 1;
    $$$$$: 8219-block  0
      168: 8220:	}
      168: 8220-block  0
       12: 8221:      copy(&d->states[0].elems, &follows);
       12: 8222:      state = state_index(d, &follows, 0, 0);
       12: 8223:      if (wants_newline)
       12: 8223-block  0
branch  0 taken 0%
branch  1 taken 100%
       12: 8224:	state_newline = state_index(d, &follows, 1, 0);
       12: 8224-block  0
        -: 8225:      else
    #####: 8226:	state_newline = state;
    $$$$$: 8226-block  0
       12: 8227:      if (wants_letter)
       12: 8227-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8228:	state_letter = state_index(d, &follows, 0, 1);
    $$$$$: 8228-block  0
        -: 8229:      else
       12: 8230:	state_letter = state;
       12: 8230-block  0
     3084: 8231:      for (i = 0; i < NOTCHAR; ++i)
       12: 8231-block  0
     3084: 8231-block  1
branch  0 taken 99%
branch  1 taken 1%
     3072: 8231-block  2
     6144: 8232:	if (i == '\n')
     3072: 8232-block  0
branch  0 taken 1%
branch  1 taken 99%
     3072: 8232-block  1
       12: 8233:	  trans[i] = state_newline;
       12: 8233-block  0
     3060: 8234:	else if (ISALNUM(i))
     3060: 8234-block  0
branch  0 taken 76%
branch  1 taken 24%
      744: 8235:	  trans[i] = state_letter;
      744: 8235-block  0
        -: 8236:	else
     2316: 8237:	  trans[i] = state;
     2316: 8237-block  0
       12: 8238:    }
       12: 8238-block  0
        -: 8239:  else
    #####: 8240:    for (i = 0; i < NOTCHAR; ++i)
    $$$$$: 8240-block  0
    $$$$$: 8240-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8240-block  2
    #####: 8241:      trans[i] = -1;
    $$$$$: 8241-block  0
        -: 8242:
       35: 8243:  for (i = 0; i < ngrps; ++i)
       12: 8243-block  0
       35: 8243-block  1
branch  0 taken 66%
branch  1 taken 34%
       23: 8243-block  2
        -: 8244:    {
       23: 8245:      follows.nelem = 0;
        -: 8246:
        -: 8247:      /* Find the union of the follows of the positions of the group.
        -: 8248:	 This is a hideously inefficient loop.  Fix it someday. */
       70: 8249:      for (j = 0; j < grps[i].nelem; ++j)
       23: 8249-block  0
       70: 8249-block  1
branch  0 taken 67%
branch  1 taken 33%
       47: 8249-block  2
      121: 8250:	for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k)
       47: 8250-block  0
      121: 8250-block  1
branch  0 taken 61%
branch  1 taken 39%
       74: 8250-block  2
      121: 8251:	  insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
       74: 8251-block  0
       47: 8251-block  1
        -: 8252:
        -: 8253:      /* If we are building a searching matcher, throw in the positions
        -: 8254:	 of state 0 as well. */
       23: 8255:      if (d->searchflag)
       23: 8255-block  0
branch  0 taken 0%
branch  1 taken 100%
      345: 8256:	for (j = 0; j < d->states[0].elems.nelem; ++j)
       23: 8256-block  0
      345: 8256-block  1
branch  0 taken 93%
branch  1 taken 7%
      322: 8256-block  2
      345: 8257:	  insert(d->states[0].elems.elems[j], &follows);
      322: 8257-block  0
       23: 8257-block  1
        -: 8258:
        -: 8259:      /* Find out if the new state will want any context information. */
       23: 8260:      wants_newline = 0;
       23: 8261:      if (tstbit('\n', labels[i]))
       23: 8261-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8262:	for (j = 0; j < follows.nelem; ++j)
    $$$$$: 8262-block  0
    $$$$$: 8262-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8262-block  2
    #####: 8263:	  if (PREV_NEWLINE_DEPENDENT(follows.elems[j].constraint))
    $$$$$: 8263-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 8263-block  1
    #####: 8264:	    wants_newline = 1;
    $$$$$: 8264-block  0
    $$$$$: 8264-block  1
        -: 8265:
       23: 8266:      wants_letter = 0;
       56: 8267:      for (j = 0; j < CHARCLASS_INTS; ++j)
       23: 8267-block  0
       56: 8267-block  1
branch  0 taken 0%
branch  1 taken 100%
       33: 8267-block  2
       56: 8268:	if (labels[i][j] & letters[j])
       56: 8268-block  0
branch  0 taken 59%
branch  1 taken 41%
       33: 8268-block  1
       23: 8269:	  break;
       23: 8269-block  0
       23: 8270:      if (j < CHARCLASS_INTS)
       23: 8270-block  0
branch  0 taken 0%
branch  1 taken 100%
      382: 8271:	for (j = 0; j < follows.nelem; ++j)
       23: 8271-block  0
      382: 8271-block  1
branch  0 taken 94%
branch  1 taken 6%
      359: 8271-block  2
      359: 8272:	  if (PREV_LETTER_DEPENDENT(follows.elems[j].constraint))
      359: 8272-block  0
branch  0 taken 100%
branch  1 taken 0%
      359: 8272-block  1
       23: 8273:	    wants_letter = 1;
    $$$$$: 8273-block  0
       23: 8273-block  1
        -: 8274:
        -: 8275:      /* Find the state(s) corresponding to the union of the follows. */
       23: 8276:      state = state_index(d, &follows, 0, 0);
       23: 8277:      if (wants_newline)
       23: 8277-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 8278:	state_newline = state_index(d, &follows, 1, 0);
    $$$$$: 8278-block  0
        -: 8279:      else
       23: 8280:	state_newline = state;
       23: 8280-block  0
       23: 8281:      if (wants_letter)
       23: 8281-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 8282:	state_letter = state_index(d, &follows, 0, 1);
    $$$$$: 8282-block  0
        -: 8283:      else
       23: 8284:	state_letter = state;
       23: 8284-block  0
        -: 8285:
        -: 8286:      /* Set the transitions for each character in the current label. */
      207: 8287:      for (j = 0; j < CHARCLASS_INTS; ++j)
       23: 8287-block  0
      207: 8287-block  1
branch  0 taken 89%
branch  1 taken 11%
      184: 8287-block  2
     6072: 8288:	for (k = 0; k < INTBITS; ++k)
      184: 8288-block  0
     6072: 8288-block  1
branch  0 taken 97%
branch  1 taken 3%
     5888: 8288-block  2
     5977: 8289:	  if (labels[i][j] & 1 << k)
     5888: 8289-block  0
branch  0 taken 98%
branch  1 taken 2%
     5888: 8289-block  1
        -: 8290:	    {
       89: 8291:	      int c = j * INTBITS + k;
        -: 8292:
       89: 8293:	      if (c == '\n')
       89: 8293-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 8294:		trans[c] = state_newline;
    $$$$$: 8294-block  0
       89: 8295:	      else if (ISALNUM(c))
       89: 8295-block  0
branch  0 taken 1%
branch  1 taken 99%
       88: 8296:		trans[c] = state_letter;
       88: 8296-block  0
        1: 8297:	      else if (c < NOTCHAR)
        1: 8297-block  0
branch  0 taken 0%
branch  1 taken 100%
        1: 8298:		trans[c] = state;
        1: 8298-block  0
      273: 8299:	    }
       89: 8299-block  0
      184: 8299-block  1
       23: 8300:    }
       23: 8300-block  0
        -: 8301:
       35: 8302:  for (i = 0; i < ngrps; ++i)
       12: 8302-block  0
       35: 8302-block  1
branch  0 taken 66%
branch  1 taken 34%
       23: 8302-block  2
       23: 8303:    free(grps[i].elems);
       23: 8303-block  0
       12: 8304:  free(follows.elems);
       12: 8305:  free(tmp.elems);
       12: 8306:}
       12: 8306-block  0
        -: 8307:
        -: 8308:/* Some routines for manipulating a compiled dfa's transition tables.
        -: 8309:   Each state may or may not have a transition table; if it does, and it
        -: 8310:   is a non-accepting state, then d->trans[state] points to its table.
        -: 8311:   If it is an accepting state then d->fails[state] points to its table.
        -: 8312:   If it has no table at all, then d->trans[state] is NULL.
        -: 8313:   TODO: Improve this comment, get rid of the unnecessary redundancy. */
        -: 8314:
        -: 8315:static void
function build_state called 12 returned 100% blocks executed 61%
       12: 8316:build_state(s, d)
        -: 8317:     int s;
        -: 8318:     struct dfa *d;
        -: 8319:{
        -: 8320:  int *trans;			/* The new transition table. */
        -: 8321:  int i;
        -: 8322:
        -: 8323:  /* Set an upper limit on the number of transition tables that will ever
        -: 8324:     exist at once.  1024 is arbitrary.  The idea is that the frequently
        -: 8325:     used transition tables will be quickly rebuilt, whereas the ones that
        -: 8326:     were only needed once or twice will be cleared away. */
       12: 8327:  if (d->trcount >= 1024)
       12: 8327-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 8328:    {
    #####: 8329:      for (i = 0; i < d->tralloc; ++i)
    $$$$$: 8329-block  0
    $$$$$: 8329-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8329-block  2
    #####: 8330:	if (d->trans[i])
    $$$$$: 8330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 8330-block  1
        -: 8331:	  {
    #####: 8332:	    free((ptr_t) d->trans[i]);
    #####: 8333:	    d->trans[i] = NULL;
    #####: 8334:	  }
    $$$$$: 8334-block  0
    #####: 8335:	else if (d->fails[i])
    $$$$$: 8335-block  0
branch  0 never executed
branch  1 never executed
        -: 8336:	  {
    #####: 8337:	    free((ptr_t) d->fails[i]);
    #####: 8338:	    d->fails[i] = NULL;
    #####: 8339:	  }
    $$$$$: 8339-block  0
    #####: 8340:      d->trcount = 0;
    #####: 8341:    }
    $$$$$: 8341-block  0
        -: 8342:
       12: 8343:  ++d->trcount;
        -: 8344:
        -: 8345:  /* Set up the success bits for this state. */
       12: 8346:  d->success[s] = 0;
       12: 8347:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
       12: 8347-block  0
branch  0 taken 67%
branch  1 taken 33%
        8: 8347-block  1
branch  2 taken 0%
branch  3 taken 100%
        -: 8348:      s, *d))
        8: 8349:    d->success[s] |= 4;
        8: 8349-block  0
       12: 8350:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
       12: 8350-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 8350-block  1
branch  2 never executed
branch  3 never executed
        -: 8351:      s, *d))
    #####: 8352:    d->success[s] |= 2;
    $$$$$: 8352-block  0
       12: 8353:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
       12: 8353-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 8353-block  1
branch  2 never executed
branch  3 never executed
        -: 8354:      s, *d))
    #####: 8355:    d->success[s] |= 1;
    $$$$$: 8355-block  0
        -: 8356:
       12: 8357:  MALLOC(trans, int, NOTCHAR);
       12: 8358:  dfastate(s, d, trans);
        -: 8359:
        -: 8360:  /* Now go through the new transition table, and make sure that the trans
        -: 8361:     and fail arrays are allocated large enough to hold a pointer for the
        -: 8362:     largest state mentioned in the table. */
     3084: 8363:  for (i = 0; i < NOTCHAR; ++i)
       12: 8363-block  0
     3084: 8363-block  1
branch  0 taken 99%
branch  1 taken 1%
     3072: 8363-block  2
     3075: 8364:    if (trans[i] >= d->tralloc)
     3072: 8364-block  0
branch  0 taken 99%
branch  1 taken 1%
     3072: 8364-block  1
        -: 8365:      {
        3: 8366:	int oldalloc = d->tralloc;
        -: 8367:
        7: 8368:	while (trans[i] >= d->tralloc)
        3: 8368-block  0
        7: 8368-block  1
branch  0 taken 57%
branch  1 taken 43%
        4: 8368-block  2
        4: 8369:	  d->tralloc *= 2;
        3: 8370:	REALLOC(d->realtrans, int *, d->tralloc + 1);
        3: 8371:	d->trans = d->realtrans + 1;
        3: 8372:	REALLOC(d->fails, int *, d->tralloc);
        3: 8373:	REALLOC(d->success, int, d->tralloc);
        3: 8374:	REALLOC(d->newlines, int, d->tralloc);
       18: 8375:	while (oldalloc < d->tralloc)
        3: 8375-block  0
       18: 8375-block  1
branch  0 taken 83%
branch  1 taken 17%
       15: 8375-block  2
        -: 8376:	  {
       15: 8377:	    d->trans[oldalloc] = NULL;
       15: 8378:	    d->fails[oldalloc++] = NULL;
        -: 8379:	  }
        3: 8380:      }
        3: 8380-block  0
        -: 8381:
        -: 8382:  /* Keep the newline transition in a special place so we can use it as
        -: 8383:     a sentinel. */
       12: 8384:  d->newlines[s] = trans['\n'];
       12: 8385:  trans['\n'] = -1;
        -: 8386:
       12: 8387:  if (ACCEPTING(s, *d))
       12: 8387-block  0
branch  0 taken 33%
branch  1 taken 67%
        8: 8388:    d->fails[s] = trans;
        8: 8388-block  0
        -: 8389:  else
        4: 8390:    d->trans[s] = trans;
        4: 8390-block  0
       12: 8391:}
       12: 8391-block  0
        -: 8392:
        -: 8393:static void
function build_state_zero called 1 returned 100% blocks executed 100%
        1: 8394:build_state_zero(d)
        -: 8395:     struct dfa *d;
        -: 8396:{
        1: 8397:  d->tralloc = 1;
        1: 8398:  d->trcount = 0;
        1: 8399:  CALLOC(d->realtrans, int *, d->tralloc + 1);
        1: 8400:  d->trans = d->realtrans + 1;
        1: 8401:  CALLOC(d->fails, int *, d->tralloc);
        1: 8402:  MALLOC(d->success, int, d->tralloc);
        1: 8403:  MALLOC(d->newlines, int, d->tralloc);
        1: 8404:  build_state(0, d);
        1: 8405:}
        1: 8405-block  0
        -: 8406:
        -: 8407:/* Search through a buffer looking for a match to the given struct dfa.
        -: 8408:   Find the first occurrence of a string matching the regexp in the buffer,
        -: 8409:   and the shortest possible version thereof.  Return a pointer to the first
        -: 8410:   character after the match, or NULL if none is found.  Begin points to
        -: 8411:   the beginning of the buffer, and end points to the first character after
        -: 8412:   its end.  We store a newline in *end to act as a sentinel, so end had
        -: 8413:   better point somewhere valid.  Newline is a flag indicating whether to
        -: 8414:   allow newlines to be in the matching string.  If count is non-
        -: 8415:   NULL it points to a place we're supposed to increment every time we
        -: 8416:   see a newline.  Finally, if backref is non-NULL it points to a place
        -: 8417:   where we're supposed to store a 1 if backreferencing happened and the
        -: 8418:   match needs to be verified by a backtracking matcher.  Otherwise
        -: 8419:   we store a 0 in *backref. */
        -: 8420:char *
function dfaexec called 1 returned 100% blocks executed 87%
        1: 8421:dfaexec(d, begin, end, newline, count, backref)
        -: 8422:     struct dfa *d;
        -: 8423:     char *begin;
        -: 8424:     char *end;
        -: 8425:     int newline;
        -: 8426:     int *count;
        -: 8427:     int *backref;
        -: 8428:{
        -: 8429:  register s, s1, tmp;		/* Current state. */
        -: 8430:  register unsigned char *p;	/* Current input character. */
        -: 8431:  register **trans, *t;		/* Copy of d->trans so it can be optimized
        -: 8432:				   into a register. */
        -: 8433:  static sbit[NOTCHAR];	/* Table for anding with d->success. */
        -: 8434:  static sbit_init;
        -: 8435:
        1: 8436:  if (! sbit_init)
        1: 8436-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 8437:    {
        -: 8438:      int i;
        -: 8439:
        1: 8440:      sbit_init = 1;
      257: 8441:      for (i = 0; i < NOTCHAR; ++i)
        1: 8441-block  0
      257: 8441-block  1
branch  0 taken 99%
branch  1 taken 1%
      256: 8441-block  2
      512: 8442:	if (i == '\n')
      256: 8442-block  0
branch  0 taken 1%
branch  1 taken 99%
      256: 8442-block  1
        1: 8443:	  sbit[i] = 4;
        1: 8443-block  0
      255: 8444:	else if (ISALNUM(i))
      255: 8444-block  0
branch  0 taken 76%
branch  1 taken 24%
       62: 8445:	  sbit[i] = 2;
       62: 8445-block  0
        -: 8446:	else
      193: 8447:	  sbit[i] = 1;
      193: 8447-block  0
        1: 8448:    }
        1: 8448-block  0
        -: 8449:
        1: 8450:  if (! d->tralloc)
        1: 8450-block  0
branch  0 taken 0%
branch  1 taken 100%
        1: 8451:    build_state_zero(d);
        1: 8451-block  0
        -: 8452:
        1: 8453:  s = s1 = 0;
        1: 8454:  p = (unsigned char *) begin;
        1: 8455:  trans = d->trans;
        1: 8456:  *end = '\n';
        -: 8457:
      516: 8458:  for (;;)
        1: 8458-block  0
      515: 8458-block  1
        -: 8459:    {
        -: 8460:      /* The dreaded inner loop. */
     1494: 8461:      if ((t = trans[s]) != 0)
     1494: 8461-block  0
branch  0 taken 65%
branch  1 taken 35%
      518: 8462:	do
      518: 8462-block  0
        -: 8463:	  {
    13340: 8464:	    s1 = t[*p++];
    13340: 8465:	    if (! (t = trans[s1]))
    13340: 8465-block  0
branch  0 taken 98%
branch  1 taken 2%
      272: 8466:	      goto last_was_s;
      272: 8466-block  0
    13068: 8467:	    s = t[*p++];
    13068: 8468:	  }
    13068: 8468-block  0
    13068: 8468-block  1
branch  0 taken 98%
branch  1 taken 2%
      246: 8468-block  2
    13068: 8469:        while ((t = trans[s]) != 0);
     1222: 8470:      goto last_was_s1;
     1222: 8470-block  0
        -: 8471:    last_was_s:
      272: 8472:      tmp = s, s = s1, s1 = tmp;
      272: 8472-block  0
        -: 8473:    last_was_s1:
        -: 8474:
     1494: 8475:      if (s >= 0 && p <= (unsigned char *) end && d->fails[s])
     1494: 8475-block  0
branch  0 taken 66%
branch  1 taken 34%
      979: 8475-block  1
branch  2 taken 100%
branch  3 taken 0%
      979: 8475-block  2
branch  4 taken 1%
branch  5 taken 99%
        -: 8476:	{
      968: 8477:	  if (d->success[s] & sbit[*p])
      968: 8477-block  0
branch  0 taken 99%
branch  1 taken 1%
        -: 8478:	    {
        1: 8479:	      if (backref)
        1: 8479-block  0
branch  0 taken 0%
branch  1 taken 100%
        2: 8480:		if (d->states[s].backref)
        1: 8480-block  0
branch  0 taken 100%
branch  1 taken 0%
        1: 8480-block  1
    #####: 8481:		  *backref = 1;
    $$$$$: 8481-block  0
        -: 8482:		else
        1: 8483:		  *backref = 0;
        1: 8483-block  0
        1: 8484:	      return (char *) p;
        1: 8484-block  0
        -: 8485:	    }
        -: 8486:
      967: 8487:	  s1 = s;
      967: 8488:	  s = d->fails[s][*p++];
      967: 8489:	  continue;
      967: 8489-block  0
        -: 8490:	}
        -: 8491:
        -: 8492:      /* If the previous character was a newline, count it. */
      526: 8493:      if (count && (char *) p <= end && p[-1] == '\n')
      526: 8493-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 8493-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 8493-block  2
branch  4 never executed
branch  5 never executed
    #####: 8494:	++*count;
    $$$$$: 8494-block  0
        -: 8495:
        -: 8496:      /* Check if we've run off the end of the buffer. */
      526: 8497:      if ((char *) p > end)
      526: 8497-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8498:	return NULL;
    $$$$$: 8498-block  0
        -: 8499:
      526: 8500:      if (s >= 0)
      526: 8500-block  0
branch  0 taken 2%
branch  1 taken 98%
        -: 8501:	{
       11: 8502:	  build_state(s, d);
       11: 8503:	  trans = d->trans;
       11: 8504:	  continue;
       11: 8504-block  0
        -: 8505:	}
        -: 8506:
      515: 8507:      if (p[-1] == '\n' && newline)
      515: 8507-block  0
branch  0 taken 100%
branch  1 taken 0%
      515: 8507-block  1
branch  2 taken 100%
branch  3 taken 0%
        -: 8508:	{
    #####: 8509:	  s = d->newlines[s1];
    #####: 8510:	  continue;
    $$$$$: 8510-block  0
        -: 8511:	}
        -: 8512:
      515: 8513:      s = 0;
        -: 8514:    }
        1: 8515:}
        1: 8515-block  0
        -: 8516:
        -: 8517:/* Initialize the components of a dfa that the other routines don't
        -: 8518:   initialize for themselves. */
        -: 8519:void
function dfainit called 6 returned 100% blocks executed 100%
        6: 8520:dfainit(d)
        -: 8521:     struct dfa *d;
        -: 8522:{
        6: 8523:  d->calloc = 1;
        6: 8524:  MALLOC(d->charclasses, charclass, d->calloc);
        6: 8525:  d->cindex = 0;
        -: 8526:
        6: 8527:  d->talloc = 1;
        6: 8528:  MALLOC(d->tokens, token, d->talloc);
        6: 8529:  d->tindex = d->depth = d->nleaves = d->nregexps = 0;
        -: 8530:
        6: 8531:  d->searchflag = 0;
        6: 8532:  d->tralloc = 0;
        -: 8533:
        6: 8534:  d->musts = 0;
        6: 8535:}
        6: 8535-block  0
        -: 8536:
        -: 8537:/* Parse and analyze a single string of the given length. */
        -: 8538:void
function dfacomp called 3 returned 100% blocks executed 92%
        3: 8539:dfacomp(s, len, d, searchflag)
        -: 8540:     char *s;
        -: 8541:     size_t len;
        -: 8542:     struct dfa *d;
        -: 8543:     int searchflag;
        -: 8544:{
        3: 8545:  if (case_fold)	/* dummy folding in service of dfamust() */
        3: 8545-block  0
branch  0 taken 33%
branch  1 taken 67%
        -: 8546:    {
        -: 8547:      char *copy;
        -: 8548:      int i;
        -: 8549:
        1: 8550:      copy = malloc(len);
        1: 8551:      if (!copy)
        1: 8551-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 8552:	dfaerror("out of memory");
    $$$$$: 8552-block  0
        -: 8553:      
        -: 8554:      /* This is a kludge. */
        1: 8555:      case_fold = 0;
       92: 8556:      for (i = 0; i < len; ++i)
        1: 8556-block  0
       92: 8556-block  1
branch  0 taken 1%
branch  1 taken 99%
       91: 8556-block  2
      182: 8557:	if (ISUPPER(s[i]))
       91: 8557-block  0
branch  0 taken 98%
branch  1 taken 2%
       91: 8557-block  1
        2: 8558:	  copy[i] = tolower(s[i]);
        2: 8558-block  0
        -: 8559:	else
       89: 8560:	  copy[i] = s[i];
       89: 8560-block  0
        -: 8561:
        1: 8562:      dfainit(d);
        1: 8563:      dfaparse(copy, len, d);
        1: 8564:      free(copy);
        1: 8565:      dfamust(d);
        1: 8566:      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
        1: 8567:      case_fold = 1;
        1: 8568:      dfaparse(s, len, d);
        1: 8569:      dfaanalyze(d, searchflag);
        1: 8570:    }
        1: 8570-block  0
        -: 8571:  else
        -: 8572:    {
        2: 8573:        dfainit(d);
        2: 8574:        dfaparse(s, len, d);
        2: 8575:	dfamust(d);
        2: 8576:        dfaanalyze(d, searchflag);
        2: 8576-block  0
        -: 8577:    }
        3: 8578:}
        3: 8578-block  0
        -: 8579:
        -: 8580:/* Free the storage held by the components of a dfa. */
        -: 8581:void
function dfafree called 0 returned 0% blocks executed 0%
    #####: 8582:dfafree(d)
        -: 8583:     struct dfa *d;
        -: 8584:{
        -: 8585:  int i;
        -: 8586:  struct dfamust *dm, *ndm;
        -: 8587:
    #####: 8588:  free((ptr_t) d->charclasses);
    #####: 8589:  free((ptr_t) d->tokens);
    #####: 8590:  for (i = 0; i < d->sindex; ++i)
    $$$$$: 8590-block  0
    $$$$$: 8590-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8590-block  2
    #####: 8591:    free((ptr_t) d->states[i].elems.elems);
    $$$$$: 8591-block  0
    #####: 8592:  free((ptr_t) d->states);
    #####: 8593:  for (i = 0; i < d->tindex; ++i)
    $$$$$: 8593-block  0
    $$$$$: 8593-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8593-block  2
    #####: 8594:    if (d->follows[i].elems)
    $$$$$: 8594-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 8594-block  1
    #####: 8595:      free((ptr_t) d->follows[i].elems);
    $$$$$: 8595-block  0
    #####: 8596:  free((ptr_t) d->follows);
    #####: 8597:  for (i = 0; i < d->tralloc; ++i)
    $$$$$: 8597-block  0
    $$$$$: 8597-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8597-block  2
    #####: 8598:    if (d->trans[i])
    $$$$$: 8598-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 8598-block  1
    #####: 8599:      free((ptr_t) d->trans[i]);
    $$$$$: 8599-block  0
    #####: 8600:    else if (d->fails[i])
    $$$$$: 8600-block  0
branch  0 never executed
branch  1 never executed
    #####: 8601:      free((ptr_t) d->fails[i]);
    $$$$$: 8601-block  0
    #####: 8602:  free((ptr_t) d->realtrans);
    #####: 8603:  free((ptr_t) d->fails);
    #####: 8604:  free((ptr_t) d->newlines);
    #####: 8605:  for (dm = d->musts; dm; dm = ndm)
    $$$$$: 8605-block  0
    $$$$$: 8605-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8605-block  2
        -: 8606:    {
    #####: 8607:      ndm = dm->next;
    #####: 8608:      free(dm->must);
    #####: 8609:      free((ptr_t) dm);
    #####: 8610:    }
    $$$$$: 8610-block  0
    #####: 8611:}
    $$$$$: 8611-block  0
        -: 8612:
        -: 8613:/* Having found the postfix representation of the regular expression,
        -: 8614:   try to find a long sequence of characters that must appear in any line
        -: 8615:   containing the r.e.
        -: 8616:   Finding a "longest" sequence is beyond the scope here;
        -: 8617:   we take an easy way out and hope for the best.
        -: 8618:   (Take "(ab|a)b"--please.)
        -: 8619:
        -: 8620:   We do a bottom-up calculation of sequences of characters that must appear
        -: 8621:   in matches of r.e.'s represented by trees rooted at the nodes of the postfix
        -: 8622:   representation:
        -: 8623:	sequences that must appear at the left of the match ("left")
        -: 8624:	sequences that must appear at the right of the match ("right")
        -: 8625:	lists of sequences that must appear somewhere in the match ("in")
        -: 8626:	sequences that must constitute the match ("is")
        -: 8627:
        -: 8628:   When we get to the root of the tree, we use one of the longest of its
        -: 8629:   calculated "in" sequences as our answer.  The sequence we find is returned in
        -: 8630:   d->must (where "d" is the single argument passed to "dfamust");
        -: 8631:   the length of the sequence is returned in d->mustn.
        -: 8632:
        -: 8633:   The sequences calculated for the various types of node (in pseudo ANSI c)
        -: 8634:   are shown below.  "p" is the operand of unary operators (and the left-hand
        -: 8635:   operand of binary operators); "q" is the right-hand operand of binary
        -: 8636:   operators.
        -: 8637:
        -: 8638:   "ZERO" means "a zero-length sequence" below.
        -: 8639:
        -: 8640:	Type	left		right		is		in
        -: 8641:	----	----		-----		--		--
        -: 8642:	char c	# c		# c		# c		# c
        -: 8643:	
        -: 8644:	CSET	ZERO		ZERO		ZERO		ZERO
        -: 8645:	
        -: 8646:	STAR	ZERO		ZERO		ZERO		ZERO
        -: 8647:
        -: 8648:	QMARK	ZERO		ZERO		ZERO		ZERO
        -: 8649:
        -: 8650:	PLUS	p->left		p->right	ZERO		p->in
        -: 8651:
        -: 8652:	CAT	(p->is==ZERO)?	(q->is==ZERO)?	(p->is!=ZERO &&	p->in plus
        -: 8653:		p->left :	q->right :	q->is!=ZERO) ?	q->in plus
        -: 8654:		p->is##q->left	p->right##q->is	p->is##q->is :	p->right##q->left
        -: 8655:						ZERO
        -: 8656:					
        -: 8657:	OR	longest common	longest common	(do p->is and	substrings common to
        -: 8658:		leading		trailing	q->is have same	p->in and q->in
        -: 8659:		(sub)sequence	(sub)sequence	length and	
        -: 8660:		of p->left	of p->right	content) ?	
        -: 8661:		and q->left	and q->right	p->is : NULL	
        -: 8662:
        -: 8663:   If there's anything else we recognize in the tree, all four sequences get set
        -: 8664:   to zero-length sequences.  If there's something we don't recognize in the tree,
        -: 8665:   we just return a zero-length sequence.
        -: 8666:
        -: 8667:   Break ties in favor of infrequent letters (choosing 'zzz' in preference to
        -: 8668:   'aaa')?
        -: 8669:
        -: 8670:   And. . .is it here or someplace that we might ponder "optimizations" such as
        -: 8671:	egrep 'psi|epsilon'	->	egrep 'psi'
        -: 8672:	egrep 'pepsi|epsilon'	->	egrep 'epsi'
        -: 8673:					(Yes, we now find "epsi" as a "string
        -: 8674:					that must occur", but we might also
        -: 8675:					simplify the *entire* r.e. being sought)
        -: 8676:	grep '[c]'		->	grep 'c'
        -: 8677:	grep '(ab|a)b'		->	grep 'ab'
        -: 8678:	grep 'ab*'		->	grep 'a'
        -: 8679:	grep 'a*b'		->	grep 'b'
        -: 8680:
        -: 8681:   There are several issues:
        -: 8682:
        -: 8683:   Is optimization easy (enough)?
        -: 8684:
        -: 8685:   Does optimization actually accomplish anything,
        -: 8686:   or is the automaton you get from "psi|epsilon" (for example)
        -: 8687:   the same as the one you get from "psi" (for example)?
        -: 8688:  
        -: 8689:   Are optimizable r.e.'s likely to be used in real-life situations
        -: 8690:   (something like 'ab*' is probably unlikely; something like is
        -: 8691:   'psi|epsilon' is likelier)? */
        -: 8692:
        -: 8693:static char *
function icatalloc called 492 returned 100% blocks executed 94%
      492: 8694:icatalloc(old, new)
        -: 8695:     char *old;
        -: 8696:     char *new;
        -: 8697:{
        -: 8698:  char *result;
        -: 8699:  int oldsize, newsize;
        -: 8700:
      492: 8701:  newsize = (new == NULL) ? 0 : strlen(new);
      492: 8701-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 8701-block  1
      492: 8701-block  2
      492: 8702:  if (old == NULL)
      492: 8702-block  0
branch  0 taken 40%
branch  1 taken 60%
      293: 8703:    oldsize = 0;
      293: 8703-block  0
      199: 8704:  else if (newsize == 0)
      199: 8704-block  0
branch  0 taken 13%
branch  1 taken 87%
       25: 8705:    return old;
       25: 8705-block  0
      174: 8706:  else	oldsize = strlen(old);
      174: 8706-block  0
      467: 8707:  if (old == NULL)
      467: 8707-block  0
branch  0 taken 37%
branch  1 taken 63%
      293: 8708:    result = (char *) malloc(newsize + 1);
      293: 8708-block  0
        -: 8709:  else
      174: 8710:    result = (char *) realloc((void *) old, oldsize + newsize + 1);
      174: 8710-block  0
      467: 8711:  if (result != NULL && new != NULL)
      467: 8711-block  0
branch  0 taken 100%
branch  1 taken 0%
      467: 8711-block  1
branch  2 taken 0%
branch  3 taken 100%
      467: 8712:    (void) strcpy(result + oldsize, new);
      467: 8712-block  0
      467: 8713:  return result;
      467: 8713-block  0
      492: 8714:}
      492: 8714-block  0
        -: 8715:
        -: 8716:static char *
function icpyalloc called 293 returned 100% blocks executed 100%
      293: 8717:icpyalloc(string)
        -: 8718:     char *string;
        -: 8719:{
      293: 8720:  return icatalloc((char *) NULL, string);
      293: 8720-block  0
        -: 8721:}
        -: 8722:
        -: 8723:static char *
function istrstr called 565 returned 100% blocks executed 100%
      565: 8724:istrstr(lookin, lookfor)
        -: 8725:     char *lookin;
        -: 8726:     char *lookfor;
        -: 8727:{
        -: 8728:  char *cp;
        -: 8729:  int len;
        -: 8730:
      565: 8731:  len = strlen(lookfor);
     3536: 8732:  for (cp = lookin; *cp != '\0'; ++cp)
      565: 8732-block  0
     3536: 8732-block  1
branch  0 taken 88%
branch  1 taken 12%
     2971: 8732-block  2
     3097: 8733:    if (strncmp(cp, lookfor, len) == 0)
     3097: 8733-block  0
branch  0 taken 4%
branch  1 taken 96%
     2971: 8733-block  1
      126: 8734:      return cp;
      126: 8734-block  0
      439: 8735:  return NULL;
      439: 8735-block  0
      565: 8736:}
      565: 8736-block  0
        -: 8737:
        -: 8738:static void
function ifree called 940 returned 100% blocks executed 100%
      940: 8739:ifree(cp)
        -: 8740:     char *cp;
        -: 8741:{
      940: 8742:  if (cp != NULL)
      940: 8742-block  0
branch  0 taken 100%
branch  1 taken 0%
      940: 8743:    free(cp);
      940: 8743-block  0
      940: 8744:}
      940: 8744-block  0
        -: 8745:
        -: 8746:static void
function freelist called 370 returned 100% blocks executed 85%
      370: 8747:freelist(cpp)
        -: 8748:     char **cpp;
        -: 8749:{
        -: 8750:  int i;
        -: 8751:
      370: 8752:  if (cpp == NULL)
      370: 8752-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 8753:    return;
    $$$$$: 8753-block  0
      476: 8754:  for (i = 0; cpp[i] != NULL; ++i)
      370: 8754-block  0
      476: 8754-block  1
branch  0 taken 22%
branch  1 taken 78%
      106: 8754-block  2
        -: 8755:    {
      106: 8756:      free(cpp[i]);
      106: 8757:      cpp[i] = NULL;
      106: 8758:    }
      106: 8758-block  0
      370: 8759:}
      370: 8759-block  0
        -: 8760:
        -: 8761:static char **
function enlist called 232 returned 100% blocks executed 86%
      232: 8762:enlist(cpp, new, len)
        -: 8763:     char **cpp;
        -: 8764:     char *new;
        -: 8765:     int len;
        -: 8766:{
        -: 8767:  int i, j;
        -: 8768:
      232: 8769:  if (cpp == NULL)
      232: 8769-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8770:    return NULL;
    $$$$$: 8770-block  0
      232: 8771:  if ((new = icpyalloc(new)) == NULL)
      232: 8771-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 8772:    {
    #####: 8773:      freelist(cpp);
    #####: 8774:      return NULL;
    $$$$$: 8774-block  0
        -: 8775:    }
      232: 8776:  new[len] = '\0';
        -: 8777:  /* Is there already something in the list that's new (or longer)? */
      503: 8778:  for (i = 0; cpp[i] != NULL; ++i)
      232: 8778-block  0
      503: 8778-block  1
branch  0 taken 63%
branch  1 taken 37%
      271: 8778-block  2
      315: 8779:    if (istrstr(cpp[i], new) != NULL)
      315: 8779-block  0
branch  0 taken 86%
branch  1 taken 14%
      271: 8779-block  1
        -: 8780:      {
       44: 8781:	free(new);
       44: 8782:	return cpp;
       44: 8782-block  0
        -: 8783:      }
        -: 8784:  /* Eliminate any obsoleted strings. */
      188: 8785:  j = 0;
      381: 8786:  while (cpp[j] != NULL)
      188: 8786-block  0
      381: 8786-block  1
branch  0 taken 34%
branch  1 taken 66%
      193: 8786-block  2
      250: 8787:    if (istrstr(new, cpp[j]) == NULL)
      250: 8787-block  0
branch  0 taken 33%
branch  1 taken 67%
      168: 8788:      ++j;
      168: 8788-block  0
        -: 8789:    else
        -: 8790:      {
       82: 8791:	free(cpp[j]);
       82: 8792:	if (--i == j)
       82: 8792-block  0
branch  0 taken 30%
branch  1 taken 70%
       57: 8793:	  break;
       57: 8793-block  0
       25: 8794:	cpp[j] = cpp[i];
       25: 8795:	cpp[i] = NULL;
       25: 8795-block  0
        -: 8796:      }
        -: 8797:  /* Add the new string. */
      188: 8798:  cpp = (char **) realloc((char *) cpp, (i + 2) * sizeof *cpp);
      188: 8799:  if (cpp == NULL)
      188: 8799-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 8800:    return NULL;
    $$$$$: 8800-block  0
      188: 8801:  cpp[i] = new;
      188: 8802:  cpp[i + 1] = NULL;
      188: 8803:  return cpp;
      188: 8803-block  0
      232: 8804:}
      232: 8804-block  0
        -: 8805:
        -: 8806:/* Given pointers to two strings, return a pointer to an allocated
        -: 8807:   list of their distinct common substrings. Return NULL if something
        -: 8808:   seems wild. */
        -: 8809:static char **
function comsubs called 4 returned 100% blocks executed 46%
        4: 8810:comsubs(left, right)
        -: 8811:     char *left;
        -: 8812:     char *right;
        -: 8813:{
        -: 8814:  char **cpp;
        -: 8815:  char *lcp;
        -: 8816:  char *rcp;
        -: 8817:  int i, len;
        -: 8818:
        4: 8819:  if (left == NULL || right == NULL)
        4: 8819-block  0
branch  0 taken 100%
branch  1 taken 0%
        4: 8819-block  1
branch  2 taken 0%
branch  3 taken 100%
    #####: 8820:    return NULL;
    $$$$$: 8820-block  0
        4: 8821:  cpp = (char **) malloc(sizeof *cpp);
        4: 8822:  if (cpp == NULL)
        4: 8822-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8823:    return NULL;
    $$$$$: 8823-block  0
        4: 8824:  cpp[0] = NULL;
       10: 8825:  for (lcp = left; *lcp != '\0'; ++lcp)
        4: 8825-block  0
       10: 8825-block  1
branch  0 taken 40%
branch  1 taken 60%
        6: 8825-block  2
        -: 8826:    {
        6: 8827:      len = 0;
        6: 8828:      rcp = index(right, *lcp);
        6: 8829:      while (rcp != NULL)
        6: 8829-block  0
        6: 8829-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 8829-block  2
        -: 8830:	{
    #####: 8831:	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
    $$$$$: 8831-block  0
    $$$$$: 8831-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 8831-block  2
    $$$$$: 8831-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 8831-block  4
    $$$$$: 8831-block  5
        -: 8832:	    ;
    #####: 8833:	  if (i > len)
    $$$$$: 8833-block  0
branch  0 never executed
branch  1 never executed
    #####: 8834:	    len = i;
    $$$$$: 8834-block  0
    #####: 8835:	  rcp = index(rcp + 1, *lcp);
        -: 8836:	}
        6: 8837:      if (len == 0)
        6: 8837-block  0
branch  0 taken 0%
branch  1 taken 100%
        6: 8838:	continue;
        6: 8838-block  0
    #####: 8839:      if ((cpp = enlist(cpp, lcp, len)) == NULL)
    $$$$$: 8839-block  0
branch  0 never executed
branch  1 never executed
    #####: 8840:	break;
    $$$$$: 8840-block  0
    #####: 8841:    }
    $$$$$: 8841-block  0
        4: 8842:  return cpp;
        4: 8842-block  0
        4: 8843:}
        4: 8843-block  0
        -: 8844:
        -: 8845:static char **
function addlists called 96 returned 100% blocks executed 81%
       96: 8846:addlists(old, new)
        -: 8847:char **old;
        -: 8848:char **new;
        -: 8849:{
        -: 8850:  int i;
        -: 8851:
       96: 8852:  if (old == NULL || new == NULL)
       96: 8852-block  0
branch  0 taken 100%
branch  1 taken 0%
       96: 8852-block  1
branch  2 taken 0%
branch  3 taken 100%
    #####: 8853:    return NULL;
    $$$$$: 8853-block  0
      171: 8854:  for (i = 0; new[i] != NULL; ++i)
       96: 8854-block  0
      171: 8854-block  1
branch  0 taken 56%
branch  1 taken 44%
       75: 8854-block  2
        -: 8855:    {
       75: 8856:      old = enlist(old, new[i], strlen(new[i]));
       75: 8857:      if (old == NULL)
       75: 8857-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 8858:	break;
    $$$$$: 8858-block  0
       75: 8859:    }
       75: 8859-block  0
       96: 8860:  return old;
       96: 8860-block  0
       96: 8861:}
       96: 8861-block  0
        -: 8862:
        -: 8863:/* Given two lists of substrings, return a new list giving substrings
        -: 8864:   common to both. */
        -: 8865:static char **
function inboth called 12 returned 100% blocks executed 78%
       12: 8866:inboth(left, right)
        -: 8867:     char **left;
        -: 8868:     char **right;
        -: 8869:{
        -: 8870:  char **both;
        -: 8871:  char **temp;
        -: 8872:  int lnum, rnum;
        -: 8873:
       12: 8874:  if (left == NULL || right == NULL)
       12: 8874-block  0
branch  0 taken 100%
branch  1 taken 0%
       12: 8874-block  1
branch  2 taken 0%
branch  3 taken 100%
    #####: 8875:    return NULL;
    $$$$$: 8875-block  0
       12: 8876:  both = (char **) malloc(sizeof *both);
       12: 8877:  if (both == NULL)
       12: 8877-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8878:    return NULL;
    $$$$$: 8878-block  0
       12: 8879:  both[0] = NULL;
       15: 8880:  for (lnum = 0; left[lnum] != NULL; ++lnum)
       12: 8880-block  0
       15: 8880-block  1
branch  0 taken 80%
branch  1 taken 20%
        3: 8880-block  2
        -: 8881:    {
        7: 8882:      for (rnum = 0; right[rnum] != NULL; ++rnum)
        3: 8882-block  0
        7: 8882-block  1
branch  0 taken 57%
branch  1 taken 43%
        4: 8882-block  2
        -: 8883:	{
        4: 8884:	  temp = comsubs(left[lnum], right[rnum]);
        4: 8885:	  if (temp == NULL)
        4: 8885-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 8886:	    {
    #####: 8887:	      freelist(both);
    #####: 8888:	      return NULL;
    $$$$$: 8888-block  0
        -: 8889:	    }
        4: 8890:	  both = addlists(both, temp);
        4: 8891:	  freelist(temp);
        4: 8892:	  if (both == NULL)
        4: 8892-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8893:	    return NULL;
    $$$$$: 8893-block  0
        4: 8894:	}
        4: 8894-block  0
        3: 8895:    }
        3: 8895-block  0
       12: 8896:  return both;
       12: 8896-block  0
       12: 8897:}
       12: 8897-block  0
        -: 8898:
        -: 8899:typedef struct
        -: 8900:{
        -: 8901:  char **in;
        -: 8902:  char *left;
        -: 8903:  char *right;
        -: 8904:  char *is;
        -: 8905:} must;
        -: 8906:
        -: 8907:static void
function resetmust called 119 returned 100% blocks executed 100%
      119: 8908:resetmust(mp)
        -: 8909:must *mp;
        -: 8910:{
      119: 8911:  mp->left[0] = mp->right[0] = mp->is[0] = '\0';
      119: 8912:  freelist(mp->in);
      119: 8913:}
      119: 8913-block  0
        -: 8914:
        -: 8915:static void
function dfamust called 3 returned 100% blocks executed 70%
        3: 8916:dfamust(dfa)
        -: 8917:struct dfa *dfa;
        -: 8918:{
        -: 8919:  must *musts;
        -: 8920:  must *mp;
        -: 8921:  char *result;
        -: 8922:  int ri;
        -: 8923:  int i;
        -: 8924:  int exact;
        -: 8925:  token t;
        -: 8926:  static must must0;
        -: 8927:  struct dfamust *dm;
        -: 8928:
        3: 8929:  result = "";
        3: 8930:  exact = 0;
        3: 8931:  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
        3: 8932:  if (musts == NULL)
        3: 8932-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8933:    return;
    $$$$$: 8933-block  0
        3: 8934:  mp = musts;
      238: 8935:  for (i = 0; i <= dfa->tindex; ++i)
        3: 8935-block  0
      238: 8935-block  1
branch  0 taken 99%
branch  1 taken 1%
      235: 8935-block  2
      235: 8936:    mp[i] = must0;
      235: 8936-block  0
      238: 8937:  for (i = 0; i <= dfa->tindex; ++i)
        3: 8937-block  0
      238: 8937-block  1
branch  0 taken 99%
branch  1 taken 1%
      235: 8937-block  2
        -: 8938:    {
      235: 8939:      mp[i].in = (char **) malloc(sizeof *mp[i].in);
      235: 8940:      mp[i].left = malloc(2);
      235: 8941:      mp[i].right = malloc(2);
      235: 8942:      mp[i].is = malloc(2);
      470: 8943:      if (mp[i].in == NULL || mp[i].left == NULL ||
      235: 8943-block  0
branch  0 taken 100%
branch  1 taken 0%
      235: 8943-block  1
branch  2 taken 100%
branch  3 taken 0%
      235: 8943-block  2
branch  4 taken 0%
branch  5 taken 100%
      235: 8944:	  mp[i].right == NULL || mp[i].is == NULL)
      235: 8944-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8945:	goto done;
    $$$$$: 8945-block  0
      235: 8946:      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\0';
      235: 8947:      mp[i].in[0] = NULL;
      235: 8948:    }
      235: 8948-block  0
        -: 8949:#ifdef DEBUG
        -: 8950:  fprintf(stderr, "dfamust:\n");
        -: 8951:  for (i = 0; i < dfa->tindex; ++i)
        -: 8952:    {
        -: 8953:      fprintf(stderr, " %d:", i);
        -: 8954:      prtok(dfa->tokens[i]);
        -: 8955:    }
        -: 8956:  putc('\n', stderr);
        -: 8957:#endif
      229: 8958:  for (ri = 0; ri < dfa->tindex; ++ri)
        3: 8958-block  0
      229: 8958-block  1
branch  0 taken 100%
branch  1 taken 0%
      226: 8958-block  2
        -: 8959:    {
      229: 8960:      switch (t = dfa->tokens[ri])
      229: 8960-block  0
branch  0 taken 1%
branch  1 taken 5%
branch  2 taken 5%
branch  3 taken 0%
branch  4 taken 45%
branch  5 taken 1%
branch  6 taken 40%
branch  7 taken 1%
    $$$$$: 8960-block  1
    $$$$$: 8960-block  2
    $$$$$: 8960-block  3
    $$$$$: 8960-block  4
    $$$$$: 8960-block  5
    $$$$$: 8960-block  6
    $$$$$: 8960-block  7
    $$$$$: 8960-block  8
    $$$$$: 8960-block  9
    $$$$$: 8960-block 10
        -: 8961:	{
        -: 8962:	case LPAREN:
        -: 8963:	case RPAREN:
    #####: 8964:	  goto done;		/* "cannot happen" */
    $$$$$: 8964-block  0
        -: 8965:	case EMPTY:
        -: 8966:	case BEGLINE:
        -: 8967:	case ENDLINE:
        -: 8968:	case BEGWORD:
        -: 8969:	case ENDWORD:
        -: 8970:	case LIMWORD:
        -: 8971:	case NOTLIMWORD:
        -: 8972:	case BACKREF:
        3: 8973:	  resetmust(mp);
        3: 8974:	  break;
        3: 8974-block  0
        -: 8975:	case STAR:
        -: 8976:	case QMARK:
       12: 8977:	  if (mp <= musts)
       12: 8977-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8978:	    goto done;		/* "cannot happen" */
    $$$$$: 8978-block  0
       12: 8979:	  --mp;
       12: 8980:	  resetmust(mp);
       12: 8981:	  break;
       12: 8981-block  0
        -: 8982:	case OR:
        -: 8983:	case ORTOP:
       12: 8984:	  if (mp < &musts[2])
       12: 8984-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 8985:	    goto done;		/* "cannot happen" */
    $$$$$: 8985-block  0
        -: 8986:	  {
        -: 8987:	    char **new;
        -: 8988:	    must *lmp;
        -: 8989:	    must *rmp;
        -: 8990:	    int j, ln, rn, n;
        -: 8991:
       12: 8992:	    rmp = --mp;
       12: 8993:	    lmp = --mp;
        -: 8994:	    /* Guaranteed to be.  Unlikely, but. . . */
       12: 8995:	    if (strcmp(lmp->is, rmp->is) != 0)
       12: 8995-block  0
branch  0 taken 83%
branch  1 taken 17%
        2: 8996:	      lmp->is[0] = '\0';
        2: 8996-block  0
        -: 8997:	    /* Left side--easy */
       12: 8998:	    i = 0;
       12: 8999:	    while (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i])
       12: 8999-block  0
       12: 8999-block  1
branch  0 taken 75%
branch  1 taken 25%
        3: 8999-block  2
       12: 8999-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 8999-block  4
    #####: 9000:	      ++i;
       12: 9001:	    lmp->left[i] = '\0';
        -: 9002:	    /* Right side */
       12: 9003:	    ln = strlen(lmp->right);
       12: 9004:	    rn = strlen(rmp->right);
       12: 9005:	    n = ln;
       12: 9006:	    if (n > rn)
       12: 9006-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9007:	      n = rn;
    $$$$$: 9007-block  0
       12: 9008:	    for (i = 0; i < n; ++i)
       12: 9008-block  0
       12: 9008-block  1
branch  0 taken 83%
branch  1 taken 17%
    $$$$$: 9008-block  2
        2: 9009:	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
        2: 9009-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 9009-block  1
        2: 9010:		break;
        2: 9010-block  0
       12: 9011:	    for (j = 0; j < i; ++j)
       12: 9011-block  0
       12: 9011-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 9011-block  2
    #####: 9012:	      lmp->right[j] = lmp->right[(ln - i) + j];
    $$$$$: 9012-block  0
       12: 9013:	    lmp->right[j] = '\0';
       12: 9014:	    new = inboth(lmp->in, rmp->in);
       12: 9015:	    if (new == NULL)
       12: 9015-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9016:	      goto done;
    $$$$$: 9016-block  0
       12: 9017:	    freelist(lmp->in);
       12: 9018:	    free((char *) lmp->in);
       12: 9019:	    lmp->in = new;
        -: 9020:	  }
       12: 9021:	  break;
       12: 9021-block  0
        -: 9022:	case PLUS:
        3: 9023:	  if (mp <= musts)
        3: 9023-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9024:	    goto done;		/* "cannot happen" */
    $$$$$: 9024-block  0
        3: 9025:	  --mp;
        3: 9026:	  mp->is[0] = '\0';
        3: 9027:	  break;
        3: 9027-block  0
        -: 9028:	case END:
        3: 9029:	  if (mp != &musts[1])
        3: 9029-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 9030:	    goto done;		/* "cannot happen" */
    $$$$$: 9030-block  0
       10: 9031:	  for (i = 0; musts[0].in[i] != NULL; ++i)
        3: 9031-block  0
       10: 9031-block  1
branch  0 taken 70%
branch  1 taken 30%
        7: 9031-block  2
        9: 9032:	    if (strlen(musts[0].in[i]) > strlen(result))
        7: 9032-block  0
branch  0 taken 71%
branch  1 taken 29%
        7: 9032-block  1
        2: 9033:	      result = musts[0].in[i];
        2: 9033-block  0
        3: 9034:	  if (strcmp(result, musts[0].is) == 0)
        3: 9034-block  0
branch  0 taken 67%
branch  1 taken 33%
        2: 9035:	    exact = 1;
        2: 9035-block  0
        3: 9036:	  goto done;
        3: 9036-block  0
        -: 9037:	case CAT:
       92: 9038:	  if (mp < &musts[2])
       92: 9038-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9039:	    goto done;		/* "cannot happen" */
    $$$$$: 9039-block  0
        -: 9040:	  {
        -: 9041:	    must *lmp;
        -: 9042:	    must *rmp;
        -: 9043:
       92: 9044:	    rmp = --mp;
       92: 9045:	    lmp = --mp;
        -: 9046:	    /* In.  Everything in left, plus everything in
        -: 9047:	       right, plus catenation of
        -: 9048:	       left's right and right's left. */
       92: 9049:	    lmp->in = addlists(lmp->in, rmp->in);
       92: 9050:	    if (lmp->in == NULL)
       92: 9050-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9051:	      goto done;
    $$$$$: 9051-block  0
       92: 9052:	    if (lmp->right[0] != '\0' &&
       92: 9052-block  0
branch  0 taken 82%
branch  1 taken 18%
       75: 9052-block  1
branch  2 taken 19%
branch  3 taken 81%
       75: 9053:		rmp->left[0] != '\0')
        -: 9054:	      {
        -: 9055:		char *tp;
        -: 9056:
       61: 9057:		tp = icpyalloc(lmp->right);
       61: 9058:		if (tp == NULL)
       61: 9058-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9059:		  goto done;
    $$$$$: 9059-block  0
       61: 9060:		tp = icatalloc(tp, rmp->left);
       61: 9061:		if (tp == NULL)
       61: 9061-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9062:		  goto done;
    $$$$$: 9062-block  0
      122: 9063:		lmp->in = enlist(lmp->in, tp,
       61: 9064:				 strlen(tp));
       61: 9065:		free(tp);
       61: 9066:		if (lmp->in == NULL)
       61: 9066-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9067:		  goto done;
    $$$$$: 9067-block  0
       61: 9068:	      }
       61: 9068-block  0
        -: 9069:	    /* Left-hand */
       92: 9070:	    if (lmp->is[0] != '\0')
       92: 9070-block  0
branch  0 taken 71%
branch  1 taken 29%
        -: 9071:	      {
       54: 9072:		lmp->left = icatalloc(lmp->left,
       27: 9073:				      rmp->left);
       27: 9074:		if (lmp->left == NULL)
       27: 9074-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9075:		  goto done;
    $$$$$: 9075-block  0
       27: 9076:	      }
       27: 9076-block  0
        -: 9077:	    /* Right-hand */
       92: 9078:	    if (rmp->is[0] == '\0')
       92: 9078-block  0
branch  0 taken 80%
branch  1 taken 20%
       18: 9079:	      lmp->right[0] = '\0';
       18: 9079-block  0
       92: 9080:	    lmp->right = icatalloc(lmp->right, rmp->right);
       92: 9081:	    if (lmp->right == NULL)
       92: 9081-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9082:	      goto done;
    $$$$$: 9082-block  0
        -: 9083:	    /* Guaranteed to be */
       92: 9084:	    if (lmp->is[0] != '\0' && rmp->is[0] != '\0')
       92: 9084-block  0
branch  0 taken 29%
branch  1 taken 71%
       27: 9084-block  1
branch  2 taken 30%
branch  3 taken 70%
        -: 9085:	      {
       19: 9086:		lmp->is = icatalloc(lmp->is, rmp->is);
       19: 9087:		if (lmp->is == NULL)
       19: 9087-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9088:		  goto done;
    $$$$$: 9088-block  0
       19: 9089:	      }
       19: 9089-block  0
        -: 9090:	    else
       73: 9091:	      lmp->is[0] = '\0';
       73: 9091-block  0
        -: 9092:	  }
       92: 9093:	  break;
       92: 9093-block  0
        -: 9094:	default:
      104: 9095:	  if (t < END)
      104: 9095-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 9096:	    {
        -: 9097:	      /* "cannot happen" */
    #####: 9098:	      goto done;
    $$$$$: 9098-block  0
        -: 9099:	    }
      104: 9100:	  else if (t == '\0')
      104: 9100-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 9101:	    {
        -: 9102:	      /* not on *my* shift */
    #####: 9103:	      goto done;
    $$$$$: 9103-block  0
        -: 9104:	    }
      104: 9105:	  else if (t >= CSET)
      104: 9105-block  0
branch  0 taken 8%
branch  1 taken 92%
        -: 9106:	    {
        -: 9107:	      /* easy enough */
        8: 9108:	      resetmust(mp);
        8: 9109:	    }
        8: 9109-block  0
        -: 9110:	  else
        -: 9111:	    {
        -: 9112:	      /* plain character */
       96: 9113:	      resetmust(mp);
       96: 9114:	      mp->is[0] = mp->left[0] = mp->right[0] = t;
       96: 9115:	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
       96: 9116:	      mp->in = enlist(mp->in, mp->is, 1);
       96: 9117:	      if (mp->in == NULL)
       96: 9117-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9118:		goto done;
    $$$$$: 9118-block  0
        -: 9119:	    }
      104: 9120:	  break;
      104: 9120-block  0
        -: 9121:	}
        -: 9122:#ifdef DEBUG
        -: 9123:      fprintf(stderr, " node: %d:", ri);
        -: 9124:      prtok(dfa->tokens[ri]);
        -: 9125:      fprintf(stderr, "\n  in:");
        -: 9126:      for (i = 0; mp->in[i]; ++i)
        -: 9127:	fprintf(stderr, " \"%s\"", mp->in[i]);
        -: 9128:      fprintf(stderr, "\n  is: \"%s\"\n", mp->is);
        -: 9129:      fprintf(stderr, "  left: \"%s\"\n", mp->left);
        -: 9130:      fprintf(stderr, "  right: \"%s\"\n", mp->right);
        -: 9131:#endif
      226: 9132:      ++mp;
      226: 9133:    }
      226: 9133-block  0
    $$$$$: 9133-block  1
        -: 9134: done:
        3: 9135:  if (strlen(result))
        3: 9135-block  0
branch  0 taken 33%
branch  1 taken 67%
        -: 9136:    {
        2: 9137:      dm = (struct dfamust *) malloc(sizeof (struct dfamust));
        2: 9138:      dm->exact = exact;
        2: 9139:      dm->must = malloc(strlen(result) + 1);
        2: 9140:      strcpy(dm->must, result);
        2: 9141:      dm->next = dfa->musts;
        2: 9142:      dfa->musts = dm;
        2: 9143:    }
        2: 9143-block  0
        3: 9144:  mp = musts;
      238: 9145:  for (i = 0; i <= dfa->tindex; ++i)
        3: 9145-block  0
      238: 9145-block  1
branch  0 taken 99%
branch  1 taken 1%
      235: 9145-block  2
        -: 9146:    {
      235: 9147:      freelist(mp[i].in);
      235: 9148:      ifree((char *) mp[i].in);
      235: 9149:      ifree(mp[i].left);
      235: 9150:      ifree(mp[i].right);
      235: 9151:      ifree(mp[i].is);
      235: 9152:    }
      235: 9152-block  0
        3: 9153:  free((char *) mp);
        3: 9154:}
        3: 9154-block  0
        3: 9154-block  1
        -: 9155:/* kwset.c - search for any of a set of keywords.
        -: 9156:   Copyright 1989 Free Software Foundation
        -: 9157:		  Written August 1989 by Mike Haertel.
        -: 9158:
        -: 9159:   This program is free software; you can redistribute it and/or modify
        -: 9160:   it under the terms of the GNU General Public License as published by
        -: 9161:   the Free Software Foundation; either version 1, or (at your option)
        -: 9162:   any later version.
        -: 9163:
        -: 9164:   This program is distributed in the hope that it will be useful,
        -: 9165:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 9166:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 9167:   GNU General Public License for more details.
        -: 9168:
        -: 9169:   You should have received a copy of the GNU General Public License
        -: 9170:   along with this program; if not, write to the Free Software
        -: 9171:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
        -: 9172:
        -: 9173:   The author may be reached (Email) at the address mike@ai.mit.edu,
        -: 9174:   or (US mail) as Mike Haertel c/o Free Software Foundation. */
        -: 9175:
        -: 9176:/* The algorithm implemented by these routines bears a startling resemblence
        -: 9177:   to one discovered by Beate Commentz-Walter, although it is not identical.
        -: 9178:   See "A String Matching Algorithm Fast on the Average," Technical Report,
        -: 9179:   IBM-Germany, Scientific Center Heidelberg, Tiergartenstrasse 15, D-6900
        -: 9180:   Heidelberg, Germany.  See also Aho, A.V., and M. Corasick, "Efficient
        -: 9181:   String Matching:  An Aid to Bibliographic Search," CACM June 1975,
        -: 9182:   Vol. 18, No. 6, which describes the failure function used below. */
        -: 9183:
        -: 9184:
        -: 9185:#ifdef STDC_HEADERS
        -: 9186:#undef RE_DUP_MAX
        -: 9187:#include <limits.h>
        -: 9188:#define flag_limits 1
        -: 9189:#if flag_stdlib==0 
        -: 9190:#include <stdlib.h>
        -: 9191:#define flag_stdlib 1
        -: 9192:#endif
        -: 9193:#else
        -: 9194:#define INT_MAX 2147483647
        -: 9195:#define UCHAR_MAX 255
        -: 9196:#ifdef __STDC__
        -: 9197:#include <stddef.h>
        -: 9198:#else
        -: 9199:#if flag_systypes==0
        -: 9200:#include <sys/types.h>
        -: 9201:#define flag_systypes 1
        -: 9202:#endif
        -: 9203:#endif
        -: 9204:extern char *malloc();
        -: 9205:extern void free();
        -: 9206:#endif
        -: 9207:
        -: 9208:#ifdef HAVE_MEMCHR
        -: 9209:#if flag_string==0
        -: 9210:#include <string.h>
        -: 9211:#define flag_string 1
        -: 9212:#endif
        -: 9213:#ifdef NEED_MEMORY_H
        -: 9214:#if flag_memory==0
        -: 9215:#include <memory.h>
        -: 9216:#define flag_memory 1
        -: 9217:#endif
        -: 9218:#endif
        -: 9219:#else
        -: 9220:#ifdef __STDC__
        -: 9221:extern void *memchr();
        -: 9222:#else
        -: 9223:extern char *memchr();
        -: 9224:#endif
        -: 9225:#endif
        -: 9226:
        -: 9227:#ifdef GREP
        -: 9228:extern char *xmalloc();
        -: 9229:#define malloc xmalloc
        -: 9230:#endif
        -: 9231:
        -: 9232:#include "kwset.h"
        -: 9233:#include "obstack.h"
        -: 9234:
        -: 9235:#define NCHAR (UCHAR_MAX + 1)
        -: 9236:#define obstack_chunk_alloc malloc
        -: 9237:#define obstack_chunk_free free
        -: 9238:
        -: 9239:/* Balanced tree of edges and labels leaving a given trie node. */
        -: 9240:struct tree
        -: 9241:{
        -: 9242:  struct tree *llink;		/* Left link; MUST be first field. */
        -: 9243:  struct tree *rlink;		/* Right link (to larger labels). */
        -: 9244:  struct trie *trie;		/* Trie node pointed to by this edge. */
        -: 9245:  unsigned char label;		/* Label on this edge. */
        -: 9246:  char balance;			/* Difference in depths of subtrees. */
        -: 9247:};
        -: 9248:
        -: 9249:/* Node of a trie representing a set of reversed keywords. */
        -: 9250:struct trie
        -: 9251:{
        -: 9252:  unsigned int accepting;	/* Word index of accepted word, or zero. */
        -: 9253:  struct tree *links;		/* Tree of edges leaving this node. */
        -: 9254:  struct trie *parent;		/* Parent of this node. */
        -: 9255:  struct trie *next;		/* List of all trie nodes in level order. */
        -: 9256:  struct trie *fail;		/* Aho-Corasick failure function. */
        -: 9257:  int depth;			/* Depth of this node from the root. */
        -: 9258:  int shift;			/* Shift function for search failures. */
        -: 9259:  int maxshift;			/* Max shift of self and descendents. */
        -: 9260:};
        -: 9261:
        -: 9262:/* Structure returned opaquely to the caller, containing everything. */
        -: 9263:struct kwset
        -: 9264:{
        -: 9265:  struct obstack obstack;	/* Obstack for node allocation. */
        -: 9266:  int words;			/* Number of words in the trie. */
        -: 9267:  struct trie *trie;		/* The trie itself. */
        -: 9268:  int mind;			/* Minimum depth of an accepting node. */
        -: 9269:  int maxd;			/* Maximum depth of any node. */
        -: 9270:  unsigned char delta[NCHAR];	/* Delta table for rapid search. */
        -: 9271:  struct trie *next[NCHAR];	/* Table of children of the root. */
        -: 9272:  char *target;			/* Target string if there's only one. */
        -: 9273:  int mind2;			/* Used in Boyer-Moore search for one string. */
        -: 9274:  char *trans;			/* Character translation table. */
        -: 9275:};
        -: 9276:
        -: 9277:/* Allocate and initialize a keyword set object, returning an opaque
        -: 9278:   pointer to it.  Return NULL if memory is not available. */
        -: 9279:kwset_t
function kwsalloc called 4 returned 100% blocks executed 64%
        4: 9280:kwsalloc(trans)
        -: 9281:     char *trans;
        -: 9282:{
        -: 9283:  struct kwset *kwset;
        -: 9284:
        4: 9285:  kwset = (struct kwset *) malloc(sizeof (struct kwset));
        4: 9286:  if (!kwset)
        4: 9286-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9287:    return 0;
    $$$$$: 9287-block  0
        -: 9288:
        4: 9289:  obstack_init(&kwset->obstack);
        4: 9290:  kwset->words = 0;
        4: 9291:  kwset->trie
        4: 9292:    = (struct trie *) obstack_alloc(&kwset->obstack, sizeof (struct trie));
        4: 9292-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 9292-block  1
        4: 9292-block  2
        4: 9292-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 9292-block  4
        4: 9292-block  5
branch  4 taken 0%
branch  5 taken 100%
    $$$$$: 9292-block  6
        4: 9292-block  7
        4: 9293:  if (!kwset->trie)
        4: 9293-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 9294:    {
    #####: 9295:      kwsfree((kwset_t) kwset);
    #####: 9296:      return 0;
    $$$$$: 9296-block  0
        -: 9297:    }
        4: 9298:  kwset->trie->accepting = 0;
        4: 9299:  kwset->trie->links = 0;
        4: 9300:  kwset->trie->parent = 0;
        4: 9301:  kwset->trie->next = 0;
        4: 9302:  kwset->trie->fail = 0;
        4: 9303:  kwset->trie->depth = 0;
        4: 9304:  kwset->trie->shift = 0;
        4: 9305:  kwset->mind = INT_MAX;
        4: 9306:  kwset->maxd = -1;
        4: 9307:  kwset->target = 0;
        4: 9308:  kwset->trans = trans;
        -: 9309:
        4: 9310:  return (kwset_t) kwset;
        4: 9310-block  0
        4: 9311:}
        4: 9311-block  0
        -: 9312:
        -: 9313:/* Add the given string to the contents of the keyword set.  Return NULL
        -: 9314:   for success, an error message otherwise. */
        -: 9315:char *
function kwsincr called 4 returned 100% blocks executed 50%
        4: 9316:kwsincr(kws, text, len)
        -: 9317:     kwset_t kws;
        -: 9318:     char *text;
        -: 9319:     size_t len;
        -: 9320:{
        -: 9321:  struct kwset *kwset;
        -: 9322:  register struct trie *trie;
        -: 9323:  register unsigned char label;
        -: 9324:  register struct tree *link;
        -: 9325:  register int depth;
        -: 9326:  struct tree *links[12];
        -: 9327:  enum { L, R } dirs[12];
        -: 9328:  struct tree *t, *r, *l, *rl, *lr;
        -: 9329:
        4: 9330:  kwset = (struct kwset *) kws;
        4: 9331:  trie = kwset->trie;
        4: 9332:  text += len;
        -: 9333:
        -: 9334:  /* Descend the trie (built of reversed keywords) character-by-character,
        -: 9335:     installing new nodes when necessary. */
      196: 9336:  while (len--)
        4: 9336-block  0
      196: 9336-block  1
branch  0 taken 98%
branch  1 taken 2%
      192: 9336-block  2
        -: 9337:    {
      192: 9338:      label = kwset->trans ? kwset->trans[(unsigned char) *--text] : *--text;
      192: 9338-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 9338-block  1
      192: 9338-block  2
        -: 9339:
        -: 9340:      /* Descend the tree of outgoing links for this trie node,
        -: 9341:	 looking for the current character and keeping track
        -: 9342:	 of the path followed. */
      192: 9343:      link = trie->links;
      192: 9344:      links[0] = (struct tree *) &trie->links;
      192: 9345:      dirs[0] = L;
      192: 9346:      depth = 1;
        -: 9347:
      192: 9348:      while (link && label != link->label)
      192: 9348-block  0
      192: 9348-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 9348-block  2
      192: 9348-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 9348-block  4
        -: 9349:	{
    #####: 9350:	  links[depth] = link;
    #####: 9351:	  if (label < link->label)
    $$$$$: 9351-block  0
branch  0 never executed
branch  1 never executed
    #####: 9352:	    dirs[depth++] = L, link = link->llink;
    $$$$$: 9352-block  0
        -: 9353:	  else
    #####: 9354:	    dirs[depth++] = R, link = link->rlink;
    $$$$$: 9354-block  0
        -: 9355:	}
        -: 9356:
        -: 9357:      /* The current character doesn't have an outgoing link at
        -: 9358:	 this trie node, so build a new trie node and install
        -: 9359:	 a link in the current trie node's tree. */
      192: 9360:      if (!link)
      192: 9360-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 9361:	{
      192: 9362:	  link = (struct tree *) obstack_alloc(&kwset->obstack,
      192: 9362-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 9362-block  1
      192: 9362-block  2
      192: 9362-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 9362-block  4
      192: 9362-block  5
branch  4 taken 0%
branch  5 taken 100%
    $$$$$: 9362-block  6
      192: 9362-block  7
        -: 9363:					       sizeof (struct tree));
      192: 9364:	  if (!link)
      192: 9364-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9365:	    return "memory exhausted";
    $$$$$: 9365-block  0
      192: 9366:	  link->llink = 0;
      192: 9367:	  link->rlink = 0;
      192: 9368:	  link->trie = (struct trie *) obstack_alloc(&kwset->obstack,
      192: 9368-block  0
branch  0 taken 1%
branch  1 taken 99%
        2: 9368-block  1
      190: 9368-block  2
      192: 9368-block  3
branch  2 taken 100%
branch  3 taken 0%
    $$$$$: 9368-block  4
      192: 9368-block  5
branch  4 taken 0%
branch  5 taken 100%
    $$$$$: 9368-block  6
      192: 9368-block  7
        -: 9369:						     sizeof (struct trie));
      192: 9370:	  if (!link->trie)
      192: 9370-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####: 9371:	    return "memory exhausted";
    $$$$$: 9371-block  0
      192: 9372:	  link->trie->accepting = 0;
      192: 9373:	  link->trie->links = 0;
      192: 9374:	  link->trie->parent = trie;
      192: 9375:	  link->trie->next = 0;
      192: 9376:	  link->trie->fail = 0;
      192: 9377:	  link->trie->depth = trie->depth + 1;
      192: 9378:	  link->trie->shift = 0;
      192: 9379:	  link->label = label;
      192: 9380:	  link->balance = 0;
        -: 9381:
        -: 9382:	  /* Install the new tree node in its parent. */
      192: 9383:	  if (dirs[--depth] == L)
      192: 9383-block  0
branch  0 taken 0%
branch  1 taken 100%
      192: 9384:	    links[depth]->llink = link;
      192: 9384-block  0
        -: 9385:	  else
    #####: 9386:	    links[depth]->rlink = link;
    $$$$$: 9386-block  0
        -: 9387:
        -: 9388:	  /* Back up the tree fixing the balance flags. */
      192: 9389:	  while (depth && !links[depth]->balance)
      192: 9389-block  0
      192: 9389-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$: 9389-block  2
      192: 9389-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 9389-block  4
        -: 9390:	    {
    #####: 9391:	      if (dirs[depth] == L)
    $$$$$: 9391-block  0
branch  0 never executed
branch  1 never executed
    #####: 9392:		--links[depth]->balance;
    $$$$$: 9392-block  0
        -: 9393:	      else
    #####: 9394:		++links[depth]->balance;
    $$$$$: 9394-block  0
    #####: 9395:	      --depth;
        -: 9396:	    }
        -: 9397:
        -: 9398:	  /* Rebalance the tree by pointer rotations if necessary. */
      192: 9399:	  if (depth && ((dirs[depth] == L && --links[depth]->balance)
      192: 9399-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 9399-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 9399-block  2
branch  4 never executed
branch  5 never executed
    #####: 9400:			|| (dirs[depth] == R && ++links[depth]->balance)))
    $$$$$: 9400-block  0
    $$$$$: 9400-block  1
    $$$$$: 9400-block  2
branch  0 never executed
branch  1 never executed
        -: 9401:	    {
    #####: 9402:	      switch (links[depth]->balance)
    $$$$$: 9402-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 9403:		{
        -: 9404:		case (char) -2:
    #####: 9405:		  switch (dirs[depth + 1])
    $$$$$: 9405-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 9406:		    {
        -: 9407:		    case L:
    #####: 9408:		      r = links[depth], t = r->llink, rl = t->rlink;
    #####: 9409:		      t->rlink = r, r->llink = rl;
    #####: 9410:		      t->balance = r->balance = 0;
    #####: 9411:		      break;
    $$$$$: 9411-block  0
        -: 9412:		    case R:
    #####: 9413:		      r = links[depth], l = r->llink, t = l->rlink;
    #####: 9414:		      rl = t->rlink, lr = t->llink;
    #####: 9415:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
    #####: 9416:		      l->balance = t->balance != 1 ? 0 : -1;
    #####: 9417:		      r->balance = t->balance != (char) -1 ? 0 : 1;
    #####: 9418:		      t->balance = 0;
    #####: 9419:		      break;
    $$$$$: 9419-block  0
        -: 9420:		    }
    #####: 9421:		  break;
    $$$$$: 9421-block  0
        -: 9422:		case 2:
    #####: 9423:		  switch (dirs[depth + 1])
    $$$$$: 9423-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 9424:		    {
        -: 9425:		    case R:
    #####: 9426:		      l = links[depth], t = l->rlink, lr = t->llink;
    #####: 9427:		      t->llink = l, l->rlink = lr;
    #####: 9428:		      t->balance = l->balance = 0;
    #####: 9429:		      break;
    $$$$$: 9429-block  0
        -: 9430:		    case L:
    #####: 9431:		      l = links[depth], r = l->rlink, t = r->llink;
    #####: 9432:		      lr = t->llink, rl = t->rlink;
    #####: 9433:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
    #####: 9434:		      l->balance = t->balance != 1 ? 0 : -1;
    #####: 9435:		      r->balance = t->balance != (char) -1 ? 0 : 1;
    #####: 9436:		      t->balance = 0;
    #####: 9437:		      break;
    $$$$$: 9437-block  0
        -: 9438:		    }
    #####: 9439:		  break;
    $$$$$: 9439-block  0
        -: 9440:		}
        -: 9441:
    #####: 9442:	      if (dirs[depth - 1] == L)
    $$$$$: 9442-block  0
branch  0 never executed
branch  1 never executed
    #####: 9443:		links[depth - 1]->llink = t;
    $$$$$: 9443-block  0
        -: 9444:	      else
    #####: 9445:		links[depth - 1]->rlink = t;
    $$$$$: 9445-block  0
    #####: 9446:	    }
    $$$$$: 9446-block  0
      192: 9447:	}
      192: 9447-block  0
        -: 9448:
      192: 9449:      trie = link->trie;
        -: 9450:    }
        -: 9451:
        -: 9452:  /* Mark the node we finally reached as accepting, encoding the
        -: 9453:     index number of this word in the keyword set so far. */
        4: 9454:  if (!trie->accepting)
        4: 9454-block  0
branch  0 taken 0%
branch  1 taken 100%
        4: 9455:    trie->accepting = 1 + 2 * kwset->words;
        4: 9455-block  0
        4: 9456:  ++kwset->words;
        -: 9457:
        -: 9458:  /* Keep track of the longest and shortest string of the keyword set. */
        4: 9459:  if (trie->depth < kwset->mind)
        4: 9459-block  0
branch  0 taken 0%
branch  1 taken 100%
        4: 9460:    kwset->mind = trie->depth;
        4: 9460-block  0
        4: 9461:  if (trie->depth > kwset->maxd)
        4: 9461-block  0
branch  0 taken 0%
branch  1 taken 100%
        4: 9462:    kwset->maxd = trie->depth;
        4: 9462-block  0
        -: 9463:
        4: 9464:  return 0;
        4: 9464-block  0
        4: 9465:}
        4: 9465-block  0
        -: 9466:
        -: 9467:/* Enqueue the trie nodes referenced from the given tree in the
        -: 9468:   given queue. */
        -: 9469:static void
function enqueue called 0 returned 0% blocks executed 0%
    #####: 9470:enqueue(tree, last)
        -: 9471:     struct tree *tree;
        -: 9472:     struct trie **last;
        -: 9473:{
    #####: 9474:  if (!tree)
    $$$$$: 9474-block  0
branch  0 never executed
branch  1 never executed
    #####: 9475:    return;
    $$$$$: 9475-block  0
    #####: 9476:  enqueue(tree->llink, last);
    #####: 9477:  enqueue(tree->rlink, last);
    #####: 9478:  (*last) = (*last)->next = tree->trie;
    #####: 9479:}
    $$$$$: 9479-block  0
    $$$$$: 9479-block  1
        -: 9480:
        -: 9481:/* Compute the Aho-Corasick failure function for the trie nodes referenced
        -: 9482:   from the given tree, given the failure function for their parent as
        -: 9483:   well as a last resort failure node. */
        -: 9484:static void
function treefails called 0 returned 0% blocks executed 0%
    #####: 9485:treefails(tree, fail, recourse)
        -: 9486:     register struct tree *tree;
        -: 9487:     struct trie *fail;
        -: 9488:     struct trie *recourse;
        -: 9489:{
        -: 9490:  register struct tree *link;
        -: 9491:
    #####: 9492:  if (!tree)
    $$$$$: 9492-block  0
branch  0 never executed
branch  1 never executed
    #####: 9493:    return;
    $$$$$: 9493-block  0
        -: 9494:
    #####: 9495:  treefails(tree->llink, fail, recourse);
    #####: 9496:  treefails(tree->rlink, fail, recourse);
        -: 9497:
        -: 9498:  /* Find, in the chain of fails going back to the root, the first
        -: 9499:     node that has a descendent on the current label. */
    #####: 9500:  while (fail)
    $$$$$: 9500-block  0
    $$$$$: 9500-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9500-block  2
        -: 9501:    {
    #####: 9502:      link = fail->links;
    #####: 9503:      while (link && tree->label != link->label)
    $$$$$: 9503-block  0
    $$$$$: 9503-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9503-block  2
    $$$$$: 9503-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 9503-block  4
    #####: 9504:	if (tree->label < link->label)
    $$$$$: 9504-block  0
branch  0 never executed
branch  1 never executed
    #####: 9505:	  link = link->llink;
    $$$$$: 9505-block  0
        -: 9506:	else
    #####: 9507:	  link = link->rlink;
    $$$$$: 9507-block  0
    #####: 9508:      if (link)
    $$$$$: 9508-block  0
branch  0 never executed
branch  1 never executed
        -: 9509:	{
    #####: 9510:	  tree->trie->fail = link->trie;
    #####: 9511:	  return;
    $$$$$: 9511-block  0
        -: 9512:	}
    #####: 9513:      fail = fail->fail;
        -: 9514:    }
        -: 9515:
    #####: 9516:  tree->trie->fail = recourse;
    #####: 9517:}
    $$$$$: 9517-block  0
    $$$$$: 9517-block  1
        -: 9518:
        -: 9519:/* Set delta entries for the links of the given tree such that
        -: 9520:   the preexisting delta value is larger than the current depth. */
        -: 9521:static void
function treedelta called 0 returned 0% blocks executed 0%
    #####: 9522:treedelta(tree, depth, delta)
        -: 9523:     register struct tree *tree;
        -: 9524:     register unsigned int depth;
        -: 9525:     unsigned char delta[];
        -: 9526:{
    #####: 9527:  if (!tree)
    $$$$$: 9527-block  0
branch  0 never executed
branch  1 never executed
    #####: 9528:    return;
    $$$$$: 9528-block  0
    #####: 9529:  treedelta(tree->llink, depth, delta);
    #####: 9530:  treedelta(tree->rlink, depth, delta);
    #####: 9531:  if (depth < delta[tree->label])
    $$$$$: 9531-block  0
branch  0 never executed
branch  1 never executed
    #####: 9532:    delta[tree->label] = depth;
    $$$$$: 9532-block  0
    #####: 9533:}
    $$$$$: 9533-block  0
        -: 9534:
        -: 9535:/* Return true if A has every label in B. */
        -: 9536:static int
function hasevery called 0 returned 0% blocks executed 0%
    #####: 9537:hasevery(a, b)
        -: 9538:     register struct tree *a;
        -: 9539:     register struct tree *b;
        -: 9540:{
    #####: 9541:  if (!b)
    $$$$$: 9541-block  0
branch  0 never executed
branch  1 never executed
    #####: 9542:    return 1;
    $$$$$: 9542-block  0
    #####: 9543:  if (!hasevery(a, b->llink))
    $$$$$: 9543-block  0
branch  0 never executed
branch  1 never executed
    #####: 9544:    return 0;
    $$$$$: 9544-block  0
    #####: 9545:  if (!hasevery(a, b->rlink))
    $$$$$: 9545-block  0
branch  0 never executed
branch  1 never executed
    #####: 9546:    return 0;
    $$$$$: 9546-block  0
    #####: 9547:  while (a && b->label != a->label)
    $$$$$: 9547-block  0
    $$$$$: 9547-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9547-block  2
    $$$$$: 9547-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 9547-block  4
    #####: 9548:    if (b->label < a->label)
    $$$$$: 9548-block  0
branch  0 never executed
branch  1 never executed
    #####: 9549:      a = a->llink;
    $$$$$: 9549-block  0
        -: 9550:    else
    #####: 9551:      a = a->rlink;
    $$$$$: 9551-block  0
    #####: 9552:  return !!a;
    $$$$$: 9552-block  0
    #####: 9553:}
    $$$$$: 9553-block  0
        -: 9554:
        -: 9555:/* Compute a vector, indexed by character code, of the trie nodes
        -: 9556:   referenced from the given tree. */
        -: 9557:static void
function treenext called 0 returned 0% blocks executed 0%
    #####: 9558:treenext(tree, next)
        -: 9559:     struct tree *tree;
        -: 9560:     struct trie *next[];
        -: 9561:{
    #####: 9562:  if (!tree)
    $$$$$: 9562-block  0
branch  0 never executed
branch  1 never executed
    #####: 9563:    return;
    $$$$$: 9563-block  0
    #####: 9564:  treenext(tree->llink, next);
    #####: 9565:  treenext(tree->rlink, next);
    #####: 9566:  next[tree->label] = tree->trie;
    #####: 9567:}
    $$$$$: 9567-block  0
    $$$$$: 9567-block  1
        -: 9568:
        -: 9569:/* Compute the shift for each trie node, as well as the delta
        -: 9570:   table and next cache for the given keyword set. */
        -: 9571:char *
function kwsprep called 4 returned 100% blocks executed 40%
        4: 9572:kwsprep(kws)
        -: 9573:     kwset_t kws;
        -: 9574:{
        -: 9575:  register struct kwset *kwset;
        -: 9576:  register int i;
        -: 9577:  register struct trie *curr, *fail;
        -: 9578:  register char *trans;
        -: 9579:  unsigned char delta[NCHAR];
        -: 9580:  struct trie *last, *next[NCHAR];
        -: 9581:
        4: 9582:  kwset = (struct kwset *) kws;
        -: 9583:
        -: 9584:  /* Initial values for the delta table; will be changed later.  The
        -: 9585:     delta entry for a given character is the smallest depth of any
        -: 9586:     node at which an outgoing edge is labeled by that character. */
        4: 9587:  if (kwset->mind < 256)
        4: 9587-block  0
branch  0 taken 100%
branch  1 taken 0%
     1028: 9588:    for (i = 0; i < NCHAR; ++i)
        4: 9588-block  0
     1028: 9588-block  1
branch  0 taken 99%
branch  1 taken 1%
     1024: 9588-block  2
     1028: 9589:      delta[i] = kwset->mind;
     1024: 9589-block  0
        4: 9589-block  1
        -: 9590:  else
    #####: 9591:    for (i = 0; i < NCHAR; ++i)
    $$$$$: 9591-block  0
    $$$$$: 9591-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9591-block  2
    #####: 9592:      delta[i] = 255;
    $$$$$: 9592-block  0
        -: 9593:
        -: 9594:  /* Check if we can use the simple boyer-moore algorithm, instead
        -: 9595:     of the hairy commentz-walter algorithm. */
        4: 9596:  if (kwset->words == 1 && kwset->trans == 0)
        4: 9596-block  0
branch  0 taken 100%
branch  1 taken 0%
        4: 9596-block  1
branch  2 taken 0%
branch  3 taken 100%
        -: 9597:    {
        -: 9598:      /* Looking for just one string.  Extract it from the trie. */
        4: 9599:      kwset->target = obstack_alloc(&kwset->obstack, kwset->mind);
        4: 9599-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$: 9599-block  1
        4: 9599-block  2
        4: 9599-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 9599-block  4
        4: 9599-block  5
branch  4 taken 0%
branch  5 taken 100%
    $$$$$: 9599-block  6
        4: 9599-block  7
      196: 9600:      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
        4: 9600-block  0
      196: 9600-block  1
branch  0 taken 98%
branch  1 taken 2%
      192: 9600-block  2
        -: 9601:	{
      192: 9602:	  kwset->target[i] = curr->links->label;
      192: 9603:	  curr = curr->links->trie;
      192: 9604:	}
      192: 9604-block  0
        -: 9605:      /* Build the Boyer Moore delta.  Boy that's easy compared to CW. */
      196: 9606:      for (i = 0; i < kwset->mind; ++i)
        4: 9606-block  0
      196: 9606-block  1
branch  0 taken 98%
branch  1 taken 2%
      192: 9606-block  2
      192: 9607:	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 1);
      192: 9607-block  0
        4: 9608:      kwset->mind2 = kwset->mind;
        -: 9609:      /* Find the minimal delta2 shift that we might make after
        -: 9610:	 a backwards match has failed. */
      192: 9611:      for (i = 0; i < kwset->mind - 1; ++i)
        4: 9611-block  0
      192: 9611-block  1
branch  0 taken 98%
branch  1 taken 2%
      188: 9611-block  2
      190: 9612:	if (kwset->target[i] == kwset->target[kwset->mind - 1])
      188: 9612-block  0
branch  0 taken 99%
branch  1 taken 1%
      188: 9612-block  1
        2: 9613:	  kwset->mind2 = kwset->mind - (i + 1);
        2: 9613-block  0
        4: 9614:    }
        4: 9614-block  0
        -: 9615:  else
        -: 9616:    {
        -: 9617:      /* Traverse the nodes of the trie in level order, simultaneously
        -: 9618:	 computing the delta table, failure function, and shift function. */
    #####: 9619:      for (curr = last = kwset->trie; curr; curr = curr->next)
    $$$$$: 9619-block  0
    $$$$$: 9619-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9619-block  2
        -: 9620:	{
        -: 9621:	  /* Enqueue the immediate descendents in the level order queue. */
    #####: 9622:	  enqueue(curr->links, &last);
        -: 9623:
    #####: 9624:	  curr->shift = kwset->mind;
    #####: 9625:	  curr->maxshift = kwset->mind;
        -: 9626:
        -: 9627:	  /* Update the delta table for the descendents of this node. */
    #####: 9628:	  treedelta(curr->links, curr->depth, delta);
        -: 9629:
        -: 9630:	  /* Compute the failure function for the decendents of this node. */
    #####: 9631:	  treefails(curr->links, curr->fail, kwset->trie);
        -: 9632:
        -: 9633:	  /* Update the shifts at each node in the current node's chain
        -: 9634:	     of fails back to the root. */
    #####: 9635:	  for (fail = curr->fail; fail; fail = fail->fail)
    $$$$$: 9635-block  0
    $$$$$: 9635-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9635-block  2
        -: 9636:	    {
        -: 9637:	      /* If the current node has some outgoing edge that the fail
        -: 9638:		 doesn't, then the shift at the fail should be no larger
        -: 9639:		 than the difference of their depths. */
    #####: 9640:	      if (!hasevery(fail->links, curr->links))
    $$$$$: 9640-block  0
branch  0 never executed
branch  1 never executed
    #####: 9641:		if (curr->depth - fail->depth < fail->shift)
    $$$$$: 9641-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 9641-block  1
    #####: 9642:		  fail->shift = curr->depth - fail->depth;
    $$$$$: 9642-block  0
        -: 9643:
        -: 9644:	      /* If the current node is accepting then the shift at the
        -: 9645:		 fail and its descendents should be no larger than the
        -: 9646:		 difference of their depths. */
    #####: 9647:	      if (curr->accepting && fail->maxshift > curr->depth - fail->depth)
    $$$$$: 9647-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 9647-block  1
branch  2 never executed
branch  3 never executed
    #####: 9648:		fail->maxshift = curr->depth - fail->depth;
    $$$$$: 9648-block  0
    #####: 9649:	    }
    $$$$$: 9649-block  0
    #####: 9650:	}
    $$$$$: 9650-block  0
        -: 9651:
        -: 9652:      /* Traverse the trie in level order again, fixing up all nodes whose
        -: 9653:	 shift exceeds their inherited maxshift. */
    #####: 9654:      for (curr = kwset->trie->next; curr; curr = curr->next)
    $$$$$: 9654-block  0
    $$$$$: 9654-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9654-block  2
        -: 9655:	{
    #####: 9656:	  if (curr->maxshift > curr->parent->maxshift)
    $$$$$: 9656-block  0
branch  0 never executed
branch  1 never executed
    #####: 9657:	    curr->maxshift = curr->parent->maxshift;
    $$$$$: 9657-block  0
    #####: 9658:	  if (curr->shift > curr->maxshift)
    $$$$$: 9658-block  0
branch  0 never executed
branch  1 never executed
    #####: 9659:	    curr->shift = curr->maxshift;
    $$$$$: 9659-block  0
    #####: 9660:	}
    $$$$$: 9660-block  0
        -: 9661:
        -: 9662:      /* Create a vector, indexed by character code, of the outgoing links
        -: 9663:	 from the root node. */
    #####: 9664:      for (i = 0; i < NCHAR; ++i)
    $$$$$: 9664-block  0
    $$$$$: 9664-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9664-block  2
    #####: 9665:	next[i] = 0;
    $$$$$: 9665-block  0
    #####: 9666:      treenext(kwset->trie->links, next);
        -: 9667:
    #####: 9668:      if ((trans = kwset->trans) != 0)
    $$$$$: 9668-block  0
branch  0 never executed
branch  1 never executed
    #####: 9669:	for (i = 0; i < NCHAR; ++i)
    $$$$$: 9669-block  0
    $$$$$: 9669-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9669-block  2
    #####: 9670:	  kwset->next[i] = next[(unsigned char) trans[i]];
    $$$$$: 9670-block  0
    $$$$$: 9670-block  1
        -: 9671:      else
    #####: 9672:	for (i = 0; i < NCHAR; ++i)
    $$$$$: 9672-block  0
    $$$$$: 9672-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9672-block  2
    #####: 9673:	  kwset->next[i] = next[i];
    $$$$$: 9673-block  0
        -: 9674:    }
        -: 9675:
        -: 9676:  /* Fix things up for any translation table. */
        4: 9677:  if ((trans = kwset->trans) != 0)
        4: 9677-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 9678:    for (i = 0; i < NCHAR; ++i)
    $$$$$: 9678-block  0
    $$$$$: 9678-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9678-block  2
    #####: 9679:      kwset->delta[i] = delta[(unsigned char) trans[i]];
    $$$$$: 9679-block  0
    $$$$$: 9679-block  1
        -: 9680:  else
     1028: 9681:    for (i = 0; i < NCHAR; ++i)
        4: 9681-block  0
     1028: 9681-block  1
branch  0 taken 99%
branch  1 taken 1%
     1024: 9681-block  2
     1024: 9682:      kwset->delta[i] = delta[i];
     1024: 9682-block  0
        -: 9683:
        4: 9684:  return 0;
        4: 9684-block  0
        -: 9685:}
        -: 9686:
        -: 9687:#define U(C) ((unsigned char) (C))
        -: 9688:
        -: 9689:/* Fast boyer-moore search. */
        -: 9690:static char *
function bmexec called 4 returned 100% blocks executed 68%
        4: 9691:bmexec(kws, text, size)
        -: 9692:     kwset_t kws;
        -: 9693:     char *text;
        -: 9694:     size_t size;
        -: 9695:{
        -: 9696:  struct kwset *kwset;
        -: 9697:  register unsigned char *d1;
        -: 9698:  register char *ep, *sp, *tp;
        -: 9699:  register int d, gc, i, len, md2;
        -: 9700:
        4: 9701:  kwset = (struct kwset *) kws;
        4: 9702:  len = kwset->mind;
        -: 9703:
        4: 9704:  if (len == 0)
        4: 9704-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 9705:    return text;
    $$$$$: 9705-block  0
        4: 9706:  if (len > size)
        4: 9706-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 9707:    return 0;
    $$$$$: 9707-block  0
        4: 9708:  if (len == 1)
        4: 9708-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 9709:    return memchr(text, kwset->target[0], size);
    $$$$$: 9709-block  0
        -: 9710:
        4: 9711:  d1 = kwset->delta;
        4: 9712:  sp = kwset->target + len;
        4: 9713:  gc = U(sp[-2]);
        4: 9714:  md2 = kwset->mind2;
        4: 9715:  tp = text + len;
        -: 9716:
        -: 9717:  /* Significance of 12: 1 (initial offset) + 10 (skip loop) + 1 (md2). */
        4: 9718:  if (size > 12 * len)
        4: 9718-block  0
branch  0 taken 0%
branch  1 taken 100%
        -: 9719:    /* 11 is not a bug, the initial offset happens only once. */
      223: 9720:    for (ep = text + size - 11 * len;;)
        4: 9720-block  0
      219: 9720-block  1
        -: 9721:      {
     1012: 9722:	while (tp <= ep)
      223: 9722-block  0
     1012: 9722-block  1
branch  0 taken 99%
branch  1 taken 1%
      789: 9722-block  2
        -: 9723:	  {
     1008: 9724:	    d = d1[U(tp[-1])], tp += d;
     1008: 9725:	    d = d1[U(tp[-1])], tp += d;
     1008: 9726:	    if (d == 0)
     1008: 9726-block  0
branch  0 taken 91%
branch  1 taken 9%
       92: 9727:	      goto found;
       92: 9727-block  0
      916: 9728:	    d = d1[U(tp[-1])], tp += d;
      916: 9729:	    d = d1[U(tp[-1])], tp += d;
      916: 9730:	    d = d1[U(tp[-1])], tp += d;
      916: 9731:	    if (d == 0)
      916: 9731-block  0
branch  0 taken 93%
branch  1 taken 7%
       67: 9732:	      goto found;
       67: 9732-block  0
      849: 9733:	    d = d1[U(tp[-1])], tp += d;
      849: 9734:	    d = d1[U(tp[-1])], tp += d;
      849: 9735:	    d = d1[U(tp[-1])], tp += d;
      849: 9736:	    if (d == 0)
      849: 9736-block  0
branch  0 taken 93%
branch  1 taken 7%
       60: 9737:	      goto found;
       60: 9737-block  0
      789: 9738:	    d = d1[U(tp[-1])], tp += d;
      789: 9739:	    d = d1[U(tp[-1])], tp += d;
        -: 9740:	  }
        4: 9741:	break;
        4: 9741-block  0
        -: 9742:      found:
      219: 9743:	if (U(tp[-2]) == gc)
      219: 9743-block  0
branch  0 taken 95%
branch  1 taken 5%
        -: 9744:	  {
       10: 9745:	    for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
       10: 9745-block  0
       10: 9745-block  1
branch  0 taken 0%
branch  1 taken 100%
       10: 9745-block  2
       10: 9745-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$: 9745-block  4
    $$$$$: 9745-block  5
        -: 9746:	      ;
       10: 9747:	    if (i > len)
       10: 9747-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####: 9748:	      return tp - len;
    $$$$$: 9748-block  0
       10: 9749:	  }
       10: 9749-block  0
      219: 9750:	tp += md2;
        4: 9751:      }
        4: 9751-block  0
        -: 9752:
        -: 9753:  /* Now we have only a few characters left to search.  We
        -: 9754:     carefully avoid ever producing an out-of-bounds pointer. */
        4: 9755:  ep = text + size;
        4: 9756:  d = d1[U(tp[-1])];
       39: 9757:  while (d <= ep - tp)
        4: 9757-block  0
       39: 9757-block  1
branch  0 taken 90%
branch  1 taken 10%
        1: 9757-block  2
        -: 9758:    {
       35: 9759:      d = d1[U((tp += d)[-1])];
       35: 9760:      if (d != 0)
       35: 9760-block  0
branch  0 taken 97%
branch  1 taken 3%
       34: 9761:	continue;
       34: 9761-block  0
        1: 9762:      if (tp[-2] == gc)
        1: 9762-block  0
branch  0 taken 100%
branch  1 taken 0%
        -: 9763:	{
    #####: 9764:	  for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
    $$$$$: 9764-block  0
    $$$$$: 9764-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9764-block  2
    $$$$$: 9764-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 9764-block  4
    $$$$$: 9764-block  5
        -: 9765:	    ;
    #####: 9766:	  if (i > len)
    $$$$$: 9766-block  0
branch  0 never executed
branch  1 never executed
    #####: 9767:	    return tp - len;
    $$$$$: 9767-block  0
    #####: 9768:	}
    $$$$$: 9768-block  0
        1: 9769:      d = md2;
        -: 9770:    }
        -: 9771:
        4: 9772:  return 0;
        4: 9772-block  0
        4: 9773:}
        4: 9773-block  0
        -: 9774:
        -: 9775:/* Hairy multiple string search. */
        -: 9776:static char *
function cwexec called 0 returned 0% blocks executed 0%
    #####: 9777:cwexec(kws, text, len, kwsmatch)
        -: 9778:     kwset_t kws;
        -: 9779:     char *text;
        -: 9780:     size_t len;
        -: 9781:     struct kwsmatch *kwsmatch;
        -: 9782:{
        -: 9783:  struct kwset *kwset;
        -: 9784:  struct trie **next, *trie, *accept;
        -: 9785:  char *beg, *lim, *mch, *lmch;
        -: 9786:  register unsigned char c, *delta;
        -: 9787:  register int d;
        -: 9788:  register char *end, *qlim;
        -: 9789:  register struct tree *tree;
        -: 9790:  register char *trans;
        -: 9791:
        -: 9792:  /* Initialize register copies and look for easy ways out. */
    #####: 9793:  kwset = (struct kwset *) kws;
    #####: 9794:  if (len < kwset->mind)
    $$$$$: 9794-block  0
branch  0 never executed
branch  1 never executed
    #####: 9795:    return 0;
    $$$$$: 9795-block  0
    #####: 9796:  next = kwset->next;
    #####: 9797:  delta = kwset->delta;
    #####: 9798:  trans = kwset->trans;
    #####: 9799:  lim = text + len;
    #####: 9800:  end = text;
    #####: 9801:  if ((d = kwset->mind) != 0)
    $$$$$: 9801-block  0
branch  0 never executed
branch  1 never executed
    #####: 9802:    mch = 0;
    $$$$$: 9802-block  0
        -: 9803:  else
        -: 9804:    {
    #####: 9805:      mch = text, accept = kwset->trie;
    #####: 9806:      goto match;
    $$$$$: 9806-block  0
        -: 9807:    }
        -: 9808:
    #####: 9809:  if (len >= 4 * kwset->mind)
    $$$$$: 9809-block  0
branch  0 never executed
branch  1 never executed
    #####: 9810:    qlim = lim - 4 * kwset->mind;
    $$$$$: 9810-block  0
        -: 9811:  else
    #####: 9812:    qlim = 0;
    $$$$$: 9812-block  0
        -: 9813:
    #####: 9814:  while (lim - end >= d)
    $$$$$: 9814-block  0
    $$$$$: 9814-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9814-block  2
        -: 9815:    {
    #####: 9816:      if (qlim && end <= qlim)
    $$$$$: 9816-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 9816-block  1
branch  2 never executed
branch  3 never executed
        -: 9817:	{
    #####: 9818:	  end += d - 1;
    #####: 9819:	  while ((d = delta[c = *end]) && end < qlim)
    $$$$$: 9819-block  0
    $$$$$: 9819-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9819-block  2
    $$$$$: 9819-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 9819-block  4
        -: 9820:	    {
    #####: 9821:	      end += d;
    #####: 9822:	      end += delta[(unsigned char) *end];
    #####: 9823:	      end += delta[(unsigned char) *end];
        -: 9824:	    }
    #####: 9825:	  ++end;
    #####: 9826:	}
    $$$$$: 9826-block  0
        -: 9827:      else
    #####: 9828:	d = delta[c = (end += d)[-1]];
    $$$$$: 9828-block  0
    #####: 9829:      if (d)
    $$$$$: 9829-block  0
branch  0 never executed
branch  1 never executed
    #####: 9830:	continue;
    $$$$$: 9830-block  0
    #####: 9831:      beg = end - 1;
    #####: 9832:      trie = next[c];
    #####: 9833:      if (trie->accepting)
    $$$$$: 9833-block  0
branch  0 never executed
branch  1 never executed
        -: 9834:	{
    #####: 9835:	  mch = beg;
    #####: 9836:	  accept = trie;
    #####: 9837:	}
    $$$$$: 9837-block  0
    #####: 9838:      d = trie->shift;
    #####: 9839:      while (beg > text)
    $$$$$: 9839-block  0
    $$$$$: 9839-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9839-block  2
        -: 9840:	{
    #####: 9841:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
    $$$$$: 9841-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 9841-block  1
    $$$$$: 9841-block  2
    #####: 9842:	  tree = trie->links;
    #####: 9843:	  while (tree && c != tree->label)
    $$$$$: 9843-block  0
    $$$$$: 9843-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9843-block  2
    $$$$$: 9843-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 9843-block  4
    #####: 9844:	    if (c < tree->label)
    $$$$$: 9844-block  0
branch  0 never executed
branch  1 never executed
    #####: 9845:	      tree = tree->llink;
    $$$$$: 9845-block  0
        -: 9846:	    else
    #####: 9847:	      tree = tree->rlink;
    $$$$$: 9847-block  0
    #####: 9848:	  if (tree)
    $$$$$: 9848-block  0
branch  0 never executed
branch  1 never executed
        -: 9849:	    {
    #####: 9850:	      trie = tree->trie;
    #####: 9851:	      if (trie->accepting)
    $$$$$: 9851-block  0
branch  0 never executed
branch  1 never executed
        -: 9852:		{
    #####: 9853:		  mch = beg;
    #####: 9854:		  accept = trie;
    #####: 9855:		}
    $$$$$: 9855-block  0
    #####: 9856:	    }
    $$$$$: 9856-block  0
        -: 9857:	  else
    #####: 9858:	    break;
    $$$$$: 9858-block  0
    #####: 9859:	  d = trie->shift;
        -: 9860:	}
    #####: 9861:      if (mch)
    $$$$$: 9861-block  0
branch  0 never executed
branch  1 never executed
    #####: 9862:	goto match;
    $$$$$: 9862-block  0
        -: 9863:    }
    #####: 9864:  return 0;
    $$$$$: 9864-block  0
        -: 9865:
        -: 9866: match:
        -: 9867:  /* Given a known match, find the longest possible match anchored
        -: 9868:     at or before its starting point.  This is nearly a verbatim
        -: 9869:     copy of the preceding main search loops. */
    #####: 9870:  if (lim - mch > kwset->maxd)
    $$$$$: 9870-block  0
branch  0 never executed
branch  1 never executed
    #####: 9871:    lim = mch + kwset->maxd;
    $$$$$: 9871-block  0
    #####: 9872:  lmch = 0;
    #####: 9873:  d = 1;
    #####: 9874:  while (lim - end >= d)
    $$$$$: 9874-block  0
    $$$$$: 9874-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9874-block  2
        -: 9875:    {
    #####: 9876:      if ((d = delta[c = (end += d)[-1]]) != 0)
    $$$$$: 9876-block  0
branch  0 never executed
branch  1 never executed
    #####: 9877:	continue;
    $$$$$: 9877-block  0
    #####: 9878:      beg = end - 1;
    #####: 9879:      if (!(trie = next[c]))
    $$$$$: 9879-block  0
branch  0 never executed
branch  1 never executed
        -: 9880:	{
    #####: 9881:	  d = 1;
    #####: 9882:	  continue;
    $$$$$: 9882-block  0
        -: 9883:	}
    #####: 9884:      if (trie->accepting && beg <= mch)
    $$$$$: 9884-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 9884-block  1
branch  2 never executed
branch  3 never executed
        -: 9885:	{
    #####: 9886:	  lmch = beg;
    #####: 9887:	  accept = trie;
    #####: 9888:	}
    $$$$$: 9888-block  0
    #####: 9889:      d = trie->shift;
    #####: 9890:      while (beg > text)
    $$$$$: 9890-block  0
    $$$$$: 9890-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9890-block  2
        -: 9891:	{
    #####: 9892:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
    $$$$$: 9892-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 9892-block  1
    $$$$$: 9892-block  2
    #####: 9893:	  tree = trie->links;
    #####: 9894:	  while (tree && c != tree->label)
    $$$$$: 9894-block  0
    $$$$$: 9894-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 9894-block  2
    $$$$$: 9894-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 9894-block  4
    #####: 9895:	    if (c < tree->label)
    $$$$$: 9895-block  0
branch  0 never executed
branch  1 never executed
    #####: 9896:	      tree = tree->llink;
    $$$$$: 9896-block  0
        -: 9897:	    else
    #####: 9898:	      tree = tree->rlink;
    $$$$$: 9898-block  0
    #####: 9899:	  if (tree)
    $$$$$: 9899-block  0
branch  0 never executed
branch  1 never executed
        -: 9900:	    {
    #####: 9901:	      trie = tree->trie;
    #####: 9902:	      if (trie->accepting && beg <= mch)
    $$$$$: 9902-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 9902-block  1
branch  2 never executed
branch  3 never executed
        -: 9903:		{
    #####: 9904:		  lmch = beg;
    #####: 9905:		  accept = trie;
    #####: 9906:		}
    $$$$$: 9906-block  0
    #####: 9907:	    }
    $$$$$: 9907-block  0
        -: 9908:	  else
    #####: 9909:	    break;
    $$$$$: 9909-block  0
    #####: 9910:	  d = trie->shift;
        -: 9911:	}
    #####: 9912:      if (lmch)
    $$$$$: 9912-block  0
branch  0 never executed
branch  1 never executed
        -: 9913:	{
    #####: 9914:	  mch = lmch;
    #####: 9915:	  goto match;
    $$$$$: 9915-block  0
        -: 9916:	}
    #####: 9917:      if (!d)
    $$$$$: 9917-block  0
branch  0 never executed
branch  1 never executed
    #####: 9918:	d = 1;
    $$$$$: 9918-block  0
        -: 9919:    }
        -: 9920:
    #####: 9921:  if (kwsmatch)
    $$$$$: 9921-block  0
branch  0 never executed
branch  1 never executed
        -: 9922:    {
    #####: 9923:      kwsmatch->index = accept->accepting / 2;
    #####: 9924:      kwsmatch->beg[0] = mch;
    #####: 9925:      kwsmatch->size[0] = accept->depth;
    #####: 9926:    }
    $$$$$: 9926-block  0
    #####: 9927:  return mch;
    $$$$$: 9927-block  0
    #####: 9928:}
    $$$$$: 9928-block  0
        -: 9929:  
        -: 9930:/* Search through the given text for a match of any member of the
        -: 9931:   given keyword set.  Return a pointer to the first character of
        -: 9932:   the matching substring, or NULL if no match is found.  If FOUNDLEN
        -: 9933:   is non-NULL store in the referenced location the length of the
        -: 9934:   matching substring.  Similarly, if FOUNDIDX is non-NULL, store
        -: 9935:   in the referenced location the index number of the particular
        -: 9936:   keyword matched. */
        -: 9937:char *
function kwsexec called 4 returned 100% blocks executed 75%
        4: 9938:kwsexec(kws, text, size, kwsmatch)
        -: 9939:     kwset_t kws;
        -: 9940:     char *text;
        -: 9941:     size_t size;
        -: 9942:     struct kwsmatch *kwsmatch;
        -: 9943:{
        -: 9944:  struct kwset *kwset;
        -: 9945:  char *ret;
        -: 9946:
        4: 9947:  kwset = (struct kwset *) kws;
        4: 9948:  if (kwset->words == 1 && kwset->trans == 0)
        4: 9948-block  0
branch  0 taken 100%
branch  1 taken 0%
        4: 9948-block  1
branch  2 taken 0%
branch  3 taken 100%
        -: 9949:    {
        4: 9950:      ret = bmexec(kws, text, size);
        4: 9951:      if (kwsmatch != 0 && ret != 0)
        4: 9951-block  0
branch  0 taken 100%
branch  1 taken 0%
        4: 9951-block  1
branch  2 taken 0%
branch  3 taken 100%
        -: 9952:	{
    #####: 9953:	  kwsmatch->index = 0;
    #####: 9954:	  kwsmatch->beg[0] = ret;
    #####: 9955:	  kwsmatch->size[0] = kwset->mind;
    #####: 9956:	}
    $$$$$: 9956-block  0
        4: 9957:      return ret;
        4: 9957-block  0
        -: 9958:    }
        -: 9959:  else
    #####: 9960:    return cwexec(kws, text, size, kwsmatch);
    $$$$$: 9960-block  0
        4: 9961:}
        4: 9961-block  0
        -: 9962:
        -: 9963:/* Free the components of the given keyword set. */
        -: 9964:void
function kwsfree called 0 returned 0% blocks executed 0%
    #####: 9965:kwsfree(kws)
        -: 9966:     kwset_t kws;
        -: 9967:{
        -: 9968:  struct kwset *kwset;
        -: 9969:
    #####: 9970:  kwset = (struct kwset *) kws;
    #####: 9971:  obstack_free(&kwset->obstack, 0);
    $$$$$: 9971-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 9971-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 9971-block  2
    $$$$$: 9971-block  3
    #####: 9972:  free(kws);
    #####: 9973:}
    $$$$$: 9973-block  0
        -: 9974:/* obstack.c - subroutines used implicitly by object stack macros
        -: 9975:   Copyright (C) 1988, 1993 Free Software Foundation, Inc.
        -: 9976:
        -: 9977:This program is free software; you can redistribute it and/or modify it
        -: 9978:under the terms of the GNU General Public License as published by the
        -: 9979:Free Software Foundation; either version 2, or (at your option) any
        -: 9980:later version.
        -: 9981:
        -: 9982:This program is distributed in the hope that it will be useful,
        -: 9983:but WITHOUT ANY WARRANTY; without even the implied warranty of
        -: 9984:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -: 9985:GNU General Public License for more details.
        -: 9986:
        -: 9987:You should have received a copy of the GNU General Public License
        -: 9988:along with this program; if not, write to the Free Software
        -: 9989:Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
        -: 9990:
        -: 9991:/*#include "obstack.h"*/
        -: 9992:
        -: 9993:/* This is just to get __GNU_LIBRARY__ defined.  */
        -: 9994:/*#include <stdio.h>*/
        -: 9995:
        -: 9996:/* Comment out all this code if we are using the GNU C Library, and are not
        -: 9997:   actually compiling the library itself.  This code is part of the GNU C
        -: 9998:   Library, but also included in many other GNU distributions.  Compiling
        -: 9999:   and linking in this code is a waste when using the GNU C library
        -:10000:   (especially if it is a shared library).  Rather than having every GNU
        -:10001:   program understand `configure --with-gnu-libc' and omit the object files,
        -:10002:   it is simpler to just do this in the source for each such file.  */
        -:10003:
        -:10004:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
        -:10005:
        -:10006:
        -:10007:#ifdef __STDC__
        -:10008:#define POINTER void *
        -:10009:#else
        -:10010:#define POINTER char *
        -:10011:#endif
        -:10012:
        -:10013:/* Determine default alignment.  */
        -:10014:struct fooalign {char x; double d;};
        -:10015:#define DEFAULT_ALIGNMENT  \
        -:10016:  ((PTR_INT_TYPE) ((char *)&((struct fooalign *) 0)->d - (char *)0))
        -:10017:/* If malloc were really smart, it would round addresses to DEFAULT_ALIGNMENT.
        -:10018:   But in fact it might be less smart and round addresses to as much as
        -:10019:   DEFAULT_ROUNDING.  So we prepare for it to do that.  */
        -:10020:union fooround {long x; double d;};
        -:10021:#define DEFAULT_ROUNDING (sizeof (union fooround))
        -:10022:
        -:10023:/* When we copy a long block of data, this is the unit to do it with.
        -:10024:   On some machines, copying successive ints does not work;
        -:10025:   in such a case, redefine COPYING_UNIT to `long' (if that works)
        -:10026:   or `char' as a last resort.  */
        -:10027:#ifndef COPYING_UNIT
        -:10028:#define COPYING_UNIT int
        -:10029:#endif
        -:10030:
        -:10031:/* The non-GNU-C macros copy the obstack into this global variable
        -:10032:   to avoid multiple evaluation.  */
        -:10033:
        -:10034:struct obstack *_obstack;
        -:10035:
        -:10036:/* Define a macro that either calls functions with the traditional malloc/free
        -:10037:   calling interface, or calls functions with the mmalloc/mfree interface
        -:10038:   (that adds an extra first argument), based on the state of use_extra_arg.
        -:10039:   For free, do not use ?:, since some compilers, like the MIPS compilers,
        -:10040:   do not allow (expr) ? void : void.  */
        -:10041:
        -:10042:#define CALL_CHUNKFUN(h, size) \
        -:10043:  (((h) -> use_extra_arg) \
        -:10044:   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
        -:10045:   : (*(h)->chunkfun) ((size)))
        -:10046:
        -:10047:#define CALL_FREEFUN(h, old_chunk) \
        -:10048:  do { \
        -:10049:    if ((h) -> use_extra_arg) \
        -:10050:      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
        -:10051:    else \
        -:10052:      (*(h)->freefun) ((old_chunk)); \
        -:10053:  } while (0)
        -:10054:
        -:10055:#define CALL_FREEFUN(h, old_chunk) \
        -:10056:  do { \
        -:10057:      free ((old_chunk)); \
        -:10058:  } while (0)
        -:10059:
        -:10060:
        -:10061:/* Initialize an obstack H for use.  Specify chunk size SIZE (0 means default).
        -:10062:   Objects start on multiples of ALIGNMENT (0 means use default).
        -:10063:   CHUNKFUN is the function to use to allocate chunks,
        -:10064:   and FREEFUN the function to free them.  */
        -:10065:
        -:10066:void
function _obstack_begin called 4 returned 100% blocks executed 87%
        4:10067:_obstack_begin (h, size, alignment, chunkfun, freefun)
        -:10068:     struct obstack *h;
        -:10069:     int size;
        -:10070:     int alignment;
        -:10071:     POINTER (*chunkfun) ();
        -:10072:     void (*freefun) ();
        -:10073:{
        -:10074:  register struct _obstack_chunk* chunk; /* points to new chunk */
        -:10075:
        4:10076:  if (alignment == 0)
        4:10076-block  0
branch  0 taken 100%
branch  1 taken 0%
        4:10077:    alignment = DEFAULT_ALIGNMENT;
        4:10077-block  0
        4:10078:  if (size == 0)
        4:10078-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:10079:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
        -:10080:    {
        -:10081:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
        -:10082:	 Use the values for range checking, because if range checking is off,
        -:10083:	 the extra bytes won't be missed terribly, but if range checking is on
        -:10084:	 and we used a larger request, a whole extra 4096 bytes would be
        -:10085:	 allocated.
        -:10086:
        -:10087:	 These number are irrelevant to the new GNU malloc.  I suspect it is
        -:10088:	 less sensitive to the size of the request.  */
        4:10089:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
        -:10090:		    + 4 + DEFAULT_ROUNDING - 1)
        -:10091:		   & ~(DEFAULT_ROUNDING - 1));
        4:10092:      size = 4096 - extra;
        4:10093:    }
        4:10093-block  0
        -:10094:
        4:10095:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
        4:10096:  h->freefun = freefun;
        4:10097:  h->chunk_size = size;
        4:10098:  h->alignment_mask = alignment - 1;
        4:10099:  h->use_extra_arg = 0;
        -:10100:
        4:10101:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
        4:10101-block  0
branch  0 taken 100%
branch  1 taken 0%
    $$$$$:10101-block  1
        4:10101-block  2
        4:10102:  h->next_free = h->object_base = chunk->contents;
        8:10103:  h->chunk_limit = chunk->limit
        8:10104:    = (char *) chunk + h->chunk_size;
        4:10105:  chunk->prev = 0;
        -:10106:  /* The initial chunk now contains no empty object.  */
        4:10107:  h->maybe_empty_object = 0;
        4:10108:}
        4:10108-block  0
        -:10109:
        -:10110:void
function _obstack_begin_1 called 0 returned 0% blocks executed 0%
    #####:10111:_obstack_begin_1 (h, size, alignment, chunkfun, freefun, arg)
        -:10112:     struct obstack *h;
        -:10113:     int size;
        -:10114:     int alignment;
        -:10115:     POINTER (*chunkfun) ();
        -:10116:     void (*freefun) ();
        -:10117:     POINTER arg;
        -:10118:{
        -:10119:  register struct _obstack_chunk* chunk; /* points to new chunk */
        -:10120:
    #####:10121:  if (alignment == 0)
    $$$$$:10121-block  0
branch  0 never executed
branch  1 never executed
    #####:10122:    alignment = DEFAULT_ALIGNMENT;
    $$$$$:10122-block  0
    #####:10123:  if (size == 0)
    $$$$$:10123-block  0
branch  0 never executed
branch  1 never executed
        -:10124:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
        -:10125:    {
        -:10126:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
        -:10127:	 Use the values for range checking, because if range checking is off,
        -:10128:	 the extra bytes won't be missed terribly, but if range checking is on
        -:10129:	 and we used a larger request, a whole extra 4096 bytes would be
        -:10130:	 allocated.
        -:10131:
        -:10132:	 These number are irrelevant to the new GNU malloc.  I suspect it is
        -:10133:	 less sensitive to the size of the request.  */
    #####:10134:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
        -:10135:		    + 4 + DEFAULT_ROUNDING - 1)
        -:10136:		   & ~(DEFAULT_ROUNDING - 1));
    #####:10137:      size = 4096 - extra;
    #####:10138:    }
    $$$$$:10138-block  0
        -:10139:
    #####:10140:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
    #####:10141:  h->freefun = freefun;
    #####:10142:  h->chunk_size = size;
    #####:10143:  h->alignment_mask = alignment - 1;
    #####:10144:  h->extra_arg = arg;
    #####:10145:  h->use_extra_arg = 1;
        -:10146:
    #####:10147:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
    $$$$$:10147-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10147-block  1
    $$$$$:10147-block  2
    #####:10148:  h->next_free = h->object_base = chunk->contents;
    #####:10149:  h->chunk_limit = chunk->limit
    #####:10150:    = (char *) chunk + h->chunk_size;
    #####:10151:  chunk->prev = 0;
        -:10152:  /* The initial chunk now contains no empty object.  */
    #####:10153:  h->maybe_empty_object = 0;
    #####:10154:}
    $$$$$:10154-block  0
        -:10155:
        -:10156:/* Allocate a new current chunk for the obstack *H
        -:10157:   on the assumption that LENGTH bytes need to be added
        -:10158:   to the current object, or a new object of length LENGTH allocated.
        -:10159:   Copies any partial object from the end of the old chunk
        -:10160:   to the beginning of the new one.  */
        -:10161:
        -:10162:void
function _obstack_newchunk called 2 returned 100% blocks executed 54%
        2:10163:_obstack_newchunk (h, length)
        -:10164:     struct obstack *h;
        -:10165:     int length;
        -:10166:{
        2:10167:  register struct _obstack_chunk*	old_chunk = h->chunk;
        -:10168:  register struct _obstack_chunk*	new_chunk;
        -:10169:  register long	new_size;
        2:10170:  register int obj_size = h->next_free - h->object_base;
        -:10171:  register int i;
        -:10172:  int already;
        -:10173:
        -:10174:  /* Compute size for new chunk.  */
        2:10175:  new_size = (obj_size + length) + (obj_size >> 3) + 100;
        2:10176:  if (new_size < h->chunk_size)
        2:10176-block  0
branch  0 taken 0%
branch  1 taken 100%
        2:10177:    new_size = h->chunk_size;
        2:10177-block  0
        -:10178:
        -:10179:  /* Allocate and initialize the new chunk.  */
        2:10180:  new_chunk = h->chunk = CALL_CHUNKFUN (h, new_size);
        2:10180-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:10180-block  1
        2:10180-block  2
        2:10181:  new_chunk->prev = old_chunk;
        2:10182:  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;
        -:10183:
        -:10184:  /* Move the existing object to the new chunk.
        -:10185:     Word at a time is fast and is safe if the object
        -:10186:     is sufficiently aligned.  */
        2:10187:  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)
        2:10187-block  0
branch  0 taken 100%
branch  1 taken 0%
        -:10188:    {
        2:10189:      for (i = obj_size / sizeof (COPYING_UNIT) - 1;
        2:10189-block  0
        2:10189-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:10189-block  2
        2:10190:	   i >= 0; i--)
    #####:10191:	((COPYING_UNIT *)new_chunk->contents)[i]
    $$$$$:10191-block  0
    $$$$$:10191-block  1
    #####:10192:	  = ((COPYING_UNIT *)h->object_base)[i];
        -:10193:      /* We used to copy the odd few remaining bytes as one extra COPYING_UNIT,
        -:10194:	 but that can cross a page boundary on a machine
        -:10195:	 which does not do strict alignment for COPYING_UNITS.  */
        2:10196:      already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT);
        2:10197:    }
        2:10197-block  0
        -:10198:  else
    #####:10199:    already = 0;
    $$$$$:10199-block  0
        -:10200:  /* Copy remaining bytes one by one.  */
        2:10201:  for (i = already; i < obj_size; i++)
        2:10201-block  0
        2:10201-block  1
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:10201-block  2
    #####:10202:    new_chunk->contents[i] = h->object_base[i];
    $$$$$:10202-block  0
        -:10203:
        -:10204:  /* If the object just copied was the only data in OLD_CHUNK,
        -:10205:     free that chunk and remove it from the chain.
        -:10206:     But not if that chunk might contain an empty object.  */
        2:10207:  if (h->object_base == old_chunk->contents && ! h->maybe_empty_object)
        2:10207-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:10207-block  1
branch  2 never executed
branch  3 never executed
        -:10208:    {
    #####:10209:      new_chunk->prev = old_chunk->prev;
    #####:10210:      CALL_FREEFUN (h, old_chunk);
    $$$$$:10210-block  0
    $$$$$:10210-block  1
    #####:10211:    }
    $$$$$:10211-block  0
        -:10212:
        2:10213:  h->object_base = new_chunk->contents;
        2:10214:  h->next_free = h->object_base + obj_size;
        -:10215:  /* The new chunk certainly contains no empty object yet.  */
        2:10216:  h->maybe_empty_object = 0;
        2:10217:}
        2:10217-block  0
        -:10218:
        -:10219:/* Return nonzero if object OBJ has been allocated from obstack H.
        -:10220:   This is here for debugging.
        -:10221:   If you use it in a program, you are probably losing.  */
        -:10222:
        -:10223:int
function _obstack_allocated_p called 0 returned 0% blocks executed 0%
    #####:10224:_obstack_allocated_p (h, obj)
        -:10225:     struct obstack *h;
        -:10226:     POINTER obj;
        -:10227:{
        -:10228:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
        -:10229:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
        -:10230:
    #####:10231:  lp = (h)->chunk;
        -:10232:  /* We use >= rather than > since the object cannot be exactly at
        -:10233:     the beginning of the chunk but might be an empty object exactly
        -:10234:     at the end of an adjacent chunk. */
    #####:10235:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
    $$$$$:10235-block  0
    $$$$$:10235-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:10235-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:10235-block  3
    $$$$$:10235-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:10235-block  5
        -:10236:    {
    #####:10237:      plp = lp->prev;
    #####:10238:      lp = plp;
        -:10239:    }
    #####:10240:  return lp != 0;
    $$$$$:10240-block  0
        -:10241:}
        -:10242:
        -:10243:/* Free objects in obstack H, including OBJ and everything allocate
        -:10244:   more recently than OBJ.  If OBJ is zero, free everything in H.  */
        -:10245:
        -:10246:#undef obstack_free
        -:10247:
        -:10248:/* This function has two names with identical definitions.
        -:10249:   This is the first one, called from non-ANSI code.  */
        -:10250:
        -:10251:void
function _obstack_free called 0 returned 0% blocks executed 0%
    #####:10252:_obstack_free (h, obj)
        -:10253:     struct obstack *h;
        -:10254:     POINTER obj;
        -:10255:{
        -:10256:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
        -:10257:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
        -:10258:
    #####:10259:  lp = h->chunk;
        -:10260:  /* We use >= because there cannot be an object at the beginning of a chunk.
        -:10261:     But there can be an empty object at that address
        -:10262:     at the end of another chunk.  */
    #####:10263:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
    $$$$$:10263-block  0
    $$$$$:10263-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:10263-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:10263-block  3
    $$$$$:10263-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:10263-block  5
        -:10264:    {
    #####:10265:      plp = lp->prev;
    #####:10266:      CALL_FREEFUN (h, lp);
    $$$$$:10266-block  0
    $$$$$:10266-block  1
    #####:10267:      lp = plp;
        -:10268:      /* If we switch chunks, we can't tell whether the new current
        -:10269:	 chunk contains an empty object, so assume that it may.  */
    #####:10270:      h->maybe_empty_object = 1;
        -:10271:    }
    #####:10272:  if (lp)
    $$$$$:10272-block  0
branch  0 never executed
branch  1 never executed
        -:10273:    {
    #####:10274:      h->object_base = h->next_free = (char *)(obj);
    #####:10275:      h->chunk_limit = lp->limit;
    #####:10276:      h->chunk = lp;
    #####:10277:    }
    $$$$$:10277-block  0
    #####:10278:  else if (obj != 0)
    $$$$$:10278-block  0
branch  0 never executed
branch  1 never executed
        -:10279:    /* obj is not in any of the chunks! */
    #####:10280:    abort ();
    $$$$$:10280-block  0
    #####:10281:}
    $$$$$:10281-block  0
        -:10282:
        -:10283:/* This function is used from ANSI code.  */
        -:10284:
        -:10285:void
function obstack_free called 0 returned 0% blocks executed 0%
    #####:10286:obstack_free (h, obj)
        -:10287:     struct obstack *h;
        -:10288:     POINTER obj;
        -:10289:{
        -:10290:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
        -:10291:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
        -:10292:
    #####:10293:  lp = h->chunk;
        -:10294:  /* We use >= because there cannot be an object at the beginning of a chunk.
        -:10295:     But there can be an empty object at that address
        -:10296:     at the end of another chunk.  */
    #####:10297:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
    $$$$$:10297-block  0
    $$$$$:10297-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:10297-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:10297-block  3
    $$$$$:10297-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:10297-block  5
        -:10298:    {
    #####:10299:      plp = lp->prev;
    #####:10300:      CALL_FREEFUN (h, lp);
    $$$$$:10300-block  0
    $$$$$:10300-block  1
    #####:10301:      lp = plp;
        -:10302:      /* If we switch chunks, we can't tell whether the new current
        -:10303:	 chunk contains an empty object, so assume that it may.  */
    #####:10304:      h->maybe_empty_object = 1;
        -:10305:    }
    #####:10306:  if (lp)
    $$$$$:10306-block  0
branch  0 never executed
branch  1 never executed
        -:10307:    {
    #####:10308:      h->object_base = h->next_free = (char *)(obj);
    #####:10309:      h->chunk_limit = lp->limit;
    #####:10310:      h->chunk = lp;
    #####:10311:    }
    $$$$$:10311-block  0
    #####:10312:  else if (obj != 0)
    $$$$$:10312-block  0
branch  0 never executed
branch  1 never executed
        -:10313:    /* obj is not in any of the chunks! */
    #####:10314:    abort ();
    $$$$$:10314-block  0
    #####:10315:}
    $$$$$:10315-block  0
        -:10316:
        -:10317:#if 0
        -:10318:/* These are now turned off because the applications do not use it
        -:10319:   and it uses bcopy via obstack_grow, which causes trouble on sysV.  */
        -:10320:
        -:10321:/* Now define the functional versions of the obstack macros.
        -:10322:   Define them to simply use the corresponding macros to do the job.  */
        -:10323:
        -:10324:#ifdef __STDC__
        -:10325:/* These function definitions do not work with non-ANSI preprocessors;
        -:10326:   they won't pass through the macro names in parentheses.  */
        -:10327:
        -:10328:/* The function names appear in parentheses in order to prevent
        -:10329:   the macro-definitions of the names from being expanded there.  */
        -:10330:
        -:10331:POINTER (obstack_base) (obstack)
        -:10332:     struct obstack *obstack;
        -:10333:{
        -:10334:  return obstack_base (obstack);
        -:10335:}
        -:10336:
        -:10337:POINTER (obstack_next_free) (obstack)
        -:10338:     struct obstack *obstack;
        -:10339:{
        -:10340:  return obstack_next_free (obstack);
        -:10341:}
        -:10342:
        -:10343:int (obstack_object_size) (obstack)
        -:10344:     struct obstack *obstack;
        -:10345:{
        -:10346:  return obstack_object_size (obstack);
        -:10347:}
        -:10348:
        -:10349:int (obstack_room) (obstack)
        -:10350:     struct obstack *obstack;
        -:10351:{
        -:10352:  return obstack_room (obstack);
        -:10353:}
        -:10354:
        -:10355:void (obstack_grow) (obstack, pointer, length)
        -:10356:     struct obstack *obstack;
        -:10357:     POINTER pointer;
        -:10358:     int length;
        -:10359:{
        -:10360:  obstack_grow (obstack, pointer, length);
        -:10361:}
        -:10362:
        -:10363:void (obstack_grow0) (obstack, pointer, length)
        -:10364:     struct obstack *obstack;
        -:10365:     POINTER pointer;
        -:10366:     int length;
        -:10367:{
        -:10368:  obstack_grow0 (obstack, pointer, length);
        -:10369:}
        -:10370:
        -:10371:void (obstack_1grow) (obstack, character)
        -:10372:     struct obstack *obstack;
        -:10373:     int character;
        -:10374:{
        -:10375:  obstack_1grow (obstack, character);
        -:10376:}
        -:10377:
        -:10378:void (obstack_blank) (obstack, length)
        -:10379:     struct obstack *obstack;
        -:10380:     int length;
        -:10381:{
        -:10382:  obstack_blank (obstack, length);
        -:10383:}
        -:10384:
        -:10385:void (obstack_1grow_fast) (obstack, character)
        -:10386:     struct obstack *obstack;
        -:10387:     int character;
        -:10388:{
        -:10389:  obstack_1grow_fast (obstack, character);
        -:10390:}
        -:10391:
        -:10392:void (obstack_blank_fast) (obstack, length)
        -:10393:     struct obstack *obstack;
        -:10394:     int length;
        -:10395:{
        -:10396:  obstack_blank_fast (obstack, length);
        -:10397:}
        -:10398:
        -:10399:POINTER (obstack_finish) (obstack)
        -:10400:     struct obstack *obstack;
        -:10401:{
        -:10402:  return obstack_finish (obstack);
        -:10403:}
        -:10404:
        -:10405:POINTER (obstack_alloc) (obstack, length)
        -:10406:     struct obstack *obstack;
        -:10407:     int length;
        -:10408:{
        -:10409:  return obstack_alloc (obstack, length);
        -:10410:}
        -:10411:
        -:10412:POINTER (obstack_copy) (obstack, pointer, length)
        -:10413:     struct obstack *obstack;
        -:10414:     POINTER pointer;
        -:10415:     int length;
        -:10416:{
        -:10417:  return obstack_copy (obstack, pointer, length);
        -:10418:}
        -:10419:
        -:10420:POINTER (obstack_copy0) (obstack, pointer, length)
        -:10421:     struct obstack *obstack;
        -:10422:     POINTER pointer;
        -:10423:     int length;
        -:10424:{
        -:10425:  return obstack_copy0 (obstack, pointer, length);
        -:10426:}
        -:10427:
        -:10428:#endif /* __STDC__ */
        -:10429:
        -:10430:#endif /* 0 */
        -:10431:
        -:10432:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
        -:10433:/* search.c - searching subroutines using dfa, kwset and regex for grep.
        -:10434:   Copyright (C) 1992 Free Software Foundation, Inc.
        -:10435:
        -:10436:   This program is free software; you can redistribute it and/or modify
        -:10437:   it under the terms of the GNU General Public License as published by
        -:10438:   the Free Software Foundation; either version 2, or (at your option)
        -:10439:   any later version.
        -:10440:
        -:10441:   This program is distributed in the hope that it will be useful,
        -:10442:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:10443:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:10444:   GNU General Public License for more details.
        -:10445:
        -:10446:   You should have received a copy of the GNU General Public License
        -:10447:   along with this program; if not, write to the Free Software
        -:10448:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
        -:10449:
        -:10450:   Written August 1992 by Mike Haertel. */
        -:10451:
        -:10452:/*#include <ctype.h>*/
        -:10453:
        -:10454:#ifdef STDC_HEADERS
        -:10455:#if flag_limits==0
        -:10456:#undef RE_DUP_MAX
        -:10457:#include <limits.h>
        -:10458:#define flag_limits 1
        -:10459:#endif
        -:10460:#if flag_stdlib==0
        -:10461:#include <stdlib.h>
        -:10462:#define flag_stdlib 1
        -:10463:#endif
        -:10464:#else
        -:10465:#define UCHAR_MAX 255
        -:10466:#if flag_systypes==0
        -:10467:#include <sys/types.h>
        -:10468:#define flag_systypes 1
        -:10469:#endif
        -:10470:extern char *malloc();
        -:10471:#endif
        -:10472:
        -:10473:#ifdef HAVE_MEMCHR
        -:10474:#if flag_string==0
        -:10475:#include <string.h>
        -:10476:#define flag_string 1
        -:10477:#endif
        -:10478:#ifdef NEED_MEMORY_H
        -:10479:#if flag_memory==0
        -:10480:#include <memory.h>
        -:10481:#define flag_memory 1
        -:10482:#endif
        -:10483:#endif
        -:10484:#else
        -:10485:#ifdef __STDC__
        -:10486:extern void *memchr();
        -:10487:#else
        -:10488:extern char *memchr();
        -:10489:#endif
        -:10490:#endif
        -:10491:
        -:10492:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
        -:10493:#undef bcopy
        -:10494:#define bcopy(s, d, n) memcpy((d), (s), (n))
        -:10495:#endif
        -:10496:
        -:10497:#ifdef isascii
        -:10498:#define ISALNUM(C) (isascii(C) && isalnum(C))
        -:10499:#define ISUPPER(C) (isascii(C) && isupper(C))
        -:10500:#else
        -:10501:#define ISALNUM(C) isalnum(C)
        -:10502:#define ISUPPER(C) isupper(C)
        -:10503:#endif
        -:10504:
        -:10505:#define TOLOWER(C) (ISUPPER(C) ? tolower(C) : (C))
        -:10506:
        -:10507:/*#include "grep.h"*/
        -:10508:/*#include "dfa.h"*/
        -:10509:/*#include "kwset.h"*/
        -:10510:/*#include "regex.h"*/
        -:10511:
        -:10512:#define NCHAR (UCHAR_MAX + 1)
        -:10513:
        -:10514:#if __STDC__
        -:10515:static void Gcompile(char *, size_t);
        -:10516:static void Ecompile(char *, size_t);
        -:10517:static char *EGexecute(char *, size_t, char **);
        -:10518:static void Fcompile(char *, size_t);
        -:10519:static char *Fexecute(char *, size_t, char **);
        -:10520:#else
        -:10521:static void Gcompile();
        -:10522:static void Ecompile();
        -:10523:static char *EGexecute();
        -:10524:static void Fcompile();
        -:10525:static char *Fexecute();
        -:10526:#endif
        -:10527:
        -:10528:/* Here is the matchers vector for the main program. */
        -:10529:struct matcher matchers[] = {
        -:10530:  { "default", Gcompile, EGexecute },
        -:10531:  { "grep", Gcompile, EGexecute },
        -:10532:  { "ggrep", Gcompile, EGexecute },
        -:10533:  { "egrep", Ecompile, EGexecute },
        -:10534:  { "posix-egrep", Ecompile, EGexecute },
        -:10535:  { "gegrep", Ecompile, EGexecute },
        -:10536:  { "fgrep", Fcompile, Fexecute },
        -:10537:  { "gfgrep", Fcompile, Fexecute },
        -:10538:  { 0, 0, 0 },
        -:10539:};
        -:10540:
        -:10541:/* For -w, we also consider _ to be word constituent.  */
        -:10542:#define WCHAR(C) (ISALNUM(C) || (C) == '_')
        -:10543:
        -:10544:/* DFA compiled regexp. */
        -:10545:static struct dfa dfa_1;
        -:10546:
        -:10547:/* Regex compiled regexp. */
        -:10548:static struct re_pattern_buffer regex;
        -:10549:
        -:10550:/* KWset compiled pattern.  For Ecompile and Gcompile, we compile
        -:10551:   a list of strings, at least one of which is known to occur in
        -:10552:   any string matching the regexp. */
        -:10553:static kwset_t kwset;
        -:10554:
        -:10555:/* Last compiled fixed string known to exactly match the regexp.
        -:10556:   If kwsexec() returns < lastexact, then we don't need to
        -:10557:   call the regexp matcher at all. */
        -:10558:static int lastexact;
        -:10559:
        -:10560:void
function dfaerror called 0 returned 0% blocks executed 0%
    #####:10561:dfaerror(mesg)
        -:10562:     char *mesg;
        -:10563:{
    #####:10564:  fatal(mesg, 0);
    #####:10565:}
    $$$$$:10565-block  0
        -:10566:
        -:10567:static void
function kwsinit called 4 returned 100% blocks executed 25%
        4:10568:kwsinit()
        -:10569:{
        -:10570:  static char trans[NCHAR];
        -:10571:  int i;
        -:10572:
        4:10573:  if (match_icase)
        4:10573-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10574:    for (i = 0; i < NCHAR; ++i)
    $$$$$:10574-block  0
    $$$$$:10574-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:10574-block  2
    #####:10575:      trans[i] = TOLOWER(i);
    $$$$$:10575-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10575-block  1
    $$$$$:10575-block  2
    $$$$$:10575-block  3
    $$$$$:10575-block  4
        -:10576:
        4:10577:  if (!(kwset = kwsalloc(match_icase ? trans : (char *) 0)))
        4:10577-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:10578:    fatal("memory exhausted", 0);
    $$$$$:10578-block  0
        4:10579:}  
        4:10579-block  0
        -:10580:
        -:10581:/* If the DFA turns out to have some set of fixed strings one of
        -:10582:   which must occur in the match, then we build a kwset matcher
        -:10583:   to find those strings, and thus quickly filter out impossible
        -:10584:   matches. */
        -:10585:static void
function kwsmusts called 3 returned 100% blocks executed 85%
        3:10586:kwsmusts()
        -:10587:{
        -:10588:  struct dfamust *dm;
        -:10589:  char *err;
        -:10590:
        3:10591:  if (dfa_1.musts)
        3:10591-block  0
branch  0 taken 33%
branch  1 taken 67%
        -:10592:    {
        2:10593:      kwsinit();
        -:10594:      /* First, we compile in the substrings known to be exact
        -:10595:	 matches.  The kwset matcher will return the index
        -:10596:	 of the matching string that it chooses. */
        4:10597:      for (dm = dfa_1.musts; dm; dm = dm->next)
        2:10597-block  0
        4:10597-block  1
branch  0 taken 50%
branch  1 taken 50%
        2:10597-block  2
        -:10598:	{
        2:10599:	  if (!dm->exact)
        2:10599-block  0
branch  0 taken 50%
branch  1 taken 50%
        1:10600:	    continue;
        1:10600-block  0
        1:10601:	  ++lastexact;
        1:10602:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
        1:10602-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10603:	    fatal(err, 0);
    $$$$$:10603-block  0
        1:10604:	}
        1:10604-block  0
        -:10605:      /* Now, we compile the substrings that will require
        -:10606:	 the use of the regexp matcher.  */
        4:10607:      for (dm = dfa_1.musts; dm; dm = dm->next)
        2:10607-block  0
        4:10607-block  1
branch  0 taken 50%
branch  1 taken 50%
        2:10607-block  2
        -:10608:	{
        2:10609:	  if (dm->exact)
        2:10609-block  0
branch  0 taken 50%
branch  1 taken 50%
        1:10610:	    continue;
        1:10610-block  0
        1:10611:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
        1:10611-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:10612:	    fatal(err, 0);
    $$$$$:10612-block  0
        1:10613:	}
        1:10613-block  0
        2:10614:      if ((err = kwsprep(kwset)) != 0)
        2:10614-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:10615:	fatal(err, 0);
    $$$$$:10615-block  0
        2:10616:    }
        2:10616-block  0
        3:10617:}
        3:10617-block  0
        -:10618:
        -:10619:static void
function Gcompile called 2 returned 100% blocks executed 33%
        2:10620:Gcompile(pattern, size)
        -:10621:     char *pattern;
        -:10622:     size_t size;
        -:10623:{
        -:10624:#ifdef __STDC__
        -:10625:  const
        -:10626:#endif
        -:10627:  char *err;
        -:10628:
        2:10629:  re_set_syntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE);
        2:10630:  dfasyntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE, match_icase);
        -:10631:
        2:10632:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
        2:10632-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10633:    fatal(err, 0);
    $$$$$:10633-block  0
        -:10634:
        2:10635:  dfainit(&dfa_1);
        -:10636:
        -:10637:  /* In the match_words and match_lines cases, we use a different pattern
        -:10638:     for the DFA matcher that will quickly throw out cases that won't work.
        -:10639:     Then if DFA succeeds we do some hairy stuff using the regex matcher
        -:10640:     to decide whether the match should really count. */
        2:10641:  if (match_words || match_lines)
        2:10641-block  0
branch  0 taken 100%
branch  1 taken 0%
        2:10641-block  1
branch  2 taken 100%
branch  3 taken 0%
        -:10642:    {
        -:10643:      /* In the whole-word case, we use the pattern:
        -:10644:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
        -:10645:	 In the whole-line case, we use the pattern:
        -:10646:	 ^(userpattern)$.
        -:10647:	 BUG: Using [A-Za-z_] is locale-dependent!  */
        -:10648:
    #####:10649:      char *n = malloc(size + 50);
    #####:10650:      int i = 0;
        -:10651:
    #####:10652:      strcpy(n, "");
        -:10653:
    #####:10654:      if (match_lines)
    $$$$$:10654-block  0
branch  0 never executed
branch  1 never executed
    #####:10655:	strcpy(n, "^\\(");
    $$$$$:10655-block  0
    #####:10656:      if (match_words)
    $$$$$:10656-block  0
branch  0 never executed
branch  1 never executed
    #####:10657:	strcpy(n, "\\(^\\|[^0-9A-Za-z_]\\)\\(");
    $$$$$:10657-block  0
        -:10658:
    #####:10659:      i = strlen(n);
    #####:10660:      bcopy(pattern, n + i, size);
    #####:10661:      i += size;
        -:10662:
    #####:10663:      if (match_words)
    $$$$$:10663-block  0
branch  0 never executed
branch  1 never executed
    #####:10664:	strcpy(n + i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
    $$$$$:10664-block  0
    #####:10665:      if (match_lines)
    $$$$$:10665-block  0
branch  0 never executed
branch  1 never executed
    #####:10666:	strcpy(n + i, "\\)$");
    $$$$$:10666-block  0
        -:10667:
    #####:10668:      i += strlen(n + i);
    #####:10669:      dfacomp(n, i, &dfa_1, 1);
    #####:10670:    }
    $$$$$:10670-block  0
        -:10671:  else
        2:10672:    dfacomp(pattern, size, &dfa_1, 1);
        2:10672-block  0
        -:10673:
        2:10674:  kwsmusts();
        2:10675:}
        2:10675-block  0
        -:10676:
        -:10677:static void
function Ecompile called 1 returned 100% blocks executed 72%
        1:10678:Ecompile(pattern, size)
        -:10679:     char *pattern;
        -:10680:     size_t size;
        -:10681:{
        -:10682:#ifdef __STDC__
        -:10683:  const
        -:10684:#endif
        -:10685:  char *err;
        -:10686:
        1:10687:  if (strcmp(matcher, "posix-egrep") == 0)
        1:10687-block  0
branch  0 taken 0%
branch  1 taken 100%
        -:10688:    {
        1:10689:      re_set_syntax(RE_SYNTAX_POSIX_EGREP);
        1:10690:      dfasyntax(RE_SYNTAX_POSIX_EGREP, match_icase);
        1:10691:    }
        1:10691-block  0
        -:10692:  else
        -:10693:    {
    #####:10694:      re_set_syntax(RE_SYNTAX_EGREP);
    #####:10695:      dfasyntax(RE_SYNTAX_EGREP, match_icase);
    $$$$$:10695-block  0
        -:10696:    }
        -:10697:
        1:10698:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
        1:10698-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10699:    fatal(err, 0);
    $$$$$:10699-block  0
        -:10700:
        1:10701:  dfainit(&dfa_1);
        -:10702:
        -:10703:  /* In the match_words and match_lines cases, we use a different pattern
        -:10704:     for the DFA matcher that will quickly throw out cases that won't work.
        -:10705:     Then if DFA succeeds we do some hairy stuff using the regex matcher
        -:10706:     to decide whether the match should really count. */
        1:10707:  if (match_words || match_lines)
        1:10707-block  0
branch  0 taken 100%
branch  1 taken 0%
        1:10707-block  1
branch  2 taken 0%
branch  3 taken 100%
        -:10708:    {
        -:10709:      /* In the whole-word case, we use the pattern:
        -:10710:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
        -:10711:	 In the whole-line case, we use the pattern:
        -:10712:	 ^(userpattern)$.
        -:10713:	 BUG: Using [A-Za-z_] is locale-dependent!  */
        -:10714:
        1:10715:      char *n = malloc(size + 50);
        1:10716:      int i = 0;
        -:10717:
        1:10718:      strcpy(n, "");
        -:10719:
        1:10720:      if (match_lines)
        1:10720-block  0
branch  0 taken 0%
branch  1 taken 100%
        1:10721:	strcpy(n, "^(");
        1:10721-block  0
        1:10722:      if (match_words)
        1:10722-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10723:	strcpy(n, "(^|[^0-9A-Za-z_])(");
    $$$$$:10723-block  0
        -:10724:
        1:10725:      i = strlen(n);
        1:10726:      bcopy(pattern, n + i, size);
        1:10727:      i += size;
        -:10728:
        1:10729:      if (match_words)
        1:10729-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10730:	strcpy(n + i, ")([^0-9A-Za-z_]|$)");
    $$$$$:10730-block  0
        1:10731:      if (match_lines)
        1:10731-block  0
branch  0 taken 0%
branch  1 taken 100%
        1:10732:	strcpy(n + i, ")$");
        1:10732-block  0
        -:10733:
        1:10734:      i += strlen(n + i);
        1:10735:      dfacomp(n, i, &dfa_1, 1);
        1:10736:    }
        1:10736-block  0
        -:10737:  else
    #####:10738:    dfacomp(pattern, size, &dfa_1, 1);
    $$$$$:10738-block  0
        -:10739:
        1:10740:  kwsmusts();
        1:10741:}
        1:10741-block  0
        -:10742:
        -:10743:static char *
function EGexecute called 3 returned 100% blocks executed 28%
        3:10744:EGexecute(buf, size, endp)
        -:10745:     char *buf;
        -:10746:     size_t size;
        -:10747:     char **endp;
        -:10748:{
        -:10749:  register char *buflim, *beg, *end, save;
        -:10750:  int backref, start, len;
        -:10751:  struct kwsmatch kwsm;
        -:10752:  static struct re_registers regs; /* This is static on account of a BRAIN-DEAD
        -:10753:				    Q@#%!# library interface in regex.c.  */
        -:10754:
        3:10755:  buflim = buf + size;
        -:10756:
        3:10757:  for (beg = end = buf; end < buflim; beg = end + 1)
        3:10757-block  0
        3:10757-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$:10757-block  2
        -:10758:    {
        3:10759:      if (kwset)
        3:10759-block  0
branch  0 taken 67%
branch  1 taken 33%
        -:10760:	{
        -:10761:	  /* Find a possible match using the KWset matcher. */
        2:10762:	  beg = kwsexec(kwset, beg, buflim - beg, &kwsm);
        2:10763:	  if (!beg)
        2:10763-block  0
branch  0 taken 0%
branch  1 taken 100%
        2:10764:	    goto failure;
        2:10764-block  0
        -:10765:	  /* Narrow down to the line containing the candidate, and
        -:10766:	     run it through DFA. */
    #####:10767:	  end = memchr(beg, '\n', buflim - beg);
    #####:10768:	  if (!end)
    $$$$$:10768-block  0
branch  0 never executed
branch  1 never executed
    #####:10769:	    end = buflim;
    $$$$$:10769-block  0
    #####:10770:	  while (beg > buf && beg[-1] != '\n')
    $$$$$:10770-block  0
    $$$$$:10770-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:10770-block  2
    $$$$$:10770-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:10770-block  4
    #####:10771:	    --beg;
    #####:10772:	  save = *end;
    #####:10773:	  if (kwsm.index < lastexact)
    $$$$$:10773-block  0
branch  0 never executed
branch  1 never executed
    #####:10774:	    goto success;
    $$$$$:10774-block  0
    #####:10775:	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) 0, &backref))
    $$$$$:10775-block  0
branch  0 never executed
branch  1 never executed
        -:10776:	    {
    #####:10777:	      *end = save;
    #####:10778:	      continue;
    $$$$$:10778-block  0
        -:10779:	    }
    #####:10780:	  *end = save;
        -:10781:	  /* Successful, no backreferences encountered. */
    #####:10782:	  if (!backref)
    $$$$$:10782-block  0
branch  0 never executed
branch  1 never executed
    #####:10783:	    goto success;
    $$$$$:10783-block  0
    #####:10784:	}
    $$$$$:10784-block  0
        -:10785:      else
        -:10786:	{
        -:10787:	  /* No good fixed strings; start with DFA. */
        1:10788:	  save = *buflim;
        1:10789:	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 0, &backref);
        1:10790:	  *buflim = save;
        1:10791:	  if (!beg)
        1:10791-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10792:	    goto failure;
    $$$$$:10792-block  0
        -:10793:	  /* Narrow down to the line we've found. */
        1:10794:	  end = memchr(beg, '\n', buflim - beg);
        1:10795:	  if (!end)
        1:10795-block  0
branch  0 taken 0%
branch  1 taken 100%
        1:10796:	    end = buflim;
        1:10796-block  0
        1:10797:	  while (beg > buf && beg[-1] != '\n')
        1:10797-block  0
        1:10797-block  1
branch  0 taken 0%
branch  1 taken 100%
        1:10797-block  2
        1:10797-block  3
branch  2 taken 0%
branch  3 taken 100%
    $$$$$:10797-block  4
    #####:10798:	    --beg;
        -:10799:	  /* Successful, no backreferences encountered! */
        1:10800:	  if (!backref)
        1:10800-block  0
branch  0 taken 0%
branch  1 taken 100%
        1:10801:	    goto success;
        1:10801-block  0
        -:10802:	}
        -:10803:      /* If we've made it to this point, this means DFA has seen
        -:10804:	 a probable match, and we need to run it through Regex. */
    #####:10805:      regex.not_eol = 0;
    #####:10806:      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 0)
    $$$$$:10806-block  0
branch  0 never executed
branch  1 never executed
        -:10807:	{
    #####:10808:	  len = regs.end[0] - start;
    #####:10809:	  if (!match_lines && !match_words || match_lines && len == end - beg)
    $$$$$:10809-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10809-block  1
    $$$$$:10809-block  2
    $$$$$:10809-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:10809-block  4
branch  4 never executed
branch  5 never executed
    #####:10810:	    goto success;
    $$$$$:10810-block  0
        -:10811:	  /* If -w, check if the match aligns with word boundaries.
        -:10812:	     We do this iteratively because:
        -:10813:	     (a) the line may contain more than one occurence of the pattern, and
        -:10814:	     (b) Several alternatives in the pattern might be valid at a given
        -:10815:	     point, and we may need to consider a shorter one to find a word
        -:10816:	     boundary. */
    #####:10817:	  if (match_words)
    $$$$$:10817-block  0
branch  0 never executed
branch  1 never executed
    #####:10818:	    while (start >= 0)
    $$$$$:10818-block  0
    $$$$$:10818-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:10818-block  2
    $$$$$:10818-block  3
        -:10819:	      {
    #####:10820:		if ((start == 0 || !WCHAR(beg[start - 1]))
    $$$$$:10820-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10820-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:10820-block  2
    $$$$$:10820-block  3
    #####:10821:		    && (len == end - beg || !WCHAR(beg[start + len])))
    $$$$$:10821-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10821-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:10821-block  2
branch  4 never executed
branch  5 never executed
    #####:10822:		  goto success;
    $$$$$:10822-block  0
    #####:10823:		if (len > 0)
    $$$$$:10823-block  0
branch  0 never executed
branch  1 never executed
        -:10824:		  {
        -:10825:		    /* Try a shorter length anchored at the same place. */
    #####:10826:		    --len;
    #####:10827:		    regex.not_eol = 1;
    #####:10828:		    len = re_match(&regex, beg, start + len, start, &regs);
    #####:10829:		  }
    $$$$$:10829-block  0
    #####:10830:		if (len <= 0)
    $$$$$:10830-block  0
branch  0 never executed
branch  1 never executed
        -:10831:		  {
        -:10832:		    /* Try looking further on. */
    #####:10833:		    if (start == end - beg)
    $$$$$:10833-block  0
branch  0 never executed
branch  1 never executed
    #####:10834:		      break;
    $$$$$:10834-block  0
    #####:10835:		    ++start;
    #####:10836:		    regex.not_eol = 0;
    #####:10837:		    start = re_search(&regex, beg, end - beg,
    #####:10838:				      start, end - beg - start, &regs);
    #####:10839:		    len = regs.end[0] - start;
    #####:10840:		  }
    $$$$$:10840-block  0
        -:10841:	      }
    #####:10842:	}
    $$$$$:10842-block  0
    #####:10843:    }
    $$$$$:10843-block  0
    $$$$$:10843-block  1
        -:10844:
        -:10845: failure:
        2:10846:  return 0;
        2:10846-block  0
        -:10847:
        -:10848: success:
        1:10849:  *endp = end < buflim ? end + 1 : end;
        1:10849-block  0
branch  0 taken 0%
branch  1 taken 100%
    $$$$$:10849-block  1
        1:10849-block  2
        1:10850:  return beg;
        1:10850-block  0
        3:10851:}
        3:10851-block  0
        -:10852:
        -:10853:static void
function Fcompile called 2 returned 100% blocks executed 81%
        2:10854:Fcompile(pattern, size)
        -:10855:     char *pattern;
        -:10856:     size_t size;
        -:10857:{
        -:10858:  char *beg, *lim, *err;
        -:10859:
        2:10860:  kwsinit();
        2:10861:  beg = pattern;
        2:10862:  do
        2:10862-block  0
        -:10863:    {
      176:10864:      for (lim = beg; lim < pattern + size && *lim != '\n'; ++lim)
        2:10864-block  0
      176:10864-block  1
branch  0 taken 1%
branch  1 taken 99%
      174:10864-block  2
      176:10864-block  3
branch  2 taken 99%
branch  3 taken 1%
      174:10864-block  4
      174:10864-block  5
        -:10865:	;
        2:10866:      if ((err = kwsincr(kwset, beg, lim - beg)) != 0)
        2:10866-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10867:	fatal(err, 0);
    $$$$$:10867-block  0
        2:10868:      if (lim < pattern + size)
        2:10868-block  0
branch  0 taken 100%
branch  1 taken 0%
    #####:10869:	++lim;
    $$$$$:10869-block  0
        2:10870:      beg = lim;
        2:10871:    }
        2:10871-block  0
        2:10871-block  1
branch  0 taken 100%
branch  1 taken 0%
        2:10872:  while (beg < pattern + size);
        -:10873:
        2:10874:  if ((err = kwsprep(kwset)) != 0)
        2:10874-block  0
branch  0 taken 0%
branch  1 taken 100%
    #####:10875:    fatal(err, 0);
    $$$$$:10875-block  0
        2:10876:}
        2:10876-block  0
        -:10877:
        -:10878:static char *
function Fexecute called 2 returned 100% blocks executed 11%
        2:10879:Fexecute(buf, size, endp)
        -:10880:     char *buf;
        -:10881:     size_t size;
        -:10882:     char **endp;
        -:10883:{
        -:10884:  register char *beg, *try, *end;
        -:10885:  register size_t len;
        -:10886:  struct kwsmatch kwsmatch;
        -:10887:
        2:10888:  for (beg = buf; beg <= buf + size; ++beg)
        2:10888-block  0
        2:10888-block  1
branch  0 taken 100%
branch  1 taken 0%
    $$$$$:10888-block  2
        -:10889:    {
        2:10890:      if (!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch)))
        2:10890-block  0
branch  0 taken 0%
branch  1 taken 100%
        2:10891:	return 0;
        2:10891-block  0
    #####:10892:      len = kwsmatch.size[0];
    #####:10893:      if (match_lines)
    $$$$$:10893-block  0
branch  0 never executed
branch  1 never executed
        -:10894:	{
    #####:10895:	  if (beg > buf && beg[-1] != '\n')
    $$$$$:10895-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10895-block  1
branch  2 never executed
branch  3 never executed
    #####:10896:	    continue;
    $$$$$:10896-block  0
    #####:10897:	  if (beg + len < buf + size && beg[len] != '\n')
    $$$$$:10897-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10897-block  1
branch  2 never executed
branch  3 never executed
    #####:10898:	    continue;
    $$$$$:10898-block  0
    #####:10899:	  goto success;
    $$$$$:10899-block  0
        -:10900:	}
    #####:10901:      else if (match_words)
    $$$$$:10901-block  0
branch  0 never executed
branch  1 never executed
    #####:10902:	for (try = beg; len && try;)
    $$$$$:10902-block  0
    $$$$$:10902-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:10902-block  2
    $$$$$:10902-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:10902-block  4
        -:10903:	  {
    #####:10904:	    if (try > buf && WCHAR((unsigned char) try[-1]))
    $$$$$:10904-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10904-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:10904-block  2
branch  4 never executed
branch  5 never executed
    #####:10905:	      break;
    $$$$$:10905-block  0
    #####:10906:	    if (try + len < buf + size && WCHAR((unsigned char) try[len]))
    $$$$$:10906-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:10906-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:10906-block  2
branch  4 never executed
branch  5 never executed
        -:10907:	      {
    #####:10908:		try = kwsexec(kwset, beg, --len, &kwsmatch);
    #####:10909:		len = kwsmatch.size[0];
    #####:10910:	      }
    $$$$$:10910-block  0
        -:10911:	    else
    #####:10912:	      goto success;
    $$$$$:10912-block  0
    #####:10913:	  }
    $$$$$:10913-block  0
        -:10914:      else
    #####:10915:	goto success;
    $$$$$:10915-block  0
    #####:10916:    }
    $$$$$:10916-block  0
        -:10917:
    #####:10918:  return 0;
    $$$$$:10918-block  0
        -:10919:
        -:10920: success:
    #####:10921:  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 0)
    $$$$$:10921-block  0
branch  0 never executed
branch  1 never executed
    #####:10922:    ++end;
    $$$$$:10922-block  0
        -:10923:  else
    #####:10924:    end = buf + size;
    $$$$$:10924-block  0
    #####:10925:  *endp = end;
    #####:10926:  while (beg > buf && beg[-1] != '\n')
    $$$$$:10926-block  0
    $$$$$:10926-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:10926-block  2
    $$$$$:10926-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:10926-block  4
    #####:10927:    --beg;
    #####:10928:  return beg;
    $$$$$:10928-block  0
        2:10929:}
        2:10929-block  0
